/******************************************************************************
* 
* ControlCenter
* Version
* Copyright (C) 2007-2008 ControlCenter Software Co., Ltd.
* All Rights Reserved
* $Header: /cvsdata/vc/ControlCenter/Policies.h,v 1.7 2010/10/28 02:20:04 administrator Exp $
* 
*******************************************************************************
* 
* Description:
******************************************************************************/
#pragma once
#include "JsonSerializer.h"
#include <vector>

class CGeneralGroup;
using CGeneralGroupPtr = std::shared_ptr<CGeneralGroup>;
using CGeneralGroupArray = CSharedDynamicJsonVector<CGeneralGroup>;

class CPoliciesSet;
using CPoliciesSetPtr = std::shared_ptr<CPoliciesSet>;
using CPoliciesSetArray = CSharedDynamicJsonVector<CPoliciesSet>;

#define DECLARE_POLICY_SET_METHOD(TYPE, MEMBER_NAME, PROPERTY_NAME) \
public: \
	void Set##PROPERTY_NAME(TYPE nVal) \
{ \
	if(MEMBER_NAME != nVal) { MEMBER_NAME = nVal; SetPolicySetModificatory(TRUE); } \
} \

#define DECLARE_POLICY_MEMBER_AND_METHOD(TYPE, MEMBER_NAME, PROPERTY_NAME) \
protected: \
	TYPE MEMBER_NAME; \
	DECLARE_GET_METHOD(TYPE, MEMBER_NAME, PROPERTY_NAME) \
	DECLARE_POLICY_SET_METHOD(TYPE, MEMBER_NAME, PROPERTY_NAME) \

#define DECLARE_POLICIESSET_SET_METHOD(TYPE, MEMBER_NAME, PROPERTY_NAME) \
public: \
	void Set##PROPERTY_NAME(TYPE nVal) \
{ \
	if(MEMBER_NAME != nVal) \
{ \
	MEMBER_NAME = nVal; \
	m_bModificatory = TRUE; \
} \
} \

#define DECLARE_POLICIESSET_MEMBER_AND_METHOD(TYPE, MEMBER_NAME, PROPERTY_NAME) \
protected: \
	TYPE MEMBER_NAME; \
	DECLARE_GET_METHOD(TYPE, MEMBER_NAME, PROPERTY_NAME) \
	DECLARE_POLICIESSET_SET_METHOD(TYPE, MEMBER_NAME, PROPERTY_NAME) \


/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// <summary>
/// 策略选项类定义
/// </summary>
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
class CPolicyOption : public CSerializeEntry
{	
public:
	CPolicyOption(CPoliciesSet* pPoliciesSet = nullptr);
	~CPolicyOption(void);
	CPolicyOption& operator=(CPolicyOption& objPolicyOption);
	bool operator==(CPolicyOption& objPolicyOption);
	ENABLE_SERIALIZE(CPolicyOption)
public:
	void SetPolicySetModificatory(bool bModificatory);

public:
	virtual void Serialize(CJSONSerializer& refJsonSerializer) const override;

	virtual void DeSerialize(CJSONSerializer& refJsonSerializer) override;

private:
	DECLARE_POLICY_MEMBER_AND_METHOD(std::string,m_strValue,Value)
	DECLARE_POLICY_MEMBER_AND_METHOD(unsigned int,m_nType,Type)
	DECLARE_POLICY_MEMBER_AND_METHOD(unsigned int,m_nOperator,Operator)
	DECLARE_POLICY_MEMBER_AND_METHOD(unsigned int,m_nMacroVariable,MacroVariable) //选项除了可以设定明确的值外，还可以使用选项作为宏
	DECLARE_MEMBER_AND_METHOD(CPoliciesSet*,m_pPoliciesSet,PoliciesSet);
#ifdef ENABLE_FULL_EDIT_POLICY
	DECLARE_MEMBER_AND_METHOD(bool,m_bReplicate,Replicate)
#endif
};

using CPolicyOptionPtr = std::shared_ptr<CPolicyOption>;
using CPolicyOptionArray = CSharedDynamicJsonVector<CPolicyOption>;



/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// <summary>
/// 策略类定义
/// </summary>
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
class CPolicyItem : public CSerializeEntry
{
public:
	CPolicyItem(CGeneralGroup* pGeneralGroup = nullptr,CPoliciesSet* pPoliciesSet = nullptr);
	~CPolicyItem(void);
	CPolicyItem& operator=(CPolicyItem& objPolicyItem);
	ENABLE_SERIALIZE(CPolicyItem)
public:
	CPolicyOptionArray& GetOptionVector()   { return m_arrPolicyOptions;}
	std::string& GetPatternRef()                { return m_strPattern;}
	void SetPoliciesSet(CPoliciesSet* pPoliciesSet);
	void SetPolicySetModificatory(bool bModificatory);

public:
	CPolicyOptionPtr CreateOption();

	void RemoveOption(CPolicyOptionPtr pPolicyOption);
	

public:
	virtual void Serialize(CJSONSerializer& refJsonSerializer) const override;

	virtual void DeSerialize(CJSONSerializer& refJsonSerializer) override;

private:
	void ClearAllOptions();

private:
	DECLARE_POLICY_MEMBER_AND_METHOD(std::string, m_strScript, Script)
	DECLARE_POLICY_MEMBER_AND_METHOD(UINT,               m_nID,              ID) 
	DECLARE_POLICY_MEMBER_AND_METHOD(std::string,            m_strCode,          Code)
	DECLARE_POLICY_MEMBER_AND_METHOD(std::string,            m_strName,          Name)
	DECLARE_POLICY_MEMBER_AND_METHOD(std::string,            m_strDescription,   Description)
	DECLARE_POLICY_MEMBER_AND_METHOD(std::string,            m_strAffected,      Affected)
	DECLARE_POLICY_MEMBER_AND_METHOD(std::string,            m_strAdvice,        Advice)
	DECLARE_POLICY_MEMBER_AND_METHOD(UINT,               m_nProtocol,        Protocol)
	DECLARE_POLICY_MEMBER_AND_METHOD(UINT,               m_nSampleID,        SampleID)
	DECLARE_POLICY_MEMBER_AND_METHOD(UINT,m_nSeverity,        Severity)
	DECLARE_POLICY_MEMBER_AND_METHOD(UINT,               m_nResponseSchemeID,ResponseSchemeID)
	DECLARE_POLICY_MEMBER_AND_METHOD(std::string,            m_strPattern,       Pattern)
	DECLARE_POLICY_MEMBER_AND_METHOD(bool,       m_bCaseSensitivity, CaseSensitivity)
	DECLARE_POLICY_MEMBER_AND_METHOD(UINT, m_nEndpoint,        Endpoint)
	DECLARE_POLICY_MEMBER_AND_METHOD(bool               ,m_bEnable,          Enable)
	DECLARE_POLICY_MEMBER_AND_METHOD(UINT,m_nOptionRelation,OptionRelation)    //选项关系
	DECLARE_POLICY_MEMBER_AND_METHOD(UINT,m_nPatternFormat,PatternFormat)  //模式格式
	DECLARE_POLICY_MEMBER_AND_METHOD(UINT,m_nPatternRelation,PatternRelation) //模式关系
	DECLARE_POLICY_MEMBER_AND_METHOD(bool               ,m_bRemoving,        Removing)
	DECLARE_MEMBER_AND_METHOD(CGeneralGroup*     ,m_pGeneralGroup,    GeneralGroup)
	

	CPolicyOptionArray             m_arrPolicyOptions;
	CPoliciesSet*                  m_pPoliciesSet;
};

using CPolicyItemPtr = std::shared_ptr<CPolicyItem>;
using CPolicyItemArray = CSharedDynamicJsonVector<CPolicyItem>;   



/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// <summary>
/// 常规策略组
/// </summary>
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
class CGeneralGroup: public CSerializeEntry
	, public std::enable_shared_from_this<CGeneralGroup>
{
public:
	CGeneralGroup(CPoliciesSet* pPoliciesSet = nullptr);
	~CGeneralGroup(void);
	CGeneralGroup& operator=(CGeneralGroup& objGeneralGroup);
ENABLE_SERIALIZE(CGeneralGroup)
public:
	size_t GetPolicyItemCount()           { return m_arrPolicyItems.size();}
	
	CPolicyItemArray&  GetPolicyItems()    { return m_arrPolicyItems;}

	void SetPolicySetModificatory(bool bModificatory);
	
	void SetPoliciesSet(CPoliciesSet* pPoliciesSet);
public:
	CPolicyItemPtr CreatePolicyItem(const UINT nID,const std::string strName);

	CPolicyItemPtr LookupPolicyItem(const UINT nID);
	
	CPolicyItemPtr LookupPolicyItem(const std::string strName);
	
	CPolicyItemPtr LookupPolicyItembyCode(const std::string strCode);
	
	void RemovePolicyItem(const UINT nID);
	
	void EnableAllPolicyItems(const bool bEnable);
	
	void EnablePolicyItem(const std::string strCode, const bool bEnable);
	
	void SortPolicyItems();
	
	void RemoveAllPolicyTtems();

public:

	virtual void Serialize(CJSONSerializer& refJsonSerializer) const override;

	virtual void DeSerialize(CJSONSerializer& refJsonSerializer) override;


private:
	DECLARE_POLICY_MEMBER_AND_METHOD(UINT,m_nID,ID);
	DECLARE_MEMBER_AND_METHOD(UINT,m_nMaxItemID,MaxItemID);
	CPoliciesSet*           m_pPoliciesSet;
	CPolicyItemArray        m_arrPolicyItems; 
};




/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// <summary>
/// 特殊策略组
/// </summary>
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
class CSpecialGroup: public CSerializeEntry
{
public:
	CSpecialGroup(bool bSytem = TRUE,CPoliciesSet* pPoliciesSet = nullptr);
	~CSpecialGroup(void);
	CSpecialGroup& operator=(CSpecialGroup& objSpecialGroup);
	ENABLE_SERIALIZE(CSpecialGroup)
public:	

	CGeneralGroupArray& GetGeneralPolicies() { return m_arrGeneralPolicies; }

	void SetPolicySetModificatory(bool bModificatory);

public:
	CGeneralGroupPtr CreateGeneralGroup(const UINT nID);

	CGeneralGroupPtr LookupGeneralGroupByID(const UINT nID);	
	
	//mothed to relate policy item
	void EnablePolicyItem(std::string strCode, bool bEnable);

	void Clear();

public:
	void DeSerializeEnd();

	virtual void Serialize(CJSONSerializer& refJsonSerializer) const override;

	virtual void DeSerialize(CJSONSerializer& refJsonSerializer) override;


private:
	DECLARE_MEMBER_AND_METHOD(CPoliciesSet*,m_pPoliciesSet,PoliciesSet);
	DECLARE_POLICY_MEMBER_AND_METHOD(bool,m_pSytem,System);
	CGeneralGroupArray      m_arrGeneralPolicies;
};



class CPoliciesSet: public CSerializeEntry
	,public std::enable_shared_from_this<CPoliciesSet>
{
public:
	CPoliciesSet(const bool bSystem = TRUE);
	~CPoliciesSet(void);
	CPoliciesSet& operator=(CPoliciesSet& objCPoliciesSet);
	ENABLE_SERIALIZE(CPoliciesSet)

public:
	CSpecialGroup&  GetSystemPolicies() { return m_objSystemPolicies;}
	CSpecialGroup&  GetCustomPolicies() { return m_objCustomPolicies;}
	void ChangePoliciesCount(int nChangeValue) { m_nPoliciesCount += nChangeValue;}
	void InreaseVersion()               { m_nVersion++; }
	bool GetModificatory()              { return m_bModificatory;}
	void SetModificatory(bool bModificatory) { m_bModificatory = bModificatory;}

	void Init();

public:
	void UpdateFrom(CPoliciesSetPtr pPoliciesSet);

public:
	virtual void Serialize(CJSONSerializer& refJsonSerializer) const override;

	virtual void DeSerialize(CJSONSerializer& refJsonSerializer) override;

private:
	DECLARE_POLICIESSET_MEMBER_AND_METHOD(std::string,m_strName,Name);  ///< name of policy set
	DECLARE_POLICIESSET_MEMBER_AND_METHOD(std::string,m_strCode,Code);
	DECLARE_POLICIESSET_MEMBER_AND_METHOD(std::string,m_strSourceCode,SourceCode); //记录从哪个策略集派生
	DECLARE_POLICIESSET_MEMBER_AND_METHOD(bool,m_bSystem,System);
	DECLARE_POLICIESSET_MEMBER_AND_METHOD(bool,m_bActivity,Activity);
	DECLARE_POLICIESSET_MEMBER_AND_METHOD(UINT,m_nVersion,Version);
	DECLARE_POLICIESSET_MEMBER_AND_METHOD(int,m_nPoliciesCount,PoliciesCount);
	DECLARE_MEMBER_AND_METHOD(bool,m_bExported,Exported);         //用于标记是否需要导出
	DECLARE_MEMBER_AND_METHOD(std::string,m_strLastModifiedTime,LastModifiedTime); 
	DECLARE_MEMBER_AND_METHOD(UINT,m_nMaxItemID,MaxItemID); 

	CSpecialGroup       m_objSystemPolicies;
	CSpecialGroup       m_objCustomPolicies;
	bool                m_bModificatory;
};

using CPoliciesSetPtr = std::shared_ptr<CPoliciesSet>;
using CPoliciesSetArray = CSharedDynamicJsonVector<CPoliciesSet>;
  

class CPolicies: public CSerializeEntry
{
public:
	CPolicies();
	~CPolicies(void);
	ENABLE_SERIALIZE(CPolicies)
public:
	CPoliciesSetArray& GetPolicyList()   { return m_arrPoliciesSet;}
	size_t GetPolicyListSize()            { return m_arrPoliciesSet.size();}

public:
	CPoliciesSetPtr CreatePolicy(const std::string& strName,bool bSystem = TRUE); 

	CPoliciesSetPtr LookupPolicybyName(std::string strName);

	CPoliciesSetPtr LookupPolicybyCode(std::string strCode);

	bool RemovePolicy(std::string strName);

	CPoliciesSetPtr DerivePolicy(std::string strSrcName,std::string strDstName);

	CPoliciesSetPtr GetActivityPolicy();

public:

	bool Save(const char* lpFilePath);

	bool Load(const char* lpFilePath);

	bool Import(const char* lpFilePath, string_list& arrPoliciesSetList);

	bool ExtractPoliciesSetList(const char* lpFilePath, string_list& arrPoliciesSetList);

protected:
	void UpdateFrom(CPolicies& objPolicies);

	void GetNewPolicyCode(std::string& strCode,bool bIsSystem = TRUE);

private:
	CPoliciesSetArray        m_arrPoliciesSet;
	DECLARE_MEMBER_AND_METHOD(bool,m_bModificatory,Modificatory);
};
