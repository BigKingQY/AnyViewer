///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// @file  NodeGroupSettings.cpp
/// 节点组类实现
/// 
///
/// @author  黄丽云
/// @version 1.0
/// @date    2020-7-2
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#include "stdafx.h"
#include "NodeGroupSettings.h"
//#include "Constant.h"

REGISTER_CLASS(CNodeGroupSettings)


CNodeGroupSettings::CNodeGroupSettings(unsigned int nType)
	: m_Type(nType)

{
}
CNodeGroupSettings::CNodeGroupSettings(const char* pName, bool nEnableMaxNodes, unsigned int nMaxNodes)
	: m_strName(pName)
	, m_bEnableMaxNodes(nEnableMaxNodes)
	, m_nMaxNodes(nMaxNodes)
{
}


CNodeGroupSettings::~CNodeGroupSettings(void)
{
	m_lstChildren.clear();
}

//----------------------------------------------------------------
// CNodeGourpObject::AppendMac
/// @brief 添加Mac地址组添加mac地址
/// 
/// @param pMac 一个指向mac地址的指针
/// @author andy
//---------------------------------------------------------------
void CNodeGroupSettings::AppendMac(BYTE* pMac)
{
	assert(nullptr != pMac);

	if (nullptr != pMac)
	{
		ULONGLONG nMacValue = 0;

		memcpy(&nMacValue, pMac, 6);
		m_arrMACs.push_back(nMacValue);
	}
}

void CNodeGroupSettings::SetModificatory(bool bModificatory)
{
	m_bModificatory = bModificatory;
	if (m_pParent)
	{
		m_pParent->SetModificatory(bModificatory);
	}
}

//--------------------------------------------------------------------------------
/// <summary>
/// 准备释放当前的节点
/// </summary>
/// <created>Andy,2020/7/2</created>
/// <changed>Andy,2020/7/2</changed>
//--------------------------------------------------------------------------------
void CNodeGroupSettings::PreRelease()
{
	for (auto pEntry : m_lstChildren)
	{
		pEntry->PreRelease();
	}

	m_pParent = nullptr;
}

void CNodeGroupSettings::Serialize(CJSONSerializer& refJsonSerializer) const
{
	CSerializeEntry::Serialize(refJsonSerializer);

	refJsonSerializer.Serialize("m1", m_strName);
	refJsonSerializer.Serialize("m2", m_bEnableMaxNodes);
	refJsonSerializer.Serialize("m3", m_nMaxNodes);
	refJsonSerializer.Serialize("m4", m_Type);
	refJsonSerializer.Serialize("m5", m_strIPSegment);
	refJsonSerializer.Serialize("m6", m_lstChildren);
	refJsonSerializer.Serialize("m7", m_arrMACs);
}

void CNodeGroupSettings::DeSerialize(CJSONSerializer & refJsonSerializer)
{
	CSerializeEntry::DeSerialize(refJsonSerializer);

	refJsonSerializer.DeSerialize("m1", m_strName);
	refJsonSerializer.DeSerialize("m2", m_bEnableMaxNodes);
	refJsonSerializer.DeSerialize("m3", m_nMaxNodes);
	refJsonSerializer.DeSerialize("m4", m_Type);
	refJsonSerializer.DeSerialize("m5", m_strIPSegment);
	refJsonSerializer.DeSerialize("m6", m_lstChildren);
	refJsonSerializer.DeSerialize("m7", m_arrMACs);
}


//--------------------------------------------------------------------------------
/// <summary>
/// 提取MAC地址列表
/// </summary>
/// <param name="refSettings"></param>
/// <param name="refMACs"></param>
/// <returns></returns>
/// <created>Andy,2019/10/23</created>
/// <changed>Andy,2019/10/23</changed>
//--------------------------------------------------------------------------------
bool CNodeGroupSettings::ExtractMAC(const std::string & refSettings, string_list & refMACs)
{
	bool bResult = false;
	const unsigned int SETTINGS_LEN = refSettings.size();
	std::string strMACs;

	for (unsigned int i = 0; i < SETTINGS_LEN; i++)
	{
		const char chCur = refSettings[i];

		if (chCur == '\n')
		{
			refMACs.push_back(strMACs);
			strMACs.clear();
		}
		else if (i + 1 == SETTINGS_LEN)
		{
			strMACs += chCur;
			refMACs.push_back(strMACs);
		}
		else if (chCur != '\r')
		{
			strMACs += chCur;
		}
	}

	return bResult;
}

/*---------------------------------------------------------------------------------
| Name      : CNodeGroupSettings::FindChildIPGroup
| Desc      : 根据IP组名称查找
| Parameter : const char* pName――>
| Return    : CNodeGroupSettingsPtr
| Author    : Andy.h
| Date      : 星期三, 十一月 25 2009
---------------------------------------------------------------------------------*/
CNodeGroupSettingsPtr CNodeGroupSettings::FindChildIPGroup(const char* pName) 
{
	if (m_strName == pName)
	{
		return shared_from_this();
	}

	CNodeGroupSettingsPtr pReuslt = nullptr;

	for (auto pNodeGroupSettingsPtr : m_lstChildren)
	{
		if (pNodeGroupSettingsPtr->GetName() == pName)
		{
			pReuslt = pNodeGroupSettingsPtr;
			break;
		}
	}	

	return pReuslt;
}

//----------------------------------------------------------------
// CNodeGourpObject::FindChildIPGroup
/// @brief 查找制定类型的分组
/// 
/// @param nType 分组类型
/// @author andy
//---------------------------------------------------------------
CNodeGroupSettingsPtr CNodeGroupSettings::FindChildIPGroup(
	const unsigned int nType) 
{
	if (m_Type == nType)
	{
		return shared_from_this();
	}

	CNodeGroupSettingsPtr pReuslt = nullptr;

	for (auto pNodeGroupSettingsPtr : m_lstChildren)
	{
		if (pNodeGroupSettingsPtr->GetType() == nType)
		{
			pReuslt = pNodeGroupSettingsPtr;
			break;
		}
	}

	return pReuslt;
}

/*---------------------------------------------------------------------------------
| Name      : CNodeGroupSettings::CreateChildGroup
| Desc      : 增加子IP组
| Parameter : const char* pName――>
|             bool nEnableMaxNodes――>
|             unsigned int nMaxNodes――>
| Return    : CNodeGroupSettingsPtr
| Author    : Andy.h
| Date      : 星期三, 十一月 25 2009
---------------------------------------------------------------------------------*/
CNodeGroupSettingsPtr CNodeGroupSettings::CreateChildGroup(
	const char* pName
	, const unsigned int nType
	, const bool nEnableMaxNodes
	, const unsigned int nMaxNodes)
{
	CNodeGroupSettingsPtr pNewIPGroupSettings = nullptr;

	if (FindChildIPGroup(pName) == nullptr)
	{
		pNewIPGroupSettings = std::make_shared<CNodeGroupSettings>(pName, nEnableMaxNodes, nMaxNodes);

		if (pNewIPGroupSettings)
		{
			pNewIPGroupSettings->SetType(nType);
			pNewIPGroupSettings->SetParent(shared_from_this());
			m_lstChildren.push_back(pNewIPGroupSettings);

			m_bModificatory = true;
		}
	}

	return pNewIPGroupSettings;
}

bool CNodeGroupSettings::Remove(const CNodeGroupSettingsPtr pNodeGroupSettings)
{
	bool bResult = false;
	auto itr = m_lstChildren.begin();

	for (; m_lstChildren.end() != itr; itr++)
	{
		if (pNodeGroupSettings == (*itr))
		{
			m_lstChildren.erase(itr);
			bResult = true;
			break;
		}
	}	

	return bResult;
}
void CNodeGroupSettings::DefaultSettings()
{
	SetMaxNodes(1000);
	SetEnableMaxNodes(false);

	//switch (m_Type)
	//{
	//case NTIDE::SSIDE_IGT_MAC:
	//	SetName((IDS_IGT_MAC));
	//	break;

	//case NTIDE::SSIDE_IGT_MAC_LOCAL:
	//	SetName((IDS_IGT_MAC_LOCAL));
	//	break;

	//case NTIDE::SSIDE_IGT_MAC_BROADCAST:
	//	SetName((IDS_IGT_MAC_BROADCAST));
	//	break;

	//case NTIDE::SSIDE_IGT_IP_LOCAL:
	//	SetName((IDS_INTRANET_GROUP));
	//	break;

	//case NTIDE::SSIDE_IGT_IP_BROADCAST:
	//{
	//	SetName((IDS_BROADCAST_GROUP));
	//	m_strIPSegment = ("255.255.255.255-255.255.255.255");
	//}
	//break;

	//case NTIDE::SSIDE_IGT_IP_MULTICASTING:
	//{
	//	SetName((IDS_MULTICASTING_GROUP));
	//	m_strIPSegment = ("224.0.0.0-239.255.255.255");
	//}
	//break;

	//case NTIDE::SSIDE_IGT_IP_INTERNET:
	//	SetName((IDS_INTERNET_GROUP));
	//	break;
	//}
}

