/////////////////////////////////////////////////////////////////////
/// @file CSyslog.h
/// @brief Syslog 日志类定义
/// 
///
/// @author andy
/// @version 1.0
/// @date 2020.3.10
/////////////////////////////////////////////////////////////////////

#pragma once
#include <MiscellaneousFunctions.h>
#include "TreeManagerBase.h"
#include "Ax3LogProtocol.h"
#include <memory>
#include <time.h>

extern const char  CSYSLOG_ID[];
class CKeyValueList;

class CSyslogBase : public CSerializeEntry
{
public:
	CSyslogBase();	
	virtual ~CSyslogBase() {}

	/// <summary>日至严重等级</summary>
	enum LOG_TYPE
	{
		LT_UNKNOWN = 0,     ///< 未知
		LT_OS = 1,          ///< 操作系统日志
		LT_OPERATOR = 2,    ///< 操作日志
		LT_APP = 3,         ///< 应用程序日志
		LT_DEVICE = 4,      ///< 网络基础设施日志
		LT_NET_ANALYSIS = 5,///< 网络网络分析日志
		LT_SIEM = 6,        ///< 安全主机日志
		LT_AC   = 7,        ///< 访问控制
	};

	// 操作系统类型
	enum OS_TYPE
	{
		OT_UNKNOWN = 0,  ///< 未知
		OT_WINDOWS = 1,  ///< Windows主机
		OT_LINUX = 2,    ///< Linux / Unix主机
	};

	/// <summary>主机类型</summary>
	enum DEVICE_TYPE
	{		
		HT_UNKNOWN = 0,  ///< 未知
		HT_CISCO = 1,    ///< 思科设备
		HT_SYSLOG_DEVICE = 2,    ///< Syslog设备
		HT_ISERIES = 3,    ///< IBM AS / 400 (iSeries)
		HT_IDS = 4,        ///< 入侵检测系统
		HT_FIREWALL = 5,   ///< 防火墙
		HT_SWITCH = 6,     ///< 交换机
		HT_ROUTER = 7,     ///< 路由器
	};

	/// <summary>应用类型</summary>
	enum APPLICATION_TYPE
	{
		AT_UNKNOWN = 0,  ///< 未知
		AT_MS_IIS_W3C_WEB = 1,  ///< MS IIS W3C WEB服务器
		AT_MS_IIS_W3C_FTP = 2,  ///< MS IIS W3C FTP服务器
		AT_APACHE_WEB = 3,  ///< APACHE WEB服务器
		AT_DHCP_WINDOWS = 4,  ///< DHCP WINDOWS服务器
		AT_PRINT_SERVER = 5,  ///< 打印服务器
		AT_MS_SQL_SERVER = 6,  ///< MS SQL数据库服务器
		AT_ORACLE_SERVER = 7,  ///< ORACLE数据库服务器
	};


	/// <summary>日至严重等级</summary>
	enum SEVERITY_LEVEL
	{
		SL_EMERGENCY = 0,    ///< Emergency
		SL_ALERT = 1,     ///< Alert
		SL_CRITICAL = 2,   ///< Critical
		SL_ERROR = 3,    ///< Error
		SL_WARNING = 4,   ///< Warning
		SL_NOTICE = 5,   ///< Notice
		SL_INFORMATIONAL = 6,    ///< Informational
		SL_DEBUG = 7,     ///< Debug
	};

public:
	virtual void Serialize(CJSONSerializer& refJsonSerializer) const override;

	virtual void DeSerialize(CJSONSerializer& refJsonSerializer) override;

private:
	DECLARE_MEMBER_AND_METHOD_V11(unsigned int, m_nLegitimacy, Legitimacy, Ax3LP::CLogDiscerningReponseMode::LT_UNKNOWN); /// 合法性,@see TYPE
	DECLARE_MEMBER_AND_METHOD_V11(unsigned int, m_nType, Type, LT_UNKNOWN); /// 类型,@see TYPE
	DECLARE_MEMBER_AND_METHOD_V11(unsigned int, m_nOS, OS, OT_UNKNOWN); /// 主机类型,@see OS_TYPE
	DECLARE_MEMBER_AND_METHOD_V11(unsigned int, m_nAppType, AppType, AT_UNKNOWN);   /// 应用类型,@see APPLICATION_TYPE
	DECLARE_MEMBER_AND_METHOD_V11(unsigned int, m_nSeverity, Severity, 0); /// 严重等级 
	DECLARE_MEMBER_AND_METHOD_V11(I64, m_nCaptureTime, CaptureTime, 0); /// 采集时间
};

using CSyslogBasePtr = std::shared_ptr<CSyslogBase>;



class CSyslog : public CSyslogBase
{
public:
	CSyslog();
	virtual ~CSyslog();
	
	/// <summary>设备类型枚举</summary>
	enum FACILITY_TYPE
	{
		FT_KERNEL_MESSAGES = 0,               ///< kernel messages
		FT_USER_LEVEL_MESSAGES = 1,           ///< user - level messages
		FT_MAIL_SYSTEM = 2,                   ///< mail system
		FT_SYSTEM_DAEMONS = 3,                ///< system daemons
		FT_SECURITY_AUTHORIZATION_MESSAGES = 4,           ///< security / authorization messages
		FT_INTERNALLY_MESSAGES = 5,          ///< messages generated internally by syslogd
		FT_LINE_PRINTER_SUBSYSTEM = 6,        ///<  line printer subsystem
		FT_NETWORK_NEWS_SUBSYSTEM = 7,        ///< network news subsystem
		FT_UUCP_SUBSYSTEM = 8,                ///< UUCP subsystem
		FT_CLOCK_DAEMON = 9,                  ///< clock daemon
		FT_FTP_daemon = 11,                   ///< FTP daemon
		FT_NTP_SUBSYSTEM = 12,                ///< NTP subsystem
		FT_LOG_AUDIT = 13,                    ///< log audit
		FT_LOG_ALERT = 14,                    ///< log alert
	};
	
	ENABLE_SERIALIZE(CSyslog)
	//USE_CLASS_MEMORY_POOL(CSyslog, 64, 64, CSYSLOG_ID)
public:
	virtual void Serialize(CJSONSerializer& refJsonSerializer) const override;

	virtual void DeSerialize(CJSONSerializer& refJsonSerializer) override;
	
public:
	// 得到字段定义映射信息
	static void GetMapDef(CKeyValueList* pFields);

private:	
	
	DECLARE_MEMBER_AND_METHOD_V11(unsigned int, m_nFacility, Facility, 0); /// 设备
	DECLARE_MEMBER_AND_METHOD(std::string, m_strDateTime, DateTime);      /// 时间
	DECLARE_MEMBER_AND_METHOD(std::string, m_strHost, Host);      /// 主机 
	DECLARE_MEMBER_AND_METHOD(std::string, m_strProcess, Process);    ///< 进程名称
	DECLARE_MEMBER_AND_METHOD(std::string, m_strPID, PID);     ///< 进程ID
	DECLARE_MEMBER_AND_METHOD(std::string, m_strContent, Content);    ///< 消息内容
	DECLARE_MEMBER_AND_METHOD(std::string, m_strVersion, Version);    ///< 消息版本
	DECLARE_MEMBER_AND_METHOD(std::string, m_strMsgID, MsgID);     ///< 消息ID
};

using CSyslogPtr = std::shared_ptr<CSyslog>;