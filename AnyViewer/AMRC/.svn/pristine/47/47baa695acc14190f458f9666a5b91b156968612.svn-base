/******************************************************************************
* 
* IDEDetectionModule
* Version
* Copyright (C) 2007 AxSoft Co., Ltd.
* All Rights Reserved
* $Header: /cvsdata/vc/Common/Ax3MultiPatternMatcher.h,v 1.2 2013/06/23 09:10:25 administrator Exp $
* 
*******************************************************************************
* 
* Description:
* 2008-11-4 Andy.h 取消了成员变量m_pNumArray1,因为它只有的尺寸是256，因此当模式
* 的数量超过256后就可能引起写过界。
******************************************************************************/
#pragma once
#include "MiscellaneousFunctions.h"
#include <vector>
#include <functional>
#include <mutex>

#define HASHTABLESIZE      (64*1024)
#define HASHBYTES16        2
#define BWSHIFTABLESIZE    (64*1024)

#define ENABLE_CASE_NO_INSENSITIVE  //如果定义了，表示对于Wu-Manber算法支持大小写不敏感


class CSearchContext;
using ON_MATCH_CALLBACK = std::function<int(const CSearchContext* objSearchContext)>;

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// <summary>
/// 查询上下文
/// </summary>
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
class CSearchContext
{
public:
	CSearchContext(
		const unsigned char* pByteStream
		, int nStreamLen
		, ON_MATCH_CALLBACK refOnMatchCallBack
		, const void* pCookie = nullptr)
		: m_pByteStream(pByteStream)
		, m_nStreamLen(nStreamLen)
		, m_objOnMatchCallBack(refOnMatchCallBack)
		, m_nStartPos(0)
		, m_nLength(0)
		, m_nID(0)
		, m_pCookie(pCookie)
	{
	}
	virtual ~CSearchContext() {}
	
public:
	const unsigned char*              m_pByteStream;            //Data stream detected
	int                         m_nStreamLen;              //Length of data stream detected
	ON_MATCH_CALLBACK           m_objOnMatchCallBack;        //回调函数指针
	int                         m_nStartPos;               //成功匹配的开始位置
	int                         m_nLength;                 //匹配长度
	unsigned int                m_nID;
	const void*                 m_pCookie;
};



/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// <summary>
/// KMP匹配算法
/// </summary>
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
class CKMPMatch
{
public:
	CKMPMatch(void);
	~CKMPMatch(void);

public:
	// 设置查找模式
	bool SetPatternData(const unsigned char* const pPatternData, const int nPatternLen, const bool bCaseSensitivity);

	int KMPFindPat(const unsigned char* const pByteStream,const int nStreamLen) const;	

private:
	void Next();

private:
	DECLARE_MEMBER_AND_METHOD_V11(bool,m_bCaseSensitivity,CaseSensitivity,true);	
	DECLARE_MEMBER_AND_GET_METHOD_V11(unsigned char*,m_pPatternData, PatternData,nullptr);     // pattern array, no case
	DECLARE_MEMBER_AND_GET_METHOD_V11(int,m_nPatternLen, PatternLen,0);      // length of pattern in bytes
	unsigned short          *m_pNextValue;       // 模式值数组
};

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// <summary>
/// 
/// </summary>
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
class CKMPMatchWithWildcard
{
public:
	CKMPMatchWithWildcard(void);
	~CKMPMatchWithWildcard(void);

public:
	void SetPatternData(const unsigned char* const pPatternData, const int nPatternLen, const bool bCaseSensitivity);

	int GetMaxChildPatternData(unsigned char* pRetData);

public:
	int Search(const unsigned char* const pByteStream, const unsigned int nStreamLen, int* pRetStartPos, int* pRetLen) const;

private:
	void Clear();

private:
	std::vector<CKMPMatch*>      m_objKMPMatchArray;
};


/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// <summary>
/// This struct is used internally my mwm.c
/// </summary>
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
class CMatchingPattern
{
public:
	CMatchingPattern(void);
	~CMatchingPattern(void);
public:
	unsigned char GetFirstByteOfPatternData()        { return m_pPatternData[0];}

public:
    bool SetPatternData(const unsigned char* const pPatternData,const unsigned int nPatternLen,const bool bCaseSensitivity,const bool bHasWildcard = false);
	
	bool ConstructShiftTable();   
	
	void ConvertPatterToLower();

public:
	const unsigned char* SundayMatch(const unsigned char* pByteStream, const unsigned int nStreamLen) const;

private:
	DECLARE_MEMBER_AND_METHOD_V11(unsigned int,m_nID,ID,0);
	DECLARE_MEMBER_AND_METHOD_V11(CKMPMatchWithWildcard*,m_pKMPMatchWithWildcard,KMPMatchWithWildcard,nullptr);
	DECLARE_MEMBER_AND_GET_METHOD_V11(unsigned char*, m_pPatternData, PatternData, nullptr);     // pattern array, no case
	DECLARE_MEMBER_AND_GET_METHOD_V11(unsigned int, m_nPatternLen, PatternLen, 0);      // length of pattern in bytes
	DECLARE_MEMBER_AND_METHOD_V11(bool,m_bCaseSensitivity, CaseSensitivity,true); // Pattern match is case insensitive if true
	unsigned short*                       m_pShiftTable = nullptr;      // for sunday search arithmetic
	DECLARE_MEMBER_AND_METHOD_V11(void*,m_pCookie, Cookie,nullptr);
};



class CAx3MultiPatternMatcher
{
public:
	CAx3MultiPatternMatcher(void);
	~CAx3MultiPatternMatcher(void);
	
	enum MATCHING_METHOD
	{
		MTH_INVALIDATION = 0,
		MTH_WU_MANBER,               //Modified Wu Manber method
		MTH_SUNDAY                   //Sunday method
	};

	enum MATCHING_FUNCTION
	{
		MF_SEARCHEXNOBC,               
		MF_SEARCHEXBC,               
		MF_SEARCHEXBW                
	};

public:                       //辅助函数，用于调试

#ifdef _DEBUG
	void ShowBytes(unsigned char *pBytes,int nLen);
	void ShowGroupDetails();
#endif

	// 启用匹配器
	void Enable(bool bEnable);

public:
	
	void Clear();

    bool AllocateParrernsArray(const unsigned int nPatterns);
	
	int AppendPattern(const unsigned char* const pPatternData,const int nPatternLen, const bool bCaseSensitivity,const unsigned int nID,const void *pCookie = nullptr,const bool bHasWildcard = false);
	
	int AppendStringPattern(const unsigned char* const pPatternData,const bool bCaseSensitivity,const unsigned int nID,const void *pCookie = nullptr,const bool bHasWildcard = false);

	void PrepHashedPatternGroups();
	
	void PrepBadCharTable();
	
	void PrepBadWordTable();

	int PrepPatterns();

public:
	int SearchExNoBC(CSearchContext& objSearchContext) const;
	
	int SearchExBC(CSearchContext& objSearchContext)  const;
	
	int SearchExBW(CSearchContext& objSearchContext) const;
	
	int Search(CSearchContext& objSearchContext) const;
	
	bool Search2(CSearchContext& objSearchContext,CMatchingPattern* pMatchingPattern,const int nCurStartPos) const;

private:
	bool AllocateMemForWuManberMethod();
	
	void FreeMemForWuManberMethod();
	
	bool FindWildcard(const unsigned char* const pPatternData,const int nPatternLen);

private:
	MATCHING_METHOD             m_nMatchingMethod;       /* MTH_SUNDAY, MTH_WU_MANBER */
	unsigned int                m_nPatternsArraySize;    // size of patterns array
	CMatchingPattern*           m_pPatternsArray;
	unsigned short*             m_pGroupCountsArray;     /* Array of Group Counts, # of patterns in each hash group */
	unsigned int                m_nNumPatterns;          /* Number of Patterns loaded */
	unsigned short*             m_pHashTable;            // 2+ character Pattern Big Hash Table
	unsigned short*             m_pHashTable1;           // One character Pattern Hash Table
	unsigned short*             m_pShiftTable;           /* Bad Character Shift Table */
	unsigned int                m_nShiftLen;
	unsigned char*              m_pLargeShiftTable;      /* Bad Word Shift Table */
	DECLARE_MEMBER_AND_METHOD_V11(bool,m_bLargeShiftTableSize, LargeShiftTableSize,0);
	MATCHING_FUNCTION           m_nMatchingFunction;     /* search function */	

	
	DECLARE_MEMBER_AND_GET_METHOD_V11(bool, m_bEnable, Enable,true);           ///< 采集线程是否已经被终止	
	mutable std::recursive_mutex          m_objMutex;
};



