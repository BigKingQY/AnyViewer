/////////////////////////////////////////////////////////////////////
/// @file UdpServerBase.h
/// @brief UDP服务器基类申明
/// 
///
/// @author andy
/// @version 1.0
/// @date 2020.3.9
/////////////////////////////////////////////////////////////////////

#pragma once
#include <boost/asio.hpp>
#include <MiscellaneousFunctions.h>
#include <Typedef.h>
#include <thread>
#include <memory>
#include <BufferImpl.h>
#include <atomic>

using boost::asio::ip::udp;
using CUDPDataStream = CBufferImplT<BYTE>;
using CUDPSocketPtr = std::shared_ptr<udp::socket>;
using CUDPEndpointPtr = std::shared_ptr<udp::endpoint>;

class CUDPServerBase
{
public:
    CUDPServerBase(U16 nPort = 0);
    ~CUDPServerBase();

public:
    //< 
	bool Start();

    bool Stop();
    
protected:
	virtual void OnReceived(const CUDPDataStream& refDataStream, udp::endpoint& refEndpoint);
	
	void Send(CUDPDataStream& refDataStream, udp::endpoint& refEndpoint);

private:	
	/// 接收数据包线程
	void ReceivingThread();
	
private:
	boost::asio::io_service  m_ioService;
	CUDPSocketPtr            m_objSocket;
    CUDPDataStream           m_objBuffer;
    DECLARE_MEMBER_AND_METHOD_V11(U16, m_nPort, Port, 0);
    std::shared_ptr<std::thread> m_ptrThread{ nullptr };
	std::atomic_bool        m_bOver{ false };     ///< 终止标志
};

