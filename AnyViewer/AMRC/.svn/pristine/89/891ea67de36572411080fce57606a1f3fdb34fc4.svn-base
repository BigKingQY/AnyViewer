///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// @file  
/// @brief Undo/Redo框架源码
/// 
///
/// @author 黄丽云
/// @version 1.0
/// @date        2018-10-19
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#pragma once
#include "public.h"
#include "SDPFactory.h"
#include <stack>
#include <vector>
#include <functional>

class CBaseCommand;

#define CREATE_UNDO_COMMAND(Command) CBaseCommand::CreateCommand(N2S(Command))
typedef std::vector<CBaseCommand*> UNDO_COMMAND_ARRAY;



//*******************************************************************
//  命令基类
///
/// 
//*******************************************************************
class CBaseCommand
{
public:
	CBaseCommand(bool bReversible = true,unsigned int nType = 0);
	virtual ~CBaseCommand(){}

public:
	void SetReversible(bool bReversible) { m_bReversible = bReversible;	}
	bool GetReversible() { return m_bReversible; }
	void SetType(unsigned int nType) { m_nType = nType; }
	unsigned int GetType() { return m_nType; }

public:
	virtual bool Execute() = 0;
	virtual bool Unexecute() = 0;

//public:
//	static CBaseCommand * CreateCommand(const std::string& strCommand)
//	{
//		return CSingleton<CFactory<CBaseCommand, const std::string> >::Instance()->CreateObject(strCommand);
//	}

private:
	bool                        m_bReversible;         ///< 是否可以撤消
	unsigned int                m_nType;               ///< 命令类型
};

using UNDO_CMD_FUN = std::function<void()>;

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// <summary>
/// undo命令类
/// </summary>
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
class CUndoCommand :public CBaseCommand
{
public:
	CUndoCommand(bool bReversible = true, unsigned int nType = 0)
		:CBaseCommand(bReversible, nType)
	{
	}
	virtual ~CUndoCommand() {}

public:
	void SetUndoFn(const UNDO_CMD_FUN& refFun) { m_fnUndo = refFun; }

	void SetRedoFn(const UNDO_CMD_FUN& refFun) { m_fnRedo = refFun; }

public:
	virtual bool Execute() override { m_fnRedo(); return true; }

	virtual bool Unexecute() override { m_fnUndo(); return true;}

public:
	UNDO_CMD_FUN             m_fnUndo = nullptr;
	UNDO_CMD_FUN             m_fnRedo = nullptr;
};

//*******************************************************************
//  宏命令基类
///
/// 
//*******************************************************************
class CMacroCommand : public CBaseCommand
{
public:
	CMacroCommand();
	~CMacroCommand();

public:
	UNDO_COMMAND_ARRAY& GetCommands() { return m_vecCommands; }
	void SetData(void* pData) { m_pData = pData; }
	void* GetData() { return m_pData; }
public:
	virtual bool Execute();
	virtual bool Unexecute();

public:
	// 创建一个undo命令
	void CreateCommand(const UNDO_CMD_FUN& refUndoFun, const UNDO_CMD_FUN& refRedoFun, unsigned int nType = 0);


	void AddCommand(CBaseCommand * pCommand);

	void DeleteCommand(CBaseCommand * pCommand);
	
	CBaseCommand* Lookup(unsigned int nType);

private:
	CMacroCommand(const CMacroCommand& rhs);
	CMacroCommand& operator=(const CMacroCommand& rhs);

private:
	UNDO_COMMAND_ARRAY m_vecCommands;
	void*              m_pData;
};


//*******************************************************************
//  命令管理器基类
///
/// 
//*******************************************************************
class CBaseCommandManager
{
public:
	CBaseCommandManager() {}
	virtual ~CBaseCommandManager() {}

public:
	virtual bool CallCommand(CBaseCommand * pCommand) = 0;
	virtual void ClearCommands() = 0;
	virtual CBaseCommand * Undo() = 0;
	virtual CBaseCommand * Redo() = 0;
	virtual bool CanUndo() const = 0;
	virtual bool CanRedo() const = 0;

private:
	UNDO_COMMAND_ARRAY m_vecCommands;
};


//*******************************************************************
//  命令管理器类
///
/// 
//*******************************************************************

class CUndoCommandManager : public CBaseCommandManager
{
public:
	CUndoCommandManager();
	~CUndoCommandManager();

public:
	bool CallCommand(CBaseCommand * pCommand);
	void ClearCommands();
	CBaseCommand * Undo();
	CBaseCommand * Redo();
	bool CanUndo() const;
	bool CanRedo() const;

public:
	void PushUndoCommand(CBaseCommand * pCommand);
	CBaseCommand * PopUndoCommand();

private:
	void PushRedoCommand(CBaseCommand * pCommand);
	CBaseCommand * PopRedoCommand();
	void DeleteUndoCommands();
	void DeleteRedoCommands();

private:
	CUndoCommandManager(const CUndoCommandManager& rhs);
	CUndoCommandManager& operator=(const CUndoCommandManager& rhs);

private:
	std::stack<CBaseCommand *> m_stackUndo;   ///< undo队列
	std::stack<CBaseCommand *> m_stackRedo;   ///< redo队列
};





inline CBaseCommand * CreateUndoCommand(const std::string& strId)
{
	return (CBaseCommand*)CSingleton<CFactory<std::string> >::Instance()->CreateObject(strId);
}