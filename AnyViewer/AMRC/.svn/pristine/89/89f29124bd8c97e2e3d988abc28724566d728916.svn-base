/******************************************************************************
* 
* SaxListCtrl
* Version
* Copyright (C) 2007 Ax3soft Co., Ltd.
* All Rights Reserved
* $Header: /cvsdata/vc/Common/GeneralFunctions.h,v 1.17 2014/12/13 01:42:27 administrator Exp $
* 
*******************************************************************************
* 
* Description:General functions define,Dependent MFC library
******************************************************************************/
#include "stdafx.h"
#include "StrIPRange.h"

//--------------------------------------------------------------------------------
/// <summary>
/// 校验范围是否有效
/// </summary>
/// <returns></returns>
/// <created>Andy,2019/10/16</created>
/// <changed>Andy,2019/10/16</changed>
//--------------------------------------------------------------------------------
bool CStrIPRange::Valid()
{
	bool bResult = true;

	if (GetType() == IR_RANGE || GetType() == IR_MASK_CODE)
	{
		bResult = ValidIP(m_strIP1.c_str());

		if (bResult)
		{
			if (GetType() == IR_RANGE)
			{
				bResult = ValidIP(m_strIPMask.c_str());
			}
			else
			{
				bResult = (8 == atoi(m_strIPMask.c_str()) || 16 == atoi(m_strIPMask.c_str()) || 24 == atoi(m_strIPMask.c_str()));
			}
		}

		if (bResult)
		{
			bResult = (GetIP1() <= GetIP2());
		}
	}

	return bResult;
}

//--------------------------------------------------------------------------------
/// <summary>
/// 
/// </summary>
/// <created>Andy,2019/11/28</created>
/// <changed>Andy,2019/11/28</changed>
//--------------------------------------------------------------------------------
void CStrIPRange::Init()
{
	m_nIP1 = IDE_IPv4_to_i(m_strIP1);

	if (GetType() == IR_RANGE)
	{
		m_nIP2 = IDE_IPv4_to_i(GetIPMask());
	}
	else
	{
		m_nIP2 = IDE_IPv4_to_i(m_strIP1);

		switch (atoi(GetIPMask().c_str()))
		{
		case 16:
			m_nIP2 = (m_nIP2 & 0xffff0000) + 0xffff;
			break;

		case 8:
			m_nIP2 = (m_nIP2 & 0xff000000) + 0xffffff;
			break;

		case 24:
		case 0:
		default:
			m_nIP2 = (m_nIP2 & 0xffffff00) + 0xff;
		}
	}
}

//--------------------------------------------------------------------------------
/// <summary>
/// 提取ip范围设置信息
/// </summary>
/// <param name="refSettings">IP范围设置信息</param>
/// <param name="refIPRange">接收IP范围设置</param>
/// <returns></returns>
/// <created>Andy,2019/10/16</created>
/// <changed>Andy,2019/10/16</changed>
//--------------------------------------------------------------------------------
bool ExtractIPRange(const std::string & refSettings
	, STR_IP_RANGE_ARRAY & refIPRange)
{
	enum ANALYSIS_STATUS
	{
		AS_IP1 = 1,        ///< IP1
		AS_IP2 = 2,        ///< IP2
		AS_MASK_CODE = 3,  ///< 掩码
		AS_DOMAIN = 4,     ///< 域名
	};

	bool bResult = false;
	const unsigned int SETTINGS_LEN = refSettings.size();
	std::string strIP1;
	std::string strIP2;
	std::string strMaskCode;
	std::string strDomain;
	ANALYSIS_STATUS nStatus = AS_IP1;

	for (unsigned int i = 0; i < SETTINGS_LEN; i++)
	{
		const char chCur = refSettings[i];

		switch (nStatus)
		{
		case AS_IP1:
		{
			switch (chCur)
			{
			case '-':
			{
				nStatus = AS_IP2;
				strIP2.clear();
			}
			break;

			case '/':
			{
				nStatus = AS_MASK_CODE;
				strMaskCode.clear();
			}
			break;

			default:
				if (('0' <= chCur && chCur <= '9') || '.' == chCur)
				{
					strIP1 += chCur;
				}
				else
				{
					nStatus = AS_DOMAIN;
					strDomain = chCur;
				}
			}

			if (chCur == '\r' || i + 1 == SETTINGS_LEN)
			{
				CStrIPRange objStrIPRange(CStrIPRange::IR_RANGE, strIP1.c_str(), strIP1.c_str());

				objStrIPRange.Init();
				refIPRange.push_back(objStrIPRange);
				strIP1.clear();
			}
		}
		break;

		case AS_IP2:
		{
			if (('0' <= chCur && chCur <= '9') || '.' == chCur)
			{
				strIP2 += chCur;
			}

			if (chCur == '\r' || i + 1 == SETTINGS_LEN)
			{
				CStrIPRange objStrIPRange(CStrIPRange::IR_RANGE, strIP1.c_str(), strIP2.c_str());

				objStrIPRange.Init();
				refIPRange.push_back(objStrIPRange);

				nStatus = AS_IP1;
				strIP1.clear();
				strIP2.clear();
			}
		}
		break;

		case AS_MASK_CODE:
		{
			if ('0' <= chCur && chCur <= '9')
			{
				strMaskCode += chCur;
			}

			if (chCur == '\r' || i + 1 == SETTINGS_LEN)
			{
				CStrIPRange objStrIPRange(CStrIPRange::IR_MASK_CODE, strIP1.c_str(), strMaskCode.c_str());

				objStrIPRange.Init();
				refIPRange.push_back(objStrIPRange);

				nStatus = AS_IP1;
				strIP1.clear();
				strMaskCode.clear();
			}
		}
		break;

		case AS_DOMAIN:
		{
			if (chCur == '\r' || i + 1 == SETTINGS_LEN)
			{
				if (i + 1 == SETTINGS_LEN)
				{
					strDomain += chCur;
				}

				CStrIPRange objStrIPRange(CStrIPRange::IR_DOMAIN, "", "");

				objStrIPRange.SetDomain(strDomain.c_str());
				refIPRange.push_back(objStrIPRange);

				nStatus = AS_IP1;
				strDomain.clear();
			}
			else
			{
				strDomain += chCur;
			}
		}
		break;

		}
	}


	return bResult;
}