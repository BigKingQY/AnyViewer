///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// @file  
/// @brief Undo/Redo框架源码
/// 
///
/// @author 黄丽云
/// @version 1.0
/// @date        2018-10-19
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#include "stdafx.h"
#include "SDPUndo.h"
#include "SDPUtil.h"

#ifdef _DEBUG
#define new DEBUG_NEW
#undef THIS_FILE
static char THIS_FILE[] = __FILE__;
#endif

REGISTER_CLASS(CMacroCommand)
/*------------------------CBaseCommand-------------------------*/
CBaseCommand::CBaseCommand(bool bReversible,unsigned int nType)
	: m_bReversible(bReversible)
	, m_nType(nType)
{
}

/*------------------------CMacroCommand-------------------------*/
CMacroCommand::CMacroCommand()
	: m_pData(nullptr)
{
}

CMacroCommand::~CMacroCommand()
{
	ClearContainer<std::vector<CBaseCommand *> >(m_vecCommands);
}

bool CMacroCommand::Execute()
{
	auto itr = m_vecCommands.begin();

	while(m_vecCommands.end() != itr)
	{
		CBaseCommand * pCommand = (*itr);

		if (!pCommand->Execute())
		{
			delete (*itr);
			itr = m_vecCommands.erase(itr);
		}
		else
		{
			itr++;
		}
	}

	return (m_vecCommands.size() > 0);
}

bool CMacroCommand::Unexecute()
{
	auto itr = m_vecCommands.begin();

	while (m_vecCommands.end() != itr)
	{
		CBaseCommand * pCommand = (*itr);

		if (!pCommand->Unexecute())
		{
			delete (*itr);
			itr = m_vecCommands.erase(itr);
		}
		else
		{
			itr++;
		}
	}

	return (m_vecCommands.size() > 0);
}

//--------------------------------------------------------------------------------
/// <summary>
/// 创建一个undo命令
/// </summary>
/// <param name="refUndoFun">指向undo函数的指针</param>
/// <param name="refRedoFun">指向redo函数的指针</param>
/// <param name="nType">类型</param>
/// <created>Andy,2019/8/20</created>
/// <changed>Andy,2019/8/20</changed>
//--------------------------------------------------------------------------------
void CMacroCommand::CreateCommand(
	const UNDO_CMD_FUN & refUndoFun
	, const UNDO_CMD_FUN & refRedoFun
	, unsigned int nType)
{
	CUndoCommand* pCmd = new  CUndoCommand(nullptr != refRedoFun, nType);

	if (nullptr != pCmd)
	{
		pCmd->SetUndoFn(refUndoFun);
		pCmd->SetRedoFn(refRedoFun);

		m_vecCommands.push_back(pCmd);
	}
}

void CMacroCommand::AddCommand(CBaseCommand * pCommand)
{
	if (pCommand)
	{
		assert(dynamic_cast<CMacroCommand*>(pCommand) == nullptr);

		m_vecCommands.push_back(pCommand);
	}
}

void CMacroCommand::DeleteCommand(CBaseCommand * pCommand)
{
	if (pCommand)
	{
		DeleteItem(m_vecCommands, pCommand);
	}
}

CBaseCommand * CMacroCommand::Lookup(unsigned int nType)
{
	CBaseCommand * pResult = nullptr;
	auto itr = m_vecCommands.begin();

	while (m_vecCommands.end() != itr)
	{
		if ((*itr)->GetType() == nType)
		{
			pResult = (*itr);
			break;
		}
	}

	return pResult;
}

void CUndoCommandManager::PushUndoCommand(CBaseCommand * pCommand)
{
	if (pCommand)
	{
		m_stackUndo.push(pCommand);
	}
}

/*------------------------CUndoCommandManager-------------------------*/

CUndoCommandManager::CUndoCommandManager()
{
}

CUndoCommandManager::~CUndoCommandManager()
{
	ClearCommands();
}

//----------------------------------------------------------------
// @routine CallCommand
/// @brief 执行制定的命令
/// 
/// @param 【_in】pCommand 一个指向命令对象的指针
/// @return true->成功,否则失败
/// @author 黄丽云
//---------------------------------------------------------------
bool CUndoCommandManager::CallCommand(CBaseCommand * pCommand)
{
	bool bResult = false;

	if (pCommand)
	{
		if (pCommand->Execute())
		{
			PushUndoCommand(pCommand);
			DeleteRedoCommands();
			bResult = true;
		}
		else
		{
			delete pCommand;
		}
	}

	return bResult;
}

//----------------------------------------------------------------
// @routine ClearCommands
/// @brief 清除所有的命令
/// 
/// @author 黄丽云
//---------------------------------------------------------------
void CUndoCommandManager::ClearCommands()
{
	DeleteUndoCommands();
	DeleteRedoCommands();
}

//----------------------------------------------------------------
// @routine Undo
/// @brief 执行undo操作
/// 
/// 从Undo队列中取出一个命令执行后，然后放入redo队列
/// @return 成功返回一个指向命令对象的指针，否则为nullptr
/// @author 黄丽云
//---------------------------------------------------------------
CBaseCommand * CUndoCommandManager::Undo()
{
	CBaseCommand * pCommand = PopUndoCommand();

	if (pCommand)
	{
		if (pCommand->Unexecute())
		{
			PushRedoCommand(pCommand);
		}
		else
		{
			delete pCommand;
			pCommand = nullptr;
		}
	}

	return pCommand;
}

//----------------------------------------------------------------
// @routine Redo
/// @brief 执行Redo操作
/// 
/// 从Redo队列中取出一个命令执行后，然后放入undo队列
/// @return 成功返回一个指向命令对象的指针，否则为nullptr
/// @author 黄丽云
//---------------------------------------------------------------
CBaseCommand * CUndoCommandManager::Redo()
{
	CBaseCommand * pCommand = PopRedoCommand();

	if (pCommand)
	{
		if (pCommand->Execute())
		{
			PushUndoCommand(pCommand);
		}
		else
		{
			delete pCommand;
			pCommand = nullptr;
		}
	}

	return pCommand;
}

bool CUndoCommandManager::CanUndo() const
{
	return !m_stackUndo.empty();
}

bool CUndoCommandManager::CanRedo() const
{
	return !m_stackRedo.empty();
}



//----------------------------------------------------------------
// @routine PopUndoCommand
/// @brief 从Undo栈中取出一个命令
/// 
/// @return 成功返回一个指向命令对象的指针，否则nullptr
/// @author 黄丽云
//---------------------------------------------------------------
CBaseCommand * CUndoCommandManager::PopUndoCommand()
{
	CBaseCommand * pCommand = nullptr;

	if (!m_stackUndo.empty())
	{
		pCommand = m_stackUndo.top();
		m_stackUndo.pop();
	}
	return pCommand;
}

void CUndoCommandManager::PushRedoCommand(CBaseCommand * pCommand)
{
	if (pCommand)
	{
		m_stackRedo.push(pCommand);
	}
}

//----------------------------------------------------------------
// @routine PopRedoCommand
/// @brief 从Redo栈中取出一个命令
/// 
/// @return 成功返回一个指向命令对象的指针，否则nullptr
/// @author 黄丽云
//---------------------------------------------------------------
CBaseCommand * CUndoCommandManager::PopRedoCommand()
{
	CBaseCommand * pCommand = nullptr;

	if (!m_stackRedo.empty())
	{
		pCommand = m_stackRedo.top();
		m_stackRedo.pop();
	}

	return pCommand;
}

//----------------------------------------------------------------
// @routine DeleteUndoCommands
/// @brief 清除Undo命令栈
/// 
/// @author 黄丽云
//---------------------------------------------------------------
void CUndoCommandManager::DeleteUndoCommands()
{
	while (!m_stackUndo.empty())
	{
		delete m_stackUndo.top();
		m_stackUndo.pop();
	}
}

//----------------------------------------------------------------
// @routine DeleteRedoCommands
/// @brief 清除Redo命令栈
/// 
/// @author 黄丽云
//---------------------------------------------------------------
void CUndoCommandManager::DeleteRedoCommands()
{
	while (!m_stackRedo.empty())
	{
		delete m_stackRedo.top();
		m_stackRedo.pop();
	}
}
