///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// @file  NodeGroupSettings.h
/// 节点组类定义
/// 
///
/// @author  黄丽云
/// @version 1.0
/// @date    2020-7-2
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////


#pragma once
#include "JsonSerializer.h"
#include "MiscellaneousFunctions.h"
#include <list>

class CNodeGroupSettings;

using CNodeGroupSettingsPtr = std::shared_ptr<CNodeGroupSettings>;
using CNodeGroupSettingsArray =  CSharedDynamicJsonVector<CNodeGroupSettings>;
using MAC_ARRAY = CStaticJsonVector<ULONGLONG>;       ///< MAC地址列表




/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// <summary>
/// 节点组设置包括IP节点和物理节点
/// </summary>
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
class CNodeGroupSettings
	: public CSerializeEntry
	, public std::enable_shared_from_this<CNodeGroupSettings>
{

public:
	CNodeGroupSettings(unsigned int nType = 0);
	CNodeGroupSettings(const char* pName, bool nEnableMaxNodes, unsigned int nMaxNodes);
	~CNodeGroupSettings(void);

	ENABLE_SERIALIZE(CNodeGroupSettings);
public:
	CNodeGroupSettingsArray& GetIPGroupSettingsList() { return m_lstChildren; }
	int GetChildCount() { return (int)m_lstChildren.size(); }
	void SetModificatory(bool bModificatory);
	bool GetModificatory() { return m_bModificatory; }
	MAC_ARRAY& GetMacs() { return m_arrMACs; }

public:

	// 提取MAC地址列表
	static bool ExtractMAC(const std::string& refSettings, string_list& refMACs);

public:
	CNodeGroupSettingsPtr FindChildIPGroup(const char* pName);

	CNodeGroupSettingsPtr FindChildIPGroup(const unsigned int nType);
	
	CNodeGroupSettingsPtr CreateChildGroup(const char* pName,const unsigned int nType, const bool nEnableMaxNodes = false, const unsigned int nMaxNodes = 1000);
	
	bool Remove(const CNodeGroupSettingsPtr pNodeGroupSettings);
	
	void DefaultSettings();
	
	void AppendMac(BYTE* pMac);
	
	void ClearMacs() { m_arrMACs.clear(); }

	// 准备释放当前的节点
	void PreRelease();
public:

	//序列化设置信息
	virtual void Serialize(CJSONSerializer& refJsonSerializer) const override;

	//反序列化设置信息
	virtual void DeSerialize(CJSONSerializer& refJsonSerializer) override;


private:
	DECLARE_MEMBER_AND_METHOD(std::string, m_strName, Name);
	DECLARE_MEMBER_AND_METHOD_V11(bool, m_bEnableMaxNodes, EnableMaxNodes,true);
	DECLARE_MEMBER_AND_METHOD_V11(unsigned int, m_nMaxNodes, MaxNodes,1000);
	DECLARE_MEMBER_AND_METHOD_V11(unsigned int, m_Type, Type,0);
	DECLARE_MEMBER_AND_METHOD(std::string, m_strIPSegment, IPSegment);
	DECLARE_MEMBER_AND_METHOD_V11(CNodeGroupSettingsPtr, m_pParent, Parent,nullptr);

	CNodeGroupSettingsArray      m_lstChildren;
	bool                         m_bModificatory;
	MAC_ARRAY                    m_arrMACs;            ///< 如果是MAC组时
};

using CNodeGroupSettingsList = std::list<CNodeGroupSettingsPtr>;