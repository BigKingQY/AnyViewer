///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// @file  
/// @brief 防水墙探头部分
/// 
/// 防水墙探头与服务器之间通信所需要的消息类型定义.所有的消息都由消息头和消息\n
/// 数据量部分组成，消息头的结构都是相同的，但是消息数据根据消息类型的不同而\n
/// 不同.整个协议请求&应答的模式。
///
/// @author 黄丽云
/// @version 1.0
/// @date        2016-9-1
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#pragma once

#ifdef WIN32
#pragma warning(disable : 4200) 
#endif

#include "MessageHeadDef.h"
#include "TreeManagerBase.h"
#include "MiscellaneousFunctions.h"
#include "JsonHelper.h"

#if(_MSC_VER >= 1700  || __GNUC__ > 3)
#include "NodeGroupSettings.h"
#endif

#include <memory>
#include <deque>


#ifdef WIN32
extern char const AGGREGATIONS_TAG[];
extern char const RESULT_TAG[];
extern char const BUCKETS_TAG[];
#else
#include <mutex>
#endif

namespace Ax3LP
{
#define ACCOUNT_LENGTH_MAX 32
#define PASSWORD_LENGTH_MAX 32
#define FILE_NAME_LEN_MAX 255
#define MD5_LEN_MAX 32
#define TRANSACTION_STATUS_MSG_LEN_MAX 200   ///< 事务状态消息的最大长度
#define MAC_LEN 17   ///< 事务状态消息的最大长度

	/// 错误类型枚举
	/// 
	/// 五百以前的错误定位严重错误，连接将断开
	enum EXCEPTION_STATUS
	{
		// 用户登录相关
		ES_SUCCESS = 0,
		ES_INVALID_ACCOUNT = 1, 	///< 枚举，账号不存在
		ES_CREATE_ACCOUNT_FAILED = 2,  ///<创建账号失败
		ES_INVALID_NAME = 3, 	    ///< 枚举，无效的名称
		ES_EXIST_NAME = 4, 	        ///< 枚举，名称已经存在
		ES_INVALID_PASSWD = 5, 	    ///< 枚举，密码错误
		ES_REPEAT_LOGIN = 6, 		///< 枚举，重复登录
		ES_TIME_OUT = 7,             ///< 枚举，超时
		ES_NOT_LOGGED_IN = 8,        ///< 枚举，未登录
		ES_NOT_FOUND_TRANS = 9,      ///< 枚举，没有找到指定的事物
		ES_RETRANSFER = 10,      ///< 枚举，传输数据失败
		ES_ALLOCATE_TRANS_UNSUCCESSFULLY = 11,      ///< 枚举，分配事务上下文失败
		ES_OPEN_FILE_UNSUCCESSFULLY = 12,      ///< 枚举，打开文件失败
		ES_SERVICE_ERR = 13,          ///<服务器错误
		ES_INVALID_SN = 14,           ///<无效激活码
		ES_REACH_AUTHORIZATION_LIMIT = 15,          ///< 授权数已经满,无法在激活
		ES_SEND_FAILED = 16,
		ES_DB_ERROR = 17,        ///< 枚举，数据库错误
		ES_INVALID_IP = 18, 	    ///< 枚举，无效的IP
		ES_UNKNOWN_ERR,          ///< 枚举，未知的错误	
	};

	struct STATUS_CODE_DESC
	{
		EXCEPTION_STATUS m_nStatusCode;
		std::string m_strDesc;
	};



	//所有的消息类型一览表
	enum  MESSAGE_TYPE
	{
		MT_UNKNOWN = 0,
		MT_AES_ENCIPHER_KEY = 1,
		MT_QUERY_ONLINE = 2,			        ///< 枚举，查询登录状态,参考:QUERY_ONLINE_RESPONSE
		MT_LOGIN = 3,                           ///< 枚举，登录  
		MT_LOGOUT = 4,                          ///< 枚举，注销求  
		MT_CRAETE_ACCOUNT = 5,                  ///< 枚举，创建账号	
		MT_KICK_OFF = 6,
		MT_HEARTBEAT = 7,                       ///< 心跳数据		
		MT_SENSOR_ID = 8,                       ///< 枚举，探头身份信息
		MT_EVENT_NOTIFACTION = 9,
		MT_QUERY_ACCOUNT = 10,                  ///< 枚举，查询账号
		MT_TRANSFER_STREAM = 11,	                ///< 枚举，传输数据流
		MT_TRANSFER_STREAM_DATA = 12,	        ///< 枚举，传输数据流数据
		MT_SYN_STREAM = 13,	                    ///< 枚举，同步数据流
		MT_ABORT_TRANSFER_STREAM = 14,          ///< 枚举，终止数据流数据传输
		MT_MOVE_STREAM_OFFSERT = 15,            ///< 枚举，移动传输数据流数据偏移
		MT_PROFILE = 16,                        ///< 枚举，账号信息
		MT_REMOVE_ACCOUNT = 17,                 ///< 枚举，删除账号
		MT_UPDATE_ACCOUNT = 18,                 ///< 枚举，更新账号
		MT_QUERY_SYSLOG_SUMMARY = 19,           ///< 枚举，查询Syslog日志概述信息
		MT_QUERY_SYSLOG_DETAIL = 20,            ///< 枚举，查询Syslog日志明细
		MT_OUTPUT_MSG = 21,
		MT_QUERY_SYSLOG_KEYWORK_STAT = 22,      ///< 枚举，查询Syslog关键字统计信息
		MT_QUERY_SYSLOG_HOST_SVERITY_STAT = 23, ///< 枚举，查询Syslog主机严重程度统计信息
		MT_QUERY_SYSLOG_NAME_STAT = 24,         ///< 枚举，查询Syslog按名称统计信息
		MT_QUERY_SYSLOG_HOST_NAME_STAT = 25,    ///< 枚举，查询Syslog主机名称统计信息
		MT_QUERY_SYSLOG_SVERITY_NAME_STAT,      ///< 枚举，查询Syslog严重程度&事件统计信息
		MT_QUERY_SYSLOG_HOST_SVERITY_NAME_STAT, ///< 枚举，查询Syslog主机&严重程度&事件统计信息
		MT_REMOVE_DOC,                       ///< 枚举，删除日志
		MT_QUERY_LOG_DISCERNING_RULE,           ///< 枚举，查询日志识别设置
		MT_CREATE_LOG_DISCERNING_RULE,          ///< 枚举，添加日志识别规则
		MT_REMOVE_LOG_DISCERNING_RULE,          ///< 枚举，删除日志识别规则
		MT_UPDATE_LOG_DISCERNING_RULE,          ///< 枚举，更新日志识别规则
		MT_LOG_EVENT_NOTIFY,                    ///< 枚举，收到新的事件通知
		MT_QUERY_LOG_EVENT,                     ///< 枚举，查询日志事件记录
		MT_QUERY_LOG_MODEL,                     ///< 枚举，查询日志模式记录

		MT_QUERY_HOST_INFO,                     ///< 枚举，查询主机识别设置
		MT_CREATE_HOST_INFO,                    ///< 枚举，添加主机识别设置
		MT_REMOVE_HOST_INFO,                    ///< 枚举，删除主机识别设置
		MT_UPDATE_HOST_INFO,                    ///< 枚举，更新主机识别设置

		MT_QUERY_SENSORS_LIST,                  ///< 枚举，查询探头列表
		MT_QUERY_SENSORS_SUMMARY,               ///< 枚举，查询概述信息
		MT_QUERY_SENSORS_DETECTION_CONFIG,      ///< 枚举，查询探头检测配置信息

		MT_RETRIEVE_SENSORS_POLICIES,           ///< 枚举，获取探头策略文件
		MT_QUERY_NET_DEVICE_LIST,               ///< 枚举，查询网络设备消息
		MT_QUERY_SENSORS_GENERAL_CONFIG,        ///< 枚举，查询探头基本配置信息
		
		MT_QUERY_EVENT_STAT,                    ///< 枚举，查询事件统计信息
		MT_QUERY_EVENT_LOG,                     ///< 枚举，查询事件日志明细

		MT_QUERY_IP_NODES,                      ///< 枚举，查询IP节点消息
		MT_QUERY_REGION_EVENTS,                 ///< 枚举，地区事件统计

		MT_MAX_MSG_COUNT = 1024,                ///< 枚举，消息类型最大数, 该值位于MESSAGE_TYPE最后一位

	};




	// 客户端状态类型枚举定义
	enum  COST_CLIENT_STATUS
	{
		CCS_OFF_LINE = 0,                 ///< 枚举，离线
		CCS_ON_LINE = 0X01,               ///< 枚举，在线
		CCS_BUSY = 0X02,                  ///< 枚举，忙碌
		CCS_HIDE = 0X03,                  ///< 枚举，隐藏	
	};


	// 探头类型枚举定义
	enum  SENSOR_TYPE
	{
		ST_UNKNOWN = 0,               ///< 枚举，未知
		ST_UNICORN = 1,
		ST_SAX2 = 2,
		ST_SCOUT = 3,
	};

	// 账号类型枚举定义
	enum  ACCOUNT_TYPE
	{
		AT_UNKNOWN = 0,               ///< 枚举，未知
		AT_ADMIN = 1,                 ///< 枚举，管理员
		AT_COMMON = 2,                ///< 枚举，普通账号
	};



	/// <summary>数据类型</summary>
	enum STREAM_DATA_TYPE
	{
		SDT_UNKNOWN = 0,                    ///< 枚举，未知	
		SDT_ACCOUNT_LIST = MT_MAX_MSG_COUNT + 1,   ///< 枚举，朋友列表		
		SDT_SYSLOG_SUMMARY,                ///< 枚举，SYSLOG日志概述信息	
		SDT_SYSLOG_DETAIL,                 ///< 枚举，Syslog日志明细
		SDT_SYSLOG_KEYWORK_STAT,           ///< 枚举，Syslog关键字统计信息
		SDT_SYSLOG_HOST_SVERITY_STAT,      ///< 枚举，Syslog主机严重程度统计信息
		SDT_SYSLOG_NAME_STAT,              ///< 枚举，Syslog按名称统计信息
		SDT_SYSLOG_HOST_NAME_STAT,         ///< 枚举，Syslog主机名称统计信息
		SDT_SYSLOG_SVERITY_NAME_STAT,      ///< 枚举，Syslog严重程度&事件统计信息
		SDT_SYSLOG_HOST_SVERITY_NAME_STAT, ///< 枚举，Syslog主机&严重程度&事件统计信息
		SDT_LOG_DISCERNING_RULE,           ///< 枚举，主机识别设置信息
		SDT_LOG_EVENT,                     ///< 枚举，日志事件记录
		SDT_LOG_MODEL,                     ///< 枚举，日志模式记录
		SDT_HOST_INFO,                     ///< 枚举，主机信息
		SDT_SENSORS_LIST,                  ///< 枚举，探头列表
		SDT_SENSORS_DETECTION_CONFIG,      ///< 枚举，探头配置信息
		SDT_RETRIEVE_SENSORS_POLICIES,     ///< 枚举，探头策略文件
		SDT_QUERY_SENSORS_GENERAL_CONFIG,  ///< 枚举，探头基本配置信息
		SDT_NET_DEVICE_LIST,               ///< 枚举，网络设备链表
		SDT_QUERY_EVENT_STAT,              ///< 枚举，事件统计信息信息
		SDT_QUERY_EVENT_LOG,               ///< 枚举，事件日志明细
		SDT_QUERY_IP_NODES,                ///< 枚举，查询IP节点消息
		SDT_QUERY_REGION_EVENTS,           ///< 枚举，地区事件统计
	};

	extern std::string GetStatusCodeDesc(EXCEPTION_STATUS nStatusCode);


	/// <summary>设备类型</summary>
	enum NET_DEVICE_TYPE
	{
		DT_UNKNOWN = 0,   ///< 
		DT_ROUTER = 1,   ///< 路由器
		DT_SWITCH = 2,   ///< 交换机
		DT_FIREWALL = 3,   ///< 防火墙
		DT_MOBILE = 4,   ///< 手机	
		DT_CAMERA = 5,   ///< 摄像头
		DT_NOTEPAD = 6,   ///< 平板电脑
		DT_PRINTER = 9,   ///< 打印机
		DT_COMPUTER = 10,  ///< 计算机
	};

	/// <summary>设备状态</summary>
	enum NET_DEVICE_STATUS
	{
		DS_OFFLINE = 0,   ///< 离线
		DS_ONLINE = 1,   ///< 在线
	};

#pragma  pack (push,1) 

	// -------------------------两个通用的消息定义，不携带任何数据---------------

	/// @brief 查询登录状态请求
	typedef struct _common_request
	{
		MESSAGE_HEADER objMsgHeader;
		U64                     nStatusCode;   ///< 返回响应结果状态码
	}COMMON_REQUEST;

	/// @brief 登录响应
	typedef struct  _common_response
	{
		MESSAGE_HEADER objMsgHeader;
		U64            nStatusCode;   ///< 返回响应结果状态码
	}COMMON_RESPONSE;

	/// @brief 心跳报
	typedef struct _common_heartbeat
	{
		MESSAGE_HEADER objMsgHeader;
		U32                     nStatusCode;   ///< 返回响应结果状态码
	}COMMON_HEARTBEAT;

	/// <summary>转发头</summary>
	typedef struct _transpond_header
	{
		MESSAGE_HEADER objMsgHeader;
		U32 nSrcAccount;
		U32 nDstAccount;
	}TRANSPOND_HEADER;


	typedef struct  _common_transpond_response
	{
		TRANSPOND_HEADER objTranspondHeader;
		U32                     nStatusCode;   ///< 返回响应结果状态码
	}COMMON_TRANSPOND_RESPONSE;

	/*-------------------------AES加密KEY消息格式定义---------------------------------------------*/

	/// @brief 查询登录状态响应
	/// 
	/// 传输方向：客户端-->服务器\n
	/// 响应：消息AES_ENCIPHER_KEY_REQUEST的响应消息格式是AES_ENCIPHER_KEY_RESPONSE
	///            它们是相同
	typedef struct  _aes_encipher_key
	{
		MESSAGE_HEADER objMsgHeader;
		char  szKeyData[48];                                  ///< 解密后的数据只有前面16个有效，剩下全是填充数据
	}AES_ENCIPHER_KEY_REQUEST, AES_ENCIPHER_KEY_RESPONSE;

	/*-------------------------用户登录部分的消息格式定义---------------------------------------------*/


	typedef COMMON_RESPONSE CREATE_ACCOUNT_RESPONSE;


	/// @brief 查询登录状态响应
	/// 
	/// 传输方向：客户端-->服务器
	typedef struct  _query_online_response
	{
		MESSAGE_HEADER objMsgHeader;
		U32  bOnline;                                  ///< 登录状态(TRUE:在线，FALSE:离线)
		char szName[ACCOUNT_LENGTH_MAX];							   ///< 用户名称
	}QUERY_ONLINE_RESPONSE;

	/// @brief 登录请求
	/// 
	/// 传输方向：客户端-->服务器
	typedef struct  _login_request
	{
		MESSAGE_HEADER objMsgHeader;
		char szAccount[ACCOUNT_LENGTH_MAX];		  	       ///< 用户名称
		char szPassword[PASSWORD_LENGTH_MAX];              ///< 密码	
	}LOGIN_REQUEST;

	/// @brief 登录响应
	/// 
	/// 传输方向：客户端<--服务器
	typedef struct  _login_response
	{
		MESSAGE_HEADER objMsgHeader;
		union
		{
			U32 nAccount;             ///< 账号(成功)
			U32 nStatusCode;          ///<状态码(失败)
		};
		U32 nType;                     ///< 类型
	}LOGIN_RESPONSE;



	/// @brief 注销
	/// 
	/// 传输方向：客户端-->服务器

	typedef struct  _logout_request
	{
		MESSAGE_HEADER objMsgHeader;
		char szAccount[ACCOUNT_LENGTH_MAX];		  	       ///< 用户名称
	}LOGOUT_REQUEST;

	/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	/// <summary>
	/// 请求传输消息
	/// </summary>
	/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	typedef struct  _change_client_status
	{
		MESSAGE_HEADER objMsgHeader;
		U32 nAccount;            ///< 账号	
		U32 nStatus;             ///< 新的状态,@see COST_CLIENT_STATUS
	}CHANGE_CLIENT_STATUS;


	// --------------------------------------------------------------------------------
/// <summary>
/// 事务请求
/// </summary>
// --------------------------------------------------------------------------------
	typedef struct  _transfer_stream_request
	{
		MESSAGE_HEADER objMsgHeader;
		U16 nType;                  ///< 数据类型 @see STREAM_DATA_TYPE
		U64 nId;                  ///< 事务id
		U32 nSrcAccount;          ///<源账号
		U32 nDstAccount;          ///<目的账号
		I8 szMd5[MD5_LEN_MAX + 1];             ///< md5
		U64 nSize;                ///< 大小
	}TRANSFER_STREAM_REQUEST;


	// --------------------------------------------------------------------------------
	/// <summary>
	/// 同步流事务请求
	/// </summary>
	// --------------------------------------------------------------------------------
	typedef struct  _syn_stream_request
	{
		MESSAGE_HEADER objMsgHeader;
		U16 nType;                  ///< 数据类型 @see STREAM_DATA_TYPE
		U64 nId;                  ///< 源事务id
		U32 nSrcAccount;           ///<源账号
		U32 nDstAccount;           ///<目的账号
		I8 szMd5[MD5_LEN_MAX + 1];             ///< md5
		U64 nSize;                ///< 大小
	}SYN_STREAM_REQUEST;


	/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	/// <summary>
	/// 流应答数据包
	/// </summary>
	/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	typedef struct  _transfer_stream_response
	{
		MESSAGE_HEADER objMsgHeader;
		U64 nId;      ///< 流源ID
		U64 nStatusCode;    ///< 返回响应结果状态码
	}TRANSFER_STREAM_RESPONSE;

	// --------------------------------------------------------------------------------
	/// <summary>
	/// 中止数据流传输事务
	/// </summary>
	// --------------------------------------------------------------------------------
	typedef struct  _abort_transfer_stream_request
	{
		MESSAGE_HEADER objMsgHeader;
		U64 nId;                  ///< 事务id
	}ABORT_TRANSFER_STREAM_REQUEST;

	// --------------------------------------------------------------------------------
	/// <summary>
	/// 事务实体
	/// </summary>
	// --------------------------------------------------------------------------------
	typedef struct  _transfer_stream_data_request
	{
		MESSAGE_HEADER objMsgHeader;
		U64 nId;                  ///< 事务id
		U32 nSize;                ///< 大小
		U64 nOffset;              ///< 偏移
	}TRANSFER_STREAM_DATA_REQUEST;



	/// @brief 传输数据流应答数据包
	typedef struct  _transfer_stream_data_response
	{
		MESSAGE_HEADER objMsgHeader;
		U64 nId;            ///< 事务id
		U64 nOffset;        ///< 下一个偏移
		U32 nStatusCode;    ///< 返回响应结果状态码
	}TRANSFER_STREAM_DATA_RESPONSE;


	// --------------------------------------------------------------------------------
	/// <summary>
	/// 移动数据流读偏移,用于断点续传
	/// </summary>
	// --------------------------------------------------------------------------------
	typedef struct  _move_stream_offsert_request
	{
		MESSAGE_HEADER objMsgHeader;
		U64 nId;            ///< 事务id
		U64 nOffset;              ///< 偏移
	}MOVE_STREAM_OFFSET_REQUEST;


	// --------------------------------------------------------------------------------
	/// <summary>
	/// 移动数据流读偏移,用于断点续传
	/// </summary>
	// --------------------------------------------------------------------------------
	typedef struct  _move_stream_offsert_reponse
	{
		MESSAGE_HEADER objMsgHeader;
		U64 nId;            ///< 事务id
		U64 nOffset;     ///< 偏移
		U32 nStatusCode; ///< 返回响应结果状态码
	}MOVE_STREAM_OFFSET_REPONSE;


	/// @brief 请求显示提示消息
	/// 
	/// 传输方向：探头->消息中心

	typedef struct tagEventNotifaction             //使能请求
	{
		MESSAGE_HEADER objMsgHeader;
		U32            nSensorID;        ///< 探头ID
		U32            nCode;            ///< 事件代码
		U32            nSeverity;        ///< 消息严重程度,参考类型定义SEVERITY_TYPE
		U64            nTime;            ///< 时间
		U32            nProtocol;        ///< 协议
		U32            nIP1;             ///< 
		U16            nPort1;
		char           arrMac1[MAC_LEN + 1];
		U32            nIP2;
		U16            nPort2;
		char           arrMac2[MAC_LEN + 1];
		U32            nMessageLen;      ///< 消息严重程度,参考类型定义SEVERITY_TYPE
		char           szMessage[0];     ///< 消息正文
	}EVENT_NOTIFACTION;

	/// @brief 发送探头身份信息到服务器
	/// 
	/// 传输方向：探头->消息中心
	typedef struct
	{
		MESSAGE_HEADER objMsgHeader;
		U32            nID;           ///< 探头ID
		char           szName[32];    ///< 探头名称
		U16            nType;         ///< 探头类型,@see SENSOR_TYPE
	}SENSOR_ID_INFO;

#pragma pack(pop)

	//*******************************************************************
	/// <summary>
	/// 基本账号信息，当用户登陆成功后用于传输朋友账号
	/// </summary>
	//*******************************************************************
	class CBaseAccountInfo :public CSerializeEntry
	{
	public:
		CBaseAccountInfo(const char* pName = "");
		virtual ~CBaseAccountInfo();
		CBaseAccountInfo(const CBaseAccountInfo& refBaseAccountInfo);
		CBaseAccountInfo& operator=(const CBaseAccountInfo& refBaseAccountInfo);

		ENABLE_SERIALIZE(CBaseAccountInfo)
	public:
		virtual void Serialize(CJSONSerializer& refJsonSerializer) const override;

		virtual void DeSerialize(CJSONSerializer& refJsonSerializer) override;

	private:
		DECLARE_MEMBER_AND_METHOD(I64, m_nID, ID)      ///< 账号 
		DECLARE_MEMBER_AND_METHOD(std::string, m_strAccount, Account)      ///< 账号 
		DECLARE_MEMBER_AND_METHOD(int, m_nType, Type)            ///< 类型 @see COST_CLIENT_TYPE
		DECLARE_MEMBER_AND_METHOD(std::string, m_strName, Name) ///< 会员名称
		DECLARE_MEMBER_AND_METHOD(std::string, m_strMemo, Memo)    ///< 备注
	};

	typedef CDynamicJsonVector<CBaseAccountInfo> ACCOUNT_ARRAY;

	//*******************************************************************
	/// <summary>
	/// 客户信息类，用于注册和更新账号信息
	/// </summary>
	//*******************************************************************
	class CAccountInfo :public CBaseAccountInfo
	{
	public:
		CAccountInfo(const char* pName = "", const char* pPwd = "");
		CAccountInfo(const CAccountInfo& refCAccountInfo);
		CAccountInfo& operator=(const CAccountInfo& refCAccountInfo);

	public:
		virtual void Serialize(CJSONSerializer& refJsonSerializer) const override;

		virtual void DeSerialize(CJSONSerializer& refJsonSerializer) override;

	public:
		DECLARE_MEMBER_AND_METHOD(std::string, m_strPWD, PWD)    ///< 口令
		DECLARE_MEMBER_AND_METHOD(std::string, m_strTel, Tel)    ///< 电话号码
		DECLARE_MEMBER_AND_METHOD(std::string, m_strCompany, Company)    ///< 公司名称
		DECLARE_MEMBER_AND_METHOD(std::string, m_strEmail, Email)    ///< 电子邮件
		DECLARE_MEMBER_AND_METHOD(std::string, m_strWeb, Web)    ///< 主页
		DECLARE_MEMBER_AND_METHOD(std::string, m_strAddr, Addr)    ///< 公司地址

		DECLARE_MEMBER_AND_METHOD(int, m_nMoney, Money)    ///< 钱(分)
		DECLARE_MEMBER_AND_METHOD(std::string, m_strMachineID, MachineID)    ///< 机械码
		DECLARE_MEMBER_AND_METHOD(int, m_nIP, IP)    ///< 注册地ip地址
		DECLARE_MEMBER_AND_METHOD(std::string, m_strUnionid, Unionid)    ///< 微信唯一标识Unionid
		DECLARE_MEMBER_AND_METHOD(std::string, m_strNickname, Nickname)    ///< 昵称
		DECLARE_MEMBER_AND_METHOD(bool, m_bSex, Sex)    ///< 性别true男性
	};




	/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	/// <summary>
	/// 
	/// </summary>
	/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	class CQuerySettings :public CSerializeEntry
	{
	public:
		CQuerySettings(const I64 nBeginTime = 0, const I64 nEndTime = 0, const I32 nInterval = 0)
			: m_nBeginTime(nBeginTime)
			, m_nEndTime(nEndTime)
			, m_nInterval(nInterval)
			, m_nLegitimacyType(0)
		{}
		~CQuerySettings()
		{}

		ENABLE_SERIALIZE(CQuerySettings)
	public:
		virtual void Serialize(CJSONSerializer& refJsonSerializer) const override;

		virtual void DeSerialize(CJSONSerializer& refJsonSerializer) override;
	public:
		DECLARE_MEMBER_AND_METHOD(I64, m_nBeginTime, BeginTime)   ///< 开始时间(单位：秒)
		DECLARE_MEMBER_AND_METHOD(I64, m_nEndTime, EndTime)       ///< 结束时间(单位：秒)
		DECLARE_MEMBER_AND_METHOD(I32, m_nInterval, Interval)     ///< 间割时间(单位：秒)
		DECLARE_MEMBER_AND_METHOD(std::string, m_strDSL, DSL)     ///< DSL查询设置
		DECLARE_MEMBER_AND_METHOD(I32, m_nLegitimacyType, LegitimacyType)     ///< 日志合法性类型
		DECLARE_MEMBER_AND_METHOD(std::string, m_strKeywords, Keywords)     ///< DSL查询设置
	};

	/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// <summary>
/// 属性和值映射模板类
/// </summary>
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	template<class KEY, class VALUE>
	class CKey2Value : public CSerializeEntry
	{
	public:
		CKey2Value() {}
		CKey2Value(KEY objKey, VALUE objValue)
			: m_objKey(objKey)
			, m_objValue(objValue)
		{}
		~CKey2Value() {}
		ENABLE_SERIALIZE(CKey2Value)
	public:
		virtual void Serialize(CJSONSerializer& refJsonSerializer) const override
		{
			CSerializeEntry::Serialize(refJsonSerializer);

			refJsonSerializer.Serialize("key", m_objKey);
			refJsonSerializer.Serialize("doc_count", m_objValue);
		}

		virtual void DeSerialize(CJSONSerializer& refJsonSerializer) override
		{
			CSerializeEntry::DeSerialize(refJsonSerializer);

			refJsonSerializer.DeSerialize("key", m_objKey);
			refJsonSerializer.DeSerialize("doc_count", m_objValue);
		}
	private:
		DECLARE_MEMBER_AND_METHOD(KEY, m_objKey, Key)
		DECLARE_MEMBER_AND_METHOD(VALUE, m_objValue, Value)
	};

	class CString2IntArray : public CDynamicJsonVector<CKey2Value<std::string, I64>>
	{
	public:
		CString2IntArray(const bool bAutoRelease = true)
			: CDynamicJsonVector(bAutoRelease)
		{
			SetEnableClassName(false);
		}
	};

	typedef CKey2Value<int, I64> CInt2Int;

	class CInt2IntArray : public CDynamicJsonVector<CInt2Int>
	{
	public:
		CInt2IntArray(const bool bAutoRelease = true)
			: CDynamicJsonVector(bAutoRelease)
		{
			SetEnableClassName(false);
		}
	};



	/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// <summary>
/// 聚合结果模板类定义,聚合结果返回一个桶，是一个json对象数组，该模板类就需要
/// 数组的对象类型作为参数
/// </summary>
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	template<class NOTE_TYPE>
	class CAggrResultT :public CSerializeEntry
	{
	public:
		CAggrResultT()
			: m_objBuchets(true)
		{
			m_objBuchets.SetEnableClassName(false);
		}
		~CAggrResultT() {}
		ENABLE_SERIALIZE(CAggrResultT)

			typedef CDynamicJsonVector<NOTE_TYPE>  CBucketsArray;

	public:
		CBucketsArray& GetBuckets() { return m_objBuchets; }

	public:
		virtual void Serialize(CJSONSerializer& refJsonSerializer) const override
		{
			CSerializeEntry::Serialize(refJsonSerializer);

			//refJsonSerializer.Serialize("doc_count_error_upper_bound", m_nDoc_count_error_upper_bound);
			//refJsonSerializer.Serialize("sum_other_doc_count", m_nSum_other_doc_count);
			refJsonSerializer.Serialize("buckets", m_objBuchets);
		}

		virtual void DeSerialize(CJSONSerializer& refJsonSerializer) override
		{
			CSerializeEntry::DeSerialize(refJsonSerializer);

			//refJsonSerializer.DeSerialize("doc_count_error_upper_bound", m_nDoc_count_error_upper_bound);
			//refJsonSerializer.DeSerialize("sum_other_doc_count", m_nSum_other_doc_count);
			refJsonSerializer.DeSerialize("buckets", m_objBuchets);
		}
	private:
		DECLARE_MEMBER_AND_METHOD(I64, m_nDoc_count_error_upper_bound, doc_count_error_upper_bound)
		DECLARE_MEMBER_AND_METHOD(I64, m_nSum_other_doc_count, sum_other_doc_count)
		CBucketsArray m_objBuchets;
	};


	/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	/// <summary>
	/// 嵌套桶节点
	/// </summary>
	/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	template<const char* lpName,class KEY_TYPE = std::string,class NODE_TYPE = CInt2IntArray>
	class CNestingBucketsNodeT :public CKey2Value<KEY_TYPE, I64>
	{
	public:
		CNestingBucketsNodeT() {}
		ENABLE_SERIALIZE(CNestingBucketsNodeT)

	public:
		CAggrResultT<NODE_TYPE>& GetAggrResult() { return m_objAggrResult; }

	public:
		virtual void Serialize(CJSONSerializer& refJsonSerializer) const override
		{
			CKey2Value<KEY_TYPE, I64>::Serialize(refJsonSerializer);

			refJsonSerializer.Serialize(lpName, m_objAggrResult);
		}

		virtual void DeSerialize(CJSONSerializer& refJsonSerializer) override
		{
			CKey2Value<KEY_TYPE, I64>::DeSerialize(refJsonSerializer);

			refJsonSerializer.DeSerialize(lpName, m_objAggrResult);
		}

	public:
		CAggrResultT<NODE_TYPE>             m_objAggrResult;
	};


	template<class T>
	class CESRecordT : public CSerializeEntry
	{
	public:
		CESRecordT()
			: m_nScore(0.0)
		{}
		~CESRecordT() {}

		ENABLE_SERIALIZE(CESRecordT)

	public:
		T& GetData() { return m_objData; }

	public:
		virtual void Serialize(CJSONSerializer& refJsonSerializer) const override
		{
			CSerializeEntry::Serialize(refJsonSerializer);

			refJsonSerializer.Serialize("_score", m_nScore);
			refJsonSerializer.Serialize("_source", m_objData);
		}

		virtual void DeSerialize(CJSONSerializer& refJsonSerializer) override
		{
			CSerializeEntry::DeSerialize(refJsonSerializer);

			refJsonSerializer.DeSerialize("_score", m_nScore);
			refJsonSerializer.DeSerialize("_source", m_objData);
		}
	private:
		DECLARE_MEMBER_AND_METHOD(double, m_nScore, Score)
		T           m_objData;
	};


	/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	/// <summary>
	/// ES查询统计信息
	/// </summary>
	/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	class CESTotal : public CSerializeEntry
	{
	public:
		CESTotal()
		{
		}
		~CESTotal(){}

		ENABLE_SERIALIZE(CESTotal)
	public:
		virtual void Serialize(CJSONSerializer& refJsonSerializer) const override
		{
			CSerializeEntry::Serialize(refJsonSerializer);

			refJsonSerializer.Serialize("value", m_nValue);
			refJsonSerializer.Serialize("relation", m_strRelation);
		}

		virtual void DeSerialize(CJSONSerializer& refJsonSerializer) override
		{
			CSerializeEntry::DeSerialize(refJsonSerializer);

			refJsonSerializer.DeSerialize("value", m_nValue);
			refJsonSerializer.DeSerialize("relation", m_strRelation);
		}
	private:
		DECLARE_MEMBER_AND_METHOD(I64, m_nValue, Value)
		DECLARE_MEMBER_AND_METHOD(std::string, m_strRelation, Relation)
	};

	/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	/// <summary>
	/// ES查询结果
	/// </summary>
	/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	
	template<class T>
	class CESQueryResult : public CSerializeEntry
	{
	public:
		CESQueryResult()
			: m_nMaxScore(0)
		{
			m_arrRecords.SetAutoRelease(true);
			///< 因为返回的结果无法,不含有类名,无法通过类型创建对象,所以禁止
			m_arrRecords.SetEnableClassName(false);
		}

		~CESQueryResult()
		{
		}

		typedef Ax3LP::CESRecordT<T> CRecord;

	public:
		CDynamicJsonVector<CRecord>&  GetRecords() { return m_arrRecords; }
		CESTotal& GetTotal() { return   m_objTotal; }

	public:
		virtual void Serialize(CJSONSerializer& refJsonSerializer) const override
		{
			CSerializeEntry::Serialize(refJsonSerializer);

			refJsonSerializer.Serialize("total", m_objTotal);
			refJsonSerializer.Serialize("max_score", m_nMaxScore);
			refJsonSerializer.Serialize("hits", m_arrRecords);
		}

		virtual void DeSerialize(CJSONSerializer& refJsonSerializer) override
		{
			CSerializeEntry::DeSerialize(refJsonSerializer);

			refJsonSerializer.DeSerialize("total", m_objTotal);
			refJsonSerializer.DeSerialize("max_score", m_nMaxScore);
			refJsonSerializer.DeSerialize("hits", m_arrRecords);
		}
	private:
		CESTotal             m_objTotal;
		DECLARE_MEMBER_AND_METHOD(double, m_nMaxScore, MaxScore)
		CDynamicJsonVector<CRecord>  m_arrRecords;
	};


	/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	/// <summary>
	/// 统计信息
	/// </summary>
	/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	class CEventStatbySeverity :public CSerializeEntry
	{
	public:
		CEventStatbySeverity(
			const int nInfo = 0
			, const int nNotice = 0
			, const int nWarning = 0
			, const int nCritical = 0
			, const int nDebug = 0
			, const int nError = 0
			, const int nAlert = 0
			, const int nEmergency = 0);
		~CEventStatbySeverity();

		ENABLE_SERIALIZE(CEventStatbySeverity)

	public:
		I64 GetTotal() {
			return m_nDebug + m_nInfo + m_nNotice + m_nWarning + m_nError + m_nCritical  + m_nAlert+ m_nEmergency;
		}

		// 得到最大的事件数
		I64 GetMaxEvents();

	public:
		CEventStatbySeverity& operator+=(const CEventStatbySeverity& reEventStat);

	public:
		virtual void Serialize(CJSONSerializer& refJsonSerializer) const override;

		virtual void DeSerialize(CJSONSerializer& refJsonSerializer) override;

	public:
		DECLARE_MEMBER_AND_METHOD(std::string, m_strTitle, Title)    ///< 主题
		DECLARE_MEMBER_AND_METHOD(I64, m_nDebug, Debug)          ///< 调试
		DECLARE_MEMBER_AND_METHOD(I64, m_nInfo, Info)          ///< 一般
		DECLARE_MEMBER_AND_METHOD(I64, m_nNotice, Notice)      ///< 提示
		DECLARE_MEMBER_AND_METHOD(I64, m_nWarning, Warning)    ///< 警告
		DECLARE_MEMBER_AND_METHOD(I64, m_nError, Error)    ///< 错误
		DECLARE_MEMBER_AND_METHOD(I64, m_nCritical, Critical)  ///< 严重
		DECLARE_MEMBER_AND_METHOD(I64, m_nAlert, Alert)    ///< 警觉
		DECLARE_MEMBER_AND_METHOD(I64, m_nEmergency, Emergency)  ///< 紧急
	};

	typedef CDynamicJsonVector<CEventStatbySeverity>                   CEventStatbySeverityArray;


	/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	/// <summary>
	/// 概述信息
	/// </summary>
	/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	class CSummaryInfo :public CSerializeEntry
	{
	public:
		CSummaryInfo()
			: m_arrEventStatbySeverity(true)
			, m_arrEventStatbyHost(true)
		{}
		~CSummaryInfo() {}

		ENABLE_SERIALIZE(CSummaryInfo)

	public:
		CEventStatbySeverityArray& GetEventStat() { return m_arrEventStatbySeverity; }

		CString2IntArray& GetEventStatbyHost() { return m_arrEventStatbyHost; }

		CString2IntArray& GetEventStatbyName() { return m_arrEventStatbyName; }

		CString2IntArray& GetLast10Syslog() { return m_arrLast10Syslog; }

	public:

		// 创建一个统计节点
		CEventStatbySeverity* CreateEventStat(
			const std::string& strTitle
			, const int nInfo
			, const int nNotice
			, const int nWarning
			, const int nCritical
			, const int nDebug
			, const int nError
			, const int nAlert
			, const int nEmergency);

	public:
		virtual void Serialize(CJSONSerializer& refJsonSerializer) const override;

		virtual void DeSerialize(CJSONSerializer& refJsonSerializer) override;

	private:
		DECLARE_MEMBER_AND_METHOD(CEventStatbySeverity, m_objTotal, Total)    ///< 实践统计

		CEventStatbySeverityArray   m_arrEventStatbySeverity;     ///<  按严重程度统计事件
		CString2IntArray            m_arrEventStatbyHost;         ///<  按主机统计事件
		CString2IntArray            m_arrEventStatbyName;         ///<  按事件名称统计事件
		CString2IntArray            m_arrLast10Syslog;            ///<  最后的10个syslog日志
	};


	/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	/// <summary>
	/// es查询错误信息
	/// </summary>
	/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	class CESErrorInfo : public CSerializeEntry
	{
	public:
		CESErrorInfo()
		{}
		~CESErrorInfo() {}
		ENABLE_SERIALIZE(CESErrorInfo)

	public:
		virtual void Serialize(CJSONSerializer& refJsonSerializer) const override;

		virtual void DeSerialize(CJSONSerializer& refJsonSerializer) override;

	public:
		DECLARE_MEMBER_AND_METHOD(int, m_nCode, Code)            ///< 错误代码
		DECLARE_MEMBER_AND_METHOD(std::string, m_strMsg, Msg)    ///< 错误信息
	};

	/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// <summary>
/// 主机识别模式设置
/// </summary>
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	class CLogDiscerningReponseMode : public CSerializeEntry
	{
	public:
		CLogDiscerningReponseMode(bool bEnable = false, int nType = RM_UNKNOWN)
			: m_bEnable(bEnable)
			, m_nType(nType)
		{}
		~CLogDiscerningReponseMode() {}
		ENABLE_SERIALIZE(CLogDiscerningReponseMode)

		/// <summary>响应类别</summary>
		enum REPONSE_MODE
		{
			RM_UNKNOWN = 0,                    ///< 枚举常量，未知
			RM_HOST_IDENTIFICATION = 1,        ///< 枚举常量，标示主机
			RM_LEGITIMACY_IDENTIFICATION = 2,  ///< 枚举常量，标示合法性
			RM_NOTIFY = 3,                     ///< 枚举常量，发送通知
		};

		/// <summary>合法性类型</summary>
		enum LEGITIMACY_TYPE
		{
			LT_UNKNOWN = 0,      ///< 枚举常量，未知
			LT_NORMAL = 1,        ///< 枚举常量，合法
			LT_ABNORMAL = 2,      ///< 枚举常量，非法
			LT_ALL = LT_UNKNOWN + LT_NORMAL + LT_ABNORMAL, ///< 全部
		};
	public:
		virtual void Serialize(CJSONSerializer& refJsonSerializer) const override;

		virtual void DeSerialize(CJSONSerializer& refJsonSerializer) override;

	public:
		DECLARE_MEMBER_AND_METHOD(bool, m_bEnable, Enable)                  ///< 响应方式，@see REPONSE_MODE
		DECLARE_MEMBER_AND_METHOD(int, m_nType, Type)                  ///< 响应方式，@see REPONSE_MODE
		DECLARE_MEMBER_AND_METHOD(std::string, m_strPara1, Para1)      ///< 参数1
		DECLARE_MEMBER_AND_METHOD(int, m_nPara2, Para2)      ///< 参数2
	};

	typedef CDynamicJsonVector<CLogDiscerningReponseMode>          CLogDiscerningReponseModeArray;

	/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// <summary>
/// 日志过滤识别模式设置
/// </summary>
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	class  CLogDiscerningRule : public CSerializeEntry
	{
	public:
		 CLogDiscerningRule()
			:m_nID(0)
			, m_arrReponseMode(true)
		{}
		~ CLogDiscerningRule() {}
		ENABLE_SERIALIZE(CLogDiscerningRule)

	public:
		CLogDiscerningReponseModeArray& GetReponseMode() { return m_arrReponseMode; }
		string_list& GetPatterns() { return m_arrPatterns; }


	public:
		// 初始化
		void Init();

		// 分割模式
		void SplitPattern();
	public:
		virtual void Serialize(CJSONSerializer& refJsonSerializer) const override;

		virtual void DeSerialize(CJSONSerializer& refJsonSerializer) override;

	private:
		DECLARE_MEMBER_AND_METHOD(int, m_nID, ID)                     ///< id
		DECLARE_MEMBER_AND_METHOD(std::string, m_strName, Name)       ///< 名称
		DECLARE_MEMBER_AND_METHOD(std::string, m_strPattern, Pattern) ///< 模式
		DECLARE_MEMBER_AND_METHOD(std::string, m_strMemo, Memo)       ///< 备注

		CLogDiscerningReponseModeArray m_arrReponseMode;
		string_list          m_arrPatterns;                           ///< 按回车换行分解的模式字符串数组 
	};

	typedef CDynamicJsonVector<CLogDiscerningRule>                  CLogDiscerningRuleArray;
	typedef std::shared_ptr<CLogDiscerningRule> CLogDiscerningRulePtr;

	/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	/// <summary>
	/// 日志事件
	/// </summary>
	/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	class CLogEvent : public CSerializeEntry
	{
	public:
		CLogEvent(unsigned int nSeverity = 0,const char* pName = nullptr);
		~CLogEvent();
		ENABLE_SERIALIZE(CLogEvent)
	public:
		virtual void Serialize(CJSONSerializer& refJsonSerializer) const override;

		virtual void DeSerialize(CJSONSerializer& refJsonSerializer) override;

	public:
		DECLARE_MEMBER_AND_METHOD(unsigned int, m_nType, Type); /// 类型,@see TYPE
		DECLARE_MEMBER_AND_METHOD(unsigned int, m_nSeverity, Severity); /// 严重等级 
		DECLARE_MEMBER_AND_METHOD(I64, m_nCaptureTime, CaptureTime); /// 采集时间
		DECLARE_MEMBER_AND_METHOD(std::string, m_strName, Name);    ///< 进程名称
		DECLARE_MEMBER_AND_METHOD(std::string, m_strMemo, Memo);     ///< 进程ID
	};

	typedef std::shared_ptr<CLogEvent> CLogEventPtr;


	/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// <summary>
/// 日志事件
/// </summary>
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	class CLogModel : public CSerializeEntry
	{
	public:
		CLogModel(){}
		~CLogModel() {}
		ENABLE_SERIALIZE(CLogModel)
	public:
		virtual void Serialize(CJSONSerializer& refJsonSerializer) const override;

		virtual void DeSerialize(CJSONSerializer& refJsonSerializer) override;

	public:
		DECLARE_MEMBER_AND_METHOD(std::string, m_strHost, Host);    ///< 产生日志的主机
		DECLARE_MEMBER_AND_METHOD(std::string, m_strModel, Model);  ///< 提取的模式
		DECLARE_MEMBER_AND_METHOD(std::string, m_strLog, Log);      ///< 对应的日志
	};


	typedef CDynamicJsonVector<CLogModel>                  CLogModelArray;


	/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// <summary>
/// 日志事件
/// </summary>
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	class CHostInfo : public CSerializeEntry
	{
	public:
		CHostInfo(unsigned int ID = 0, const char* pIP = "", const char* pName = "");
		~CHostInfo();
		ENABLE_SERIALIZE(CHostInfo)

	public:
		virtual void Serialize(CJSONSerializer& refJsonSerializer) const override;

		virtual void DeSerialize(CJSONSerializer& refJsonSerializer) override;

	public:
		DECLARE_MEMBER_AND_METHOD(unsigned int, m_nID, ID); /// 类型,@see TYPE
		DECLARE_MEMBER_AND_METHOD(std::string, m_strIP, IP);    ///< 进程名称
		DECLARE_MEMBER_AND_METHOD(std::string, m_strName, Name);     ///< 进程ID
	};

	typedef CDynamicJsonVector<CHostInfo>                 CHostInfoArray;


	class CSensorInfo : public CSerializeEntry
	{
	public:
		CSensorInfo(unsigned int ID = 0, const char* pIP = "", const char* pName = "");
		~CSensorInfo();
		ENABLE_SERIALIZE(CSensorInfo)

	public:
		virtual void Serialize(CJSONSerializer& refJsonSerializer) const override;

		virtual void DeSerialize(CJSONSerializer& refJsonSerializer) override;

	public:
		DECLARE_MEMBER_AND_METHOD(unsigned int, m_nID, ID);         ///< 探头id
		DECLARE_MEMBER_AND_METHOD(std::string, m_strIP, IP);        ///< IP地址
		DECLARE_MEMBER_AND_METHOD(std::string, m_strName, Name);    ///< 名称
	};

	typedef CDynamicJsonVector<CSensorInfo>                 CSensorInfoArray;


	/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// <summary>
/// 概述信息
/// </summary>
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	class CSensorSummaryInfo :public CSerializeEntry
	{
	public:
		CSensorSummaryInfo();
		~CSensorSummaryInfo() {}

		ENABLE_SERIALIZE(CSensorSummaryInfo)

	public:

		I64 GetMax() const;

	public:
		virtual void Serialize(CJSONSerializer& refJsonSerializer) const override;

		virtual void DeSerialize(CJSONSerializer& refJsonSerializer) override;

	private:
		DECLARE_MEMBER_AND_METHOD(I32, m_nClientID, ClientID)  ///< 客户端ID
		DECLARE_MEMBER_AND_METHOD(I64, m_nBytesReceived, BytesReceived)          ///< 流量
		DECLARE_MEMBER_AND_METHOD(I64, m_nInfo, Info)          ///< 一般
		DECLARE_MEMBER_AND_METHOD(I64, m_nNotice, Notice)      ///< 提示
		DECLARE_MEMBER_AND_METHOD(I64, m_nWarning, Warning)    ///< 警告
		DECLARE_MEMBER_AND_METHOD(I64, m_nCritical, Critical)  ///< 严重
	};

	/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	/// <summary>
	/// 编号与名称映射类定义
	/// </summary>
	/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	class CID2DescInfo :public CSerializeEntry
	{
	public:
		CID2DescInfo(const I32 nID = 0, const char* lpName = "", const char* lpDesc = "")
			:m_nID(nID)
			, m_strName(lpName)
			, m_strDesc(lpDesc)
		{
		}
		~CID2DescInfo() {}

		ENABLE_SERIALIZE(CID2DescInfo)
	public:
		virtual void Serialize(CJSONSerializer& refJsonSerializer) const override;

		virtual void DeSerialize(CJSONSerializer& refJsonSerializer) override;

	private:
		DECLARE_MEMBER_AND_METHOD(I32, m_nID, ID)  ///< ID
		DECLARE_MEMBER_AND_METHOD(std::string, m_strName, Name)          ///< 名称
		DECLARE_MEMBER_AND_METHOD(std::string, m_strDesc, Desc)          ///< 描述
	};

	typedef CDynamicJsonVector<CID2DescInfo>                CID2DescInfoArray;



	/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	/// <summary>
	/// 样本类型
	/// </summary>
	/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	class CSampleType :public CSerializeEntry

	{
	public:
		CSampleType()
			: m_nID(0)
			, m_bEnable(false)
			, m_nEndpoint(0)
		{
		}
		~CSampleType() {}

		ENABLE_SERIALIZE(CSampleType)

	public:
		virtual void Serialize(CJSONSerializer& refJsonSerializer) const override;

		virtual void DeSerialize(CJSONSerializer& refJsonSerializer) override;

	public:
		DECLARE_MEMBER_AND_METHOD(U32, m_nID, ID)
		DECLARE_MEMBER_AND_METHOD(bool, m_bEnable, Enable)
		DECLARE_MEMBER_AND_METHOD(std::string, m_strName, Name)
		DECLARE_MEMBER_AND_METHOD(U32, m_nEndpoint, Endpoint)
	};


	typedef CDynamicJsonVector<CSampleType>               CSampleTypeArray;


	/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	/// <summary>
	/// 策略组信息
	/// </summary>
	/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	class CStrategyGroup :public CSerializeEntry
	{
	public:
		CStrategyGroup()
			: m_nID(0)
			, m_nProtocol(0)
			, m_arrSampleTypes(true)
		{

		}
		~CStrategyGroup()
		{
		}
		ENABLE_SERIALIZE(CStrategyGroup)

	public:
		CSampleTypeArray& GetSampleTypes() { return  m_arrSampleTypes; }


	public:
		// 添加分析样本信息
		CSampleType* AppendSampleType(const U32 nID, const bool nEnable, const char* lpName, const U32 nEndpoint);

	public:
		virtual void Serialize(CJSONSerializer& refJsonSerializer) const override;

		virtual void DeSerialize(CJSONSerializer& refJsonSerializer) override;

	private:
		DECLARE_MEMBER_AND_METHOD(U32, m_nID, ID)
		DECLARE_MEMBER_AND_METHOD(std::string, m_strName, Name)
		DECLARE_MEMBER_AND_METHOD(U32, m_nProtocol, Protocol)
		CSampleTypeArray         m_arrSampleTypes;
	};

	typedef CDynamicJsonVector<CStrategyGroup>              CStrategyGroupArray;


	/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// <summary>
/// 探头配置信息
/// </summary>
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	class CSensorDetectionConfig :public CSerializeEntry
	{
	public:
		CSensorDetectionConfig()
			: m_nClientID(0)
			, m_arrSeverity(true)
			, m_arrResponseScheme(true)
			, m_arrStrategyGroup(true)
			, m_arrPatternFormat(true)
			, m_arrOptionType(true)
			, m_arrActionType(true)
			, m_arrBlockModes(true)
			, m_arrOptoinOperator(true)
			, m_arrGroupID2Protocol(true)
		{}
		~CSensorDetectionConfig() {}

		ENABLE_SERIALIZE(CSensorDetectionConfig)


	public:
		CID2DescInfoArray& GetSeverity() { return m_arrSeverity; }
		CID2DescInfoArray& GetResponseScheme() { return m_arrResponseScheme; }
		CStrategyGroupArray& GetStrategyGroup() { return m_arrStrategyGroup; }
		CID2DescInfoArray& GetrPatternFormat() { return m_arrPatternFormat; }         ///< 模式格式
		CID2DescInfoArray& GetOptionType() { return m_arrOptionType; }               ///< 选项类型信息
		CID2DescInfoArray& GetActionType() { return m_arrActionType; }           ///< 活动类型信息
		CID2DescInfoArray& GetBlockModes() { return m_arrBlockModes; }            ///< 通信会话阻断类型信息
		CID2DescInfoArray& GetOptoinOperator() { return m_arrOptoinOperator; }         ///< 选项操作类型信息
		CInt2IntArray& GetGroupID2Protocol() { return m_arrGroupID2Protocol; }     ///< 组id与协议影射



	public:
		// 增加严重程度
		bool AppendSeverity(const I32 nID, const char* lpName);

		// 查找严重程度等级
		CID2DescInfo* LookupSeverity(const I32 nID);

		// 增加响应方案
		bool AppendResponseScheme(const I32 nID, const char* lpName);

		// 查找响应方案
		CID2DescInfo* LookupResponseScheme(const I32 nID);

		// 添加策略组信息
		CStrategyGroup* AppendStrategyGroup(const U32 nID,const char* lpName,const U32 nProtocol);

		// 添加策略组信息
		CStrategyGroup* LookupStrategyGroup(const U32 nID);

		// 增加匹配模式格式
		bool AppendPatternFormat(const I32 nID, const char* lpName);

		// 查找模式格式信息
		CID2DescInfo* LookupPatternFormat(const I32 nID);

		// 增加选项类型
		bool AppendOptionType(const I32 nID, const char* lpName, const char* lpDesc);

		// 增加活动类型
		bool AppendActionType(const I32 nID, const char* lpName);

		// 增加阻断类型
		bool AppendBlockMode(const I32 nID, const char* lpName);

		// 增加选项操作类型信息
		bool AppendOptoinOperator(const I32 nID, const char* lpName);

		// 增加组ID于协议隐射
		void AppendGroupID2Protocol(const I64 nProtocol, const I32 nGroupID);

		// 通过协议获取组ID
		U32 GetGroupIDbyProtocol(const U32 nProtocol);

	public:
		virtual void Serialize(CJSONSerializer& refJsonSerializer) const override;

		virtual void DeSerialize(CJSONSerializer& refJsonSerializer) override;

	private:
		DECLARE_MEMBER_AND_METHOD(I32, m_nClientID, ClientID)  ///< 客户端ID
		CID2DescInfoArray          m_arrSeverity;              ///< 严重程度信息
		CID2DescInfoArray          m_arrResponseScheme;        ///< 响应方案信息
		CStrategyGroupArray        m_arrStrategyGroup;         ///< 策略组信息
		CID2DescInfoArray          m_arrPatternFormat;         ///< 模式格式
		CID2DescInfoArray          m_arrOptionType;            ///< 选项类型信息
		CID2DescInfoArray          m_arrActionType;            ///< 活动类型信息
		CID2DescInfoArray          m_arrBlockModes;            ///< 通信会话阻断类型信息
		CID2DescInfoArray          m_arrOptoinOperator;        ///< 选项操作类型信息
		CInt2IntArray              m_arrGroupID2Protocol;      ///< 组id与协议影射

	};

	/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// <summary>
/// 设备记录
/// </summary>
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	class CNetDeviceEntry :public CSerializeEntry
	{
	public:
		CNetDeviceEntry();
		CNetDeviceEntry(const char* lpName, const char* lpCode, const char* lpMACs, const char* lpIPs);
		virtual ~CNetDeviceEntry();
		ENABLE_SERIALIZE(CNetDeviceEntry)
	public:

		// 查找访问地址
		bool LookupAccessAddr(const U32 nIP);

		// 添加访问地址
		void AppendAccessAddr(const char* lpIP);

	public:
		virtual void Serialize(CJSONSerializer& refJsonSerializer) const override;

		virtual void DeSerialize(CJSONSerializer& refJsonSerializer) override;

	private:
		DECLARE_MEMBER_AND_METHOD(std::string, m_strName, Name);     ///< 名称
		DECLARE_MEMBER_AND_METHOD(std::string, m_strCode, Code);     ///< 编码
		DECLARE_MEMBER_AND_METHOD(std::string, m_strMACs, MACs);     ///< 设备的mac地址,可以是多个
		DECLARE_MEMBER_AND_METHOD(std::string, m_strIPs, IPs);       ///< 设备的IP地址,可以是多个
		DECLARE_MEMBER_AND_METHOD(std::string, m_strNet, Net);       ///< 所属的网络
		DECLARE_MEMBER_AND_METHOD(U32, m_nType, Type);   ///< 类型
		DECLARE_MEMBER_AND_METHOD(U32, m_nStatus, Status);   ///< 设备
		DECLARE_MEMBER_AND_METHOD(std::string, m_strBrand, Brand);       ///< 品牌及设备型号
		DECLARE_MEMBER_AND_METHOD(std::string, m_strUses, Uses);       ///< 用途
		DECLARE_MEMBER_AND_METHOD(std::string, m_strPos, Pos);       ///< 位置
		DECLARE_MEMBER_AND_METHOD(std::string, m_strRackNum, RackNum);       ///< 机架号
		DECLARE_MEMBER_AND_METHOD(std::string, m_strOS, OS);       ///< 设备操作系统
		DECLARE_MEMBER_AND_METHOD(std::string, m_strMemo, Memo);       ///< 备注
		DECLARE_MEMBER_AND_METHOD(bool, m_bIsGateway, IsGateway);   ///< 类型
		DECLARE_MEMBER_AND_METHOD(std::string, m_strAccessAddr, AccessAddr);       ///< 允许访问的目标地址
	};

	typedef std::shared_ptr<CNetDeviceEntry>              CNetDevicePtr;
	typedef CSharedDynamicJsonVector<CNetDeviceEntry>              CNetDeviceArray;

	/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	/// <summary>
	/// 设备管理类
	/// </summary>
	/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	class CNetDeviceMgr :public CSerializeEntry
	{
	public:
		CNetDeviceMgr();
		virtual ~CNetDeviceMgr();
		CNetDeviceMgr(const CNetDeviceMgr& refSrc);
		CNetDeviceMgr& operator=(const CNetDeviceMgr& refSrc);
		ENABLE_SERIALIZE(CNetDeviceMgr)


	public:
		CNetDeviceArray& GetNetDevices() { return  m_arrNetDevices; }
	public:
		//  创建一个新的设备条目
		CNetDevicePtr CreateNetDevice(const char* lpName, const char* lpCode, const char* lpMACs, const char* lpIPs);

		// 删除指定的网络设备
		void RemoveNetDevice(CNetDevicePtr pNetDeviceEntryPtr);


		// 释放所有的网络设备信息
		void ClearNetDevice();

		// 根据序号得到指定的网络设备
		CNetDevicePtr GetNetDevice(const U32 nIndex);

		// 查找ip对应的设备
		CNetDevicePtr LookupNetDevice(const U32 nIP);

		// 导出网络设备信息
		bool ExportNetDevice(const std::string& strFile);

		// 导入网络设备信息
		bool ImportNetDevice(const std::string& strFile);

	public:
		virtual void Serialize(CJSONSerializer& refJsonSerializer) const override;

		virtual void DeSerialize(CJSONSerializer& refJsonSerializer) override;
	private:
		CNetDeviceArray      m_arrNetDevices;
	};

	/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// <summary>
/// 事件响应方案抽象接口类定义
/// </summary>
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	class CResponseScheme : public CSerializeEntry
	{
	public:
		CResponseScheme()
			:m_nID(0)
			, m_nResponseType(0)
			, m_nBlockType(0)
			, m_bIsDefault(false)
		{}
		virtual ~CResponseScheme() {}

		ENABLE_SERIALIZE(CResponseScheme)

	public:
		virtual void Serialize(CJSONSerializer& refJsonSerializer) const override;

		virtual void DeSerialize(CJSONSerializer& refJsonSerializer) override;

	public:
		DECLARE_MEMBER_AND_METHOD(unsigned int, m_nID, ID);             ///< ID of the response scheme.
		DECLARE_MEMBER_AND_METHOD(std::string, m_strName, Name);            ///< name of the response scheme.
		DECLARE_MEMBER_AND_METHOD(unsigned int, m_nResponseType, ResponseType);   ///< response type.
		DECLARE_MEMBER_AND_METHOD(unsigned int, m_nBlockType, BlockType);      ///< block type.
		DECLARE_MEMBER_AND_METHOD(bool, m_bIsDefault, IsDefault);          ///< flag is default
	}
	;

	typedef std::shared_ptr<CResponseScheme>              CResponseSchemePtr;
	typedef CSharedDynamicJsonVector<CResponseScheme>     CResponseSchemeArray;

#if(_MSC_VER >= 1700  || __GNUC__ > 3)
	/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// <summary>
/// 探头配置信息
/// </summary>
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	class CSensorGeneralConfig :public CSerializeEntry
	{
	public:
		CSensorGeneralConfig()
			: m_nClientID(0)
			, m_nIgnoreInternetIPGroup(false)
			, m_nIgnorePrivateIPGroup(false)
			, m_bModified(false)
			, m_nOfflineTimeThd(0)
			, m_nLongitude(0.0)
			, m_nLatitude(0.0)

		{}
		~CSensorGeneralConfig() {}

		ENABLE_SERIALIZE(CSensorGeneralConfig)

	public:
		CNodeGroupSettingsArray& GetNodeGroupSettings() { return m_arrNodeGroupSettings; }     ///< 节点组设置
		CResponseSchemeArray& GetResponseScheme() {	return m_arrResponseScheme;	}

	public:

		// 创建一个新的响应方案
		CResponseSchemePtr CreateResponseScheme(const char* lpName, unsigned int nResponseType, const unsigned int nBlockType);

		// 查找一个新的响应方案
		CResponseSchemePtr LookupResponseScheme(const unsigned int nID);

		// 删除一个新的响应方案
		void RemoveResponseScheme(const unsigned int nID);
	public:
		virtual void Serialize(CJSONSerializer& refJsonSerializer) const override;

		virtual void DeSerialize(CJSONSerializer& refJsonSerializer) override;

	private:		
		DECLARE_MEMBER_AND_METHOD(I32, m_nClientID, ClientID)  ///< 客户端ID
		DECLARE_MEMBER_AND_METHOD(bool, m_nIgnoreInternetIPGroup, IgnoreInternetIPGroup)  ///< 
		DECLARE_MEMBER_AND_METHOD(bool, m_nIgnorePrivateIPGroup, IgnorePrivateIPGroup)  ///<
		DECLARE_MEMBER_AND_METHOD(bool, m_bModified, Modified)  ///< 设置是否被修改

		// 邮件响应设置
		DECLARE_MEMBER_AND_METHOD(std::string, m_strSMTPServer, SMTPServer)  ///< 邮件服务器
		DECLARE_MEMBER_AND_METHOD(std::string, m_strSMTPAccount, SMTPAccount)  ///< 登录账号
		DECLARE_MEMBER_AND_METHOD(std::string, m_strSMTPPassword, SMTPPassword)  ///< 登录口令
		DECLARE_MEMBER_AND_METHOD(std::string, m_strSMTPReceivers, SMTPReceivers)  ///< 接收着
		DECLARE_MEMBER_AND_METHOD(std::string, m_strSMTPBody, SMTPBody)  ///< 邮件正文

		// 发送sys日志设置
		DECLARE_MEMBER_AND_METHOD(std::string, m_strSyslogIP, SyslogIP)  ///< syslog服务器地址
		DECLARE_MEMBER_AND_METHOD(unsigned int, m_nSyslogPort, SyslogPort)  ///< syslog服务器端口
		DECLARE_MEMBER_AND_METHOD(std::string, m_strSyslogMessage, SyslogMessage)  ///< 消息
		DECLARE_MEMBER_AND_METHOD(unsigned int, m_nSyslogFacility, SyslogFacility)  ///< 设备

		CNodeGroupSettingsArray    m_arrNodeGroupSettings;     ///< 节点组设置

		CResponseSchemeArray       m_arrResponseScheme;
		unsigned int               m_nNextResponseSchemeID = 0;  ///< 下一个方案id


		DECLARE_MEMBER_AND_METHOD(unsigned int, m_nOfflineTimeThd, OfflineTimeThd);   ///< 设备离线时间阀值(单位:秒)
		DECLARE_MEMBER_AND_METHOD(std::string, m_strLocal, Local);   ///< 探头位置
		DECLARE_MEMBER_AND_METHOD(double, m_nLongitude, Longitude);  ///< 经度
		DECLARE_MEMBER_AND_METHOD(double, m_nLatitude, Latitude);    ///< 纬度

		DECLARE_MEMBER_AND_METHOD(std::string, m_strPwd, Pwd);     ///< 登录探头口令
		DECLARE_MEMBER_AND_METHOD(std::string, m_strName, Name);   ///< 探头名称

	};




	class CStatCounter;
	typedef std::shared_ptr<CStatCounter>                CStatCounterPtr;
	typedef CSharedDynamicJsonVector<CStatCounter>             CStatCounterArray;


	/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// <summary>
/// 统计计数器
/// </summary>
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	class CStatCounter :public CSerializeEntry
	{
	public:
		CStatCounter()
			: m_nFirstValueTotal(0)
			, m_nSecondValueTotal(0)
			, m_nData(0)
		{
		}

		CStatCounter(const std::string& strId
			, const std::string& strDisplayName
			, const I64 nFirstValueTotale
			, const I64 nSecondValueTotal
			, const unsigned int nData)
			: m_strId(strId)
			, m_strDisplayName(strDisplayName)
			, m_nFirstValueTotal(nFirstValueTotale)
			, m_nSecondValueTotal(nSecondValueTotal)
			, m_nData(nData)
		{
		}


		~CStatCounter()
		{
		}
		ENABLE_SERIALIZE(CStatCounter)

	public:
		CStatCounterArray& GetChilds() { return  m_arrChild; }


	public:
		// 添加一个子计数器
		CStatCounterPtr CreateChild(const std::string& strId, const std::string& strDisplayName, const I64 nFirstValueTotale, const I64 nSecondValueTotal, const unsigned int nData);

		// 汇总
		void Sum();

	public:
		virtual void Serialize(CJSONSerializer& refJsonSerializer) const override;

		virtual void DeSerialize(CJSONSerializer& refJsonSerializer) override;

	private:	
		DECLARE_MEMBER_AND_METHOD(std::string, m_strId, Id)
		DECLARE_MEMBER_AND_METHOD(std::string, m_strDisplayName, Name)
		DECLARE_MEMBER_AND_METHOD(I64, m_nFirstValueTotal, FirstValueTotal);            ///< 第一统计值
		DECLARE_MEMBER_AND_METHOD(I64, m_nSecondValueTotal, SecondValueTotal);           ///< 第二统计值
		DECLARE_MEMBER_AND_METHOD(unsigned int, m_nData, Data)

		CStatCounterArray         m_arrChild;
	};

	/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	/// <summary>
	/// 统计表快照
	/// </summary>
	/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	class CStatTableSnapshot :public CSerializeEntry
	{
	public:
		CStatTableSnapshot()
		{
		}

		~CStatTableSnapshot()
		{
		}
		ENABLE_SERIALIZE(CStatTableSnapshot)

	public:
		CStatCounterArray& GetChilds() { return  m_arrChild; }


	public:
		// 添加一个子计数器组
		CStatCounterPtr CreateChildGroup(const std::string& strDisplayName);

		void Clear() { m_arrChild.clear(); }

		// 汇总
		void Sum();

	public:
		virtual void Serialize(CJSONSerializer& refJsonSerializer) const override;

		virtual void DeSerialize(CJSONSerializer& refJsonSerializer) override;

	private:
		DECLARE_MEMBER_AND_METHOD(std::string, m_strName, Name)
		CStatCounterArray         m_arrChild;
	};

	class CEventLog :public CSerializeEntry
	{
	public:
		CEventLog(unsigned int nStrategyID = 0)
			: m_nSeverity(0)
			, m_nTime(0)
			, m_nProtocol(0)
			, m_nIP1(0)
			, m_nPort1(0)
			, m_nIP2(0)
			, m_nPort2(0)
			, m_nStrategyID(nStrategyID)
			, m_nGroupID(0)
		{
		}

		ENABLE_SERIALIZE(CEventLog)


		CEventLog(const CEventLog& refSrc);

		CEventLog& operator=(const CEventLog& refSrc);

	public:
		virtual void Serialize(CJSONSerializer& refJsonSerializer) const override;

		virtual void DeSerialize(CJSONSerializer& refJsonSerializer) override;

	protected:
		DECLARE_MEMBER_AND_METHOD(unsigned int, m_nSeverity, Severity)
		DECLARE_MEMBER_AND_METHOD(int64_t, m_nTime, Time)
		DECLARE_MEMBER_AND_METHOD(unsigned int, m_nProtocol, Protocol)
		DECLARE_MEMBER_AND_METHOD(std::string, m_strMessage, Message)
		DECLARE_MEMBER_AND_METHOD(unsigned int, m_nIP1, IP1)
		DECLARE_MEMBER_AND_METHOD(unsigned int, m_nPort1, Port1)
		DECLARE_MEMBER_AND_METHOD(unsigned int, m_nIP2, IP2)
		DECLARE_MEMBER_AND_METHOD(unsigned int, m_nPort2, Port2)
		DECLARE_MEMBER_AND_METHOD(std::string, m_strMac1, Mac1)
		DECLARE_MEMBER_AND_METHOD(std::string, m_strMac2, Mac2)
		DECLARE_MEMBER_AND_METHOD(unsigned int, m_nStrategyID, StrategyID)    ///< 诊断策略ID
		DECLARE_MEMBER_AND_METHOD(unsigned int, m_nGroupID, GroupID)
	};


	typedef std::shared_ptr<CEventLog>               CEventLogPtr;
	typedef CSharedDynamicJsonVector<CEventLog>      CEventLogArray;
	typedef std::deque<CEventLogPtr>                 CEventLogQueue;


	/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	/// <summary>
	/// 检测事件过滤器
	/// </summary>
	/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	class CEventLogFilter :public CSerializeEntry
	{
	public:
		CEventLogFilter()
			: m_nSeverity(-1)
			, m_nGroupID(-1)
			, m_nStrategyID(-1)
		{}
		~CEventLogFilter()
		{}
		ENABLE_SERIALIZE(CEventLogFilter)

	public:
		virtual void Serialize(CJSONSerializer& refJsonSerializer) const override;

		virtual void DeSerialize(CJSONSerializer& refJsonSerializer) override;

	protected:
		DECLARE_MEMBER_AND_METHOD(int, m_nSeverity, Severity)              
		DECLARE_MEMBER_AND_METHOD(int, m_nGroupID, GroupID)
		DECLARE_MEMBER_AND_METHOD(int, m_nStrategyID, StrategyID)    ///< 诊断策略ID
	};


	/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// <summary>
/// 本地ip节点信息
/// </summary>
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	class CLocalIPNode :public CSerializeEntry
	{
	public:
		CLocalIPNode()
			: m_nIP(0)
			, m_bAbnormal(true)
			, m_nMac(0)
			, m_nType(DT_COMPUTER)
			, m_nStatus(DS_ONLINE)
			, m_bGateway(false)
		{}
		~CLocalIPNode()
		{}
		ENABLE_SERIALIZE(CLocalIPNode)

	public:
		virtual void Serialize(CJSONSerializer& refJsonSerializer) const override;

		virtual void DeSerialize(CJSONSerializer& refJsonSerializer) override;

	protected:
		DECLARE_MEMBER_AND_METHOD(unsigned int, m_nIP, IP)
		DECLARE_MEMBER_AND_METHOD(bool, m_bAbnormal, Abnormal)
		DECLARE_MEMBER_AND_METHOD(std::string, m_strOS, OS)    ///< 诊断策略ID
		DECLARE_MEMBER_AND_METHOD(uint64_t, m_nMac, Mac)    ///< 诊断策略ID
		DECLARE_MEMBER_AND_METHOD(std::string, m_strName, Name);     ///< 名称
		DECLARE_MEMBER_AND_METHOD(std::string, m_strCode, Code);     ///< 编码
		DECLARE_MEMBER_AND_METHOD(std::string, m_strNet, Net);       ///< 所属的网络
		DECLARE_MEMBER_AND_METHOD(U32, m_nType, Type);   ///< 类型
		DECLARE_MEMBER_AND_METHOD(U32, m_nStatus, Status);   ///< 设备
		DECLARE_MEMBER_AND_METHOD(std::string, m_strBrand, Brand);       ///< 品牌及设备型号
		DECLARE_MEMBER_AND_METHOD(std::string, m_strUses, Uses);       ///< 用途
		DECLARE_MEMBER_AND_METHOD(std::string, m_strPos, Pos);       ///< 位置
		DECLARE_MEMBER_AND_METHOD(std::string, m_strRackNum, RackNum);       ///< 机架号
		DECLARE_MEMBER_AND_METHOD(std::string, m_strMemo, Memo);       ///< 备注
		DECLARE_MEMBER_AND_METHOD(bool, m_bGateway, Gateway)       ///< 网关
	};


	typedef std::shared_ptr<CLocalIPNode>               CLocalIPNodePtr;
	typedef CSharedDynamicJsonVector<CLocalIPNode>      CLocalIPNodeArray;

	class CLocalIPNodeGroup;
	typedef std::shared_ptr<CLocalIPNodeGroup>               CLocalIPNodeGroupPtr;
	typedef CSharedDynamicJsonVector<CLocalIPNodeGroup>      CLocalIPNodeGroupArray;


	/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	/// <summary>
	/// 本地节点组
	/// </summary>
	/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	class CLocalIPNodeGroup :public CSerializeEntry
	{
	public:
		CLocalIPNodeGroup()
			: m_bGateway(0)
		{}
		~CLocalIPNodeGroup()
		{}
		ENABLE_SERIALIZE(CLocalIPNodeGroup)

	public:
		
		CLocalIPNodeArray& GetChildIPNodes() { return m_arrChildIPNode; }
		
		CLocalIPNodeGroupArray& GetChildGroup() { return m_arrChildGroup; }


	public:
		// 创建一个新的ip节点组
		CLocalIPNodePtr CreaterChildIPNode(const unsigned int nIP, const bool bAbnormal, const std::string& strOS, const uint64_t nMac);

		// 创建一个子组
		CLocalIPNodeGroupPtr CreaterChildGroup();
		
	public:
		virtual void Serialize(CJSONSerializer& refJsonSerializer) const override;

		virtual void DeSerialize(CJSONSerializer& refJsonSerializer) override;

	protected:		
		DECLARE_MEMBER_AND_METHOD(std::string, m_strName, Name)    ///< 名字
		DECLARE_MEMBER_AND_METHOD(bool, m_bGateway, Gateway)       ///< 网关
		CLocalIPNodeArray    m_arrChildIPNode;
		CLocalIPNodeGroupArray   m_arrChildGroup;

	};


	/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	/// <summary>
	/// 国家或地区的事件统计
	/// </summary>
	/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	class CRegionEventStat :public CSerializeEntry
	{
	public:
		CRegionEventStat()
			: m_nLongitude(0.0)
			, m_nLatitude(0.0)
			, m_nEvents(0)
		{}
		ENABLE_SERIALIZE(CRegionEventStat)

	public:
		void IncreaseEvents() { m_nEvents++; }
	public:
		virtual void Serialize(CJSONSerializer& refJsonSerializer) const override;

		virtual void DeSerialize(CJSONSerializer& refJsonSerializer) override;
	private:
		DECLARE_MEMBER_AND_METHOD(std::string, m_strName, Name);                 ///< 地区名称
		DECLARE_MEMBER_AND_METHOD(double, m_nLongitude, Longitude);  ///< 经度
		DECLARE_MEMBER_AND_METHOD(double, m_nLatitude, Latitude);    ///< 纬度
		DECLARE_MEMBER_AND_METHOD(U32, m_nEvents, Events);            ///< 事件
	};

	typedef std::shared_ptr<CRegionEventStat>              CRegionEventStatPtr;
	typedef CSharedDynamicJsonVector<CRegionEventStat>     CRegionEventStatArray;
	typedef std::map<unsigned int,CRegionEventStatPtr>     CRegionEventStatMap;

#endif
	
}



