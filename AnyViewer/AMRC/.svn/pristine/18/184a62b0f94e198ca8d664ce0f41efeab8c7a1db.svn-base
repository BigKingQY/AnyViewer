///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// @file  LVNCEndpoint.h
/// @brief 本地VNC端点类定义
/// 
/// @author 黄丽云
/// @version 1.0
/// @date        2021-1-21
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#pragma once
#include "NetServiceImpl.h"
#include "LVNCDataPacket.h"
#include "ECC.h"
#include "LVNCProtocol.h"
#include "Dimension.h"
#include "PixelFormat.h"
#include "Point.h"
#include "CursorShape.h"

#include <boost/timer.hpp>

class CFrameBuffer;


class CLVNCEndpoint : public CNetEndpoint< CLVNCDataPacket, CNetTCPDataTransfer, CLVNCDataPacket::PACKET_LEN_MAX>
{
public:
	CLVNCEndpoint(CNetEndpointEventSink* pNetEndpointEventSink);

	virtual ~CLVNCEndpoint();

public:
	virtual bool Send(CNetPacket* pPacket) override;

public:
	// 发送通用请求消息
	bool SendCommonRequest(UINT nMsg, U64 nStatus = 0);

	// 发送通用应答消息
	bool SendCommonResponse(CLVNCDataPacket* pDataPacket, const BOOL bStatus,const U64 nCode);

	// 发送帧缓冲区属性
	bool SendFrameProperty(const UINT nMsg, const U8 nFlag, const CSize& refDim, const CPixelFormat& refPixelFormat);

	// 发送鼠标事件
	bool SendMouseEvent(const Point *pNewPos, const UINT8 nKeyFlag);

	// 发送新的剪贴板消息
	bool SendNewClipboard(const std::string & refCutText);

	// 发送键盘事件
	bool SendKeyboardEvent(const UINT32 nKeySym, const bool bDown);
	
	// 发送区域
	bool SendRegion(const UINT nMsg, const CRegion *pRegion);

	// 发送区域变化消息
	bool SendRegionChanged(const CFrameBuffer *pFrameBuffer, const CRegion& refRegion, CLVNCDataPacket& refRequestPacket);

	// 发送被拷贝的区域
	bool SendRegionCopied(const Point& ptPos,const CFrameBuffer *pFrameBuffer, const Rect& refRect, CLVNCDataPacket& refRequestPacket);

	// 发送光标新的位置
	bool SendCursorPosChanged(const Point& ptPos);

	// 发送光标形状改变
	bool SendCursorShapeChanged(const CCursorShape& refCursorShape);
	
};


using CLVNCEndpointPtr = std::shared_ptr<CLVNCEndpoint>;
