/////////////////////////////////////////////////////////////////////
/// @file XMLConfig.h
/// @brief xml格式文件操作类实现
/// 
/// @author andy
/// @version 1.0
/// @date 2021.5.10
/////////////////////////////////////////////////////////////////////
#pragma once

#include "stdafx.h"
#include "XMLConfig.h"
#include <boost/filesystem.hpp>
#include <boost/foreach.hpp>

#include <iostream> 

CXMLConfig::CXMLConfig()
{
}

CXMLConfig::~CXMLConfig()
{
}


// ********************************************************************************
/// <summary>
/// 加载配置信息
/// </summary>
/// <param name="strPath">文件路劲</param>
/// <returns>true:成功，false:失败</returns>
/// <created>Andy,2021/3/18</created>
/// <changed>Andy,2021/3/18</changed>
// ********************************************************************************
bool CXMLConfig::Load(std::string strPath)
{
	bool bResult = false;

	try
	{
		boost::filesystem::path objPath(strPath.c_str());

		// 调用boost 文件系统接口，先检查文件是否存在。

		if (boost::filesystem::exists(strPath))
		{
			// 调用read_ini接口，将ini文件内容读入 m_pRootNode树节点中。
			// root_node类型为：boost::property_tree::ptree

			m_pRootNode.empty();

			boost::property_tree::xml_parser::read_xml(strPath, m_pRootNode);
			bResult = (m_pRootNode.size() > 0);
		}
	}
	catch (std::exception e)
	{
		LOG_ERROR("%s", e.what());
	}

	return bResult;
}

// ********************************************************************************
/// <summary>
/// 保存配置信息
/// </summary>
/// <param name="strPath">文件路劲</param>
/// <returns>true:成功，false:失败</returns>
/// <created>Andy,2021/3/18</created>
/// <changed>Andy,2021/3/18</changed>
// ********************************************************************************
bool CXMLConfig::Save(std::string strPath)
{
	boost::property_tree::xml_parser::write_xml(strPath, m_pRootNode);

	return true;
}

// ********************************************************************************
/// <summary>
/// 递归扫描所有的子节点
/// </summary>
/// <param name="fnCallback">指向回调函数的指针</param>
/// <created>Andy,2021/5/11</created>
/// <changed>Andy,2021/5/11</changed>
// ********************************************************************************
void CXMLConfig::ScanNode(ScaningCallback fnCallback)
{
	DoScanNode(m_pRootNode, fnCallback);
}


// ********************************************************************************
/// <summary>
/// 执行扫描动作
/// </summary>
/// <param name="refNode">当前扫描的节点</param>
/// <param name="fnCallback">指向回调函数的指针</param>
/// <created>Andy,2021/5/11</created>
/// <changed>Andy,2021/5/11</changed>
// ********************************************************************************
void CXMLConfig::DoScanNode(boost::property_tree::ptree& refNode, ScaningCallback fnCallback)
{
	BOOST_FOREACH(boost::property_tree::ptree::value_type & refChild, refNode)
	{		
		if (refChild.first != "<xmlattr>")
		{	
			//如果当前节点不是属性
			const bool bSuccess = fnCallback(refChild.second);

			if (!bSuccess)
			{
				break;
			}

			if (!refChild.second.empty())
			{					
				DoScanNode(refChild.second, fnCallback);
			}			
		}

	}
}
