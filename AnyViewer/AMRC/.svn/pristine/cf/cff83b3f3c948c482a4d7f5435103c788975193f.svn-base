/******************************************************************************
* 
* SaxListCtrl
* Version
* Copyright (C) 2007 Ax3soft Co., Ltd.
* All Rights Reserved
* $Header: /cvsdata/vc/Common/GeneralFunctions.h,v 1.17 2014/12/13 01:42:27 administrator Exp $
* 
*******************************************************************************
* 
* Description:General functions define,Dependent MFC library
******************************************************************************/
#include "stdafx.h"
#include "Ax3LogProtocol.h"
#include "StrIPRange.h"
#include "JsonHelper.h"

#ifdef WIN32
#ifdef _DEBUG
#define new DEBUG_NEW
#undef THIS_FILE
static char THIS_FILE[] = __FILE__;
#endif
#endif

const char AGGREGATIONS_TAG[] = "aggregations";
const char RESULT_TAG[] = "result";
const char BUCKETS_TAG[] = "buckets";

namespace Ax3LP
{

	const char* NET_DEVICE_DATA_UUID = "EBD6FCBE-47F3-4875-B62A-22F56580526A";
	const UINT NET_DEVICE_DATA_VERSION = 1;
	const char* NET_DEVICE_DATA_DESC = "Net device list";


	REGISTER_CLASS(CBaseAccountInfo)
		REGISTER_CLASS(CEventStatbySeverity)
		REGISTER_CLASS(CSummaryInfo)
		REGISTER_CLASS(CLogDiscerningReponseMode)
		REGISTER_CLASS(CLogDiscerningRule)
		REGISTER_CLASS(CLogEvent)
		REGISTER_CLASS(CLogModel)
		REGISTER_CLASS(CHostInfo)
		REGISTER_CLASS(CSensorInfo)
		REGISTER_CLASS(CSensorSummaryInfo)
		REGISTER_CLASS(CID2DescInfo)
		REGISTER_CLASS(CSensorDetectionConfig)
		REGISTER_CLASS(CSampleType)
		REGISTER_CLASS(CStrategyGroup)
		REGISTER_CLASS(CNetDeviceEntry)
		REGISTER_CLASS(CNetDeviceMgr)
		REGISTER_CLASS(CResponseScheme)
		
#if(_MSC_VER >= 1700  || __GNUC__ > 3)
		REGISTER_CLASS(CSensorGeneralConfig)
		REGISTER_CLASS(CStatCounter)
		REGISTER_CLASS(CStatTableSnapshot)
		REGISTER_CLASS(CEventLog)
		REGISTER_CLASS(CLocalIPNode)
		REGISTER_CLASS(CLocalIPNodeGroup)
		REGISTER_CLASS(CRegionEventStat)
#endif

		const STATUS_CODE_DESC StatusCodeDescItem[] =
	{
		{ ES_SUCCESS, "成功"},
		{ ES_INVALID_ACCOUNT, "用户名或密码错误"},
		{ ES_CREATE_ACCOUNT_FAILED, "创建账号失败"},
		{ ES_INVALID_NAME, "用户名或密码错误"} ,
		{ ES_EXIST_NAME, "账号已存在" },
		{ ES_INVALID_PASSWD, "用户名或密码错误"},
		{ ES_REPEAT_LOGIN, "重复登录" },
		{ ES_TIME_OUT, "等待超时"},
		{ ES_NOT_LOGGED_IN,"未登录" },
		{ ES_NOT_FOUND_TRANS, "没有找到指定事务" },
		{ ES_RETRANSFER, "传输数据失败" },
		{ ES_ALLOCATE_TRANS_UNSUCCESSFULLY, "分配事务上下文失败" },
		{ ES_OPEN_FILE_UNSUCCESSFULLY, "打开文件失败" },
		{ ES_SERVICE_ERR, "服务器错误" },
		{ ES_SEND_FAILED, "发送数据失败" },
		{ ES_UNKNOWN_ERR, "未知错误" },
		{ ES_INVALID_IP, "无效IP" },		
	};

	std::string GetStatusCodeDesc(EXCEPTION_STATUS nStatusCode)
	{
		std::string strResult("未知错误");
		const int nCount = sizeof(StatusCodeDescItem) / sizeof(StatusCodeDescItem[0]);

		for (int i = 0; i < nCount; ++i)
		{
			if (nStatusCode == EXCEPTION_STATUS(StatusCodeDescItem[i].m_nStatusCode))
			{
				strResult = StatusCodeDescItem[i].m_strDesc;
				break;
			}
		}

		return strResult;
	}




	/*--------------------------CBaseAccountInfo--------------------------------*/
	CBaseAccountInfo::CBaseAccountInfo(const char* pName)
		: CSerializeEntry()
		, m_nType(0)
		, m_strName(pName)
	{
	}

	CBaseAccountInfo::~CBaseAccountInfo()
	{

	}

	CBaseAccountInfo::CBaseAccountInfo(const CBaseAccountInfo & refBaseAccountInfo)
		: m_nID(refBaseAccountInfo.m_nID)
		, m_strAccount(refBaseAccountInfo.m_strAccount)
		, m_nType(refBaseAccountInfo.m_nType)
		, m_strName(refBaseAccountInfo.m_strName)
		, m_strMemo(refBaseAccountInfo.m_strMemo)
	{
	}

	CBaseAccountInfo & CBaseAccountInfo::operator=(const CBaseAccountInfo & refBaseAccountInfo)
	{
		if (this == &refBaseAccountInfo)
		{
			return *this;
		}

		m_nID = refBaseAccountInfo.m_nID;
		m_strAccount = refBaseAccountInfo.m_strAccount;
		m_strName = refBaseAccountInfo.m_strName;
		m_nType = refBaseAccountInfo.m_nType;
		m_strMemo = refBaseAccountInfo.m_strMemo;

		return *this;
	}

	void CBaseAccountInfo::Serialize(CJSONSerializer& refJsonSerializer) const
	{
		CSerializeEntry::Serialize(refJsonSerializer);

		refJsonSerializer.Serialize("m1", m_nID);
		refJsonSerializer.Serialize("m2", m_strAccount);
		refJsonSerializer.Serialize("m3", m_strName);
		refJsonSerializer.Serialize("m4", m_nType);
		refJsonSerializer.Serialize("m5", m_strMemo);
	}

	void CBaseAccountInfo::DeSerialize(CJSONSerializer& refJsonSerializer)
	{
		CSerializeEntry::DeSerialize(refJsonSerializer);

		refJsonSerializer.DeSerialize("m1", m_nID);
		refJsonSerializer.DeSerialize("m2", m_strAccount);
		refJsonSerializer.DeSerialize("m3", m_strName);
		refJsonSerializer.DeSerialize("m4", m_nType);
		refJsonSerializer.DeSerialize("m5", m_strMemo);
	}

	CAccountInfo::CAccountInfo(const char* pName, const char* pPwd)
		: CBaseAccountInfo(pName)
		, m_strPWD(pPwd)
		, m_strTel("")
		, m_strCompany("")
		, m_strEmail("")
		, m_strWeb("")
		, m_strAddr("")
		, m_nMoney(0)
		, m_nIP(0)
	{
	}

	CAccountInfo::CAccountInfo(const CAccountInfo & refAccountInfo)
		:CBaseAccountInfo(refAccountInfo)
		, m_strPWD(refAccountInfo.m_strPWD)
		, m_strTel(refAccountInfo.m_strTel)
		, m_strCompany(refAccountInfo.m_strCompany)
		, m_strEmail(refAccountInfo.m_strEmail)
		, m_strWeb(refAccountInfo.m_strWeb)
		, m_strAddr(refAccountInfo.m_strAddr)
		, m_nMoney(refAccountInfo.m_nMoney)
		, m_strMachineID(refAccountInfo.m_strMachineID)
		, m_nIP(refAccountInfo.m_nIP)
	{
	}

	CAccountInfo & CAccountInfo::operator=(const CAccountInfo & refAccountInfo)
	{
		if (this == &refAccountInfo)
		{
			return *this;
		}

		CBaseAccountInfo::operator=(refAccountInfo);

		m_strPWD = refAccountInfo.m_strPWD;
		m_strTel = refAccountInfo.m_strTel;
		m_strCompany = refAccountInfo.m_strCompany;
		m_strEmail = refAccountInfo.m_strEmail;
		m_strWeb = refAccountInfo.m_strWeb;
		m_strAddr = refAccountInfo.m_strAddr;
		m_strMemo = refAccountInfo.m_strMemo;
		m_nMoney = refAccountInfo.m_nMoney;
		m_strMachineID = refAccountInfo.m_strMachineID;
		m_nIP = refAccountInfo.m_nIP;

		return *this;
	}

	void CAccountInfo::Serialize(CJSONSerializer& refJsonSerializer) const
	{
		CBaseAccountInfo::Serialize(refJsonSerializer);

		refJsonSerializer.Serialize("m11", m_strPWD);
		refJsonSerializer.Serialize("m12", m_strTel);
		refJsonSerializer.Serialize("m13", m_strCompany);
		refJsonSerializer.Serialize("m14", m_strEmail);
		refJsonSerializer.Serialize("m15", m_strWeb);
		refJsonSerializer.Serialize("m16", m_strAddr);
		refJsonSerializer.Serialize("m18", m_nMoney);
		refJsonSerializer.Serialize("m19", m_strMachineID);
		refJsonSerializer.Serialize("m20", m_nIP);
		refJsonSerializer.Serialize("m21", m_strUnionid);
		refJsonSerializer.Serialize("m22", m_strNickname);
		refJsonSerializer.Serialize("m23", m_bSex);
	}

	void CAccountInfo::DeSerialize(CJSONSerializer& refJsonSerializer)
	{
		CBaseAccountInfo::DeSerialize(refJsonSerializer);

		refJsonSerializer.DeSerialize("m11", m_strPWD);
		refJsonSerializer.DeSerialize("m12", m_strTel);
		refJsonSerializer.DeSerialize("m13", m_strCompany);
		refJsonSerializer.DeSerialize("m14", m_strEmail);
		refJsonSerializer.DeSerialize("m15", m_strWeb);
		refJsonSerializer.DeSerialize("m16", m_strAddr);
		refJsonSerializer.DeSerialize("m18", m_nMoney);
		refJsonSerializer.DeSerialize("m19", m_strMachineID);
		refJsonSerializer.DeSerialize("m20", m_nIP);
		refJsonSerializer.DeSerialize("m21", m_strUnionid);
		refJsonSerializer.DeSerialize("m22", m_strNickname);
		refJsonSerializer.DeSerialize("m23", m_bSex);
	}


	/*------------------------CQuerySettings----------------------*/

	void CQuerySettings::Serialize(CJSONSerializer & refJsonSerializer) const
	{
		CSerializeEntry::Serialize(refJsonSerializer);

		refJsonSerializer.Serialize("m11", m_nBeginTime);
		refJsonSerializer.Serialize("m12", m_nEndTime);
		refJsonSerializer.Serialize("m13", m_nInterval);
		refJsonSerializer.Serialize("m14", m_strDSL);	
		refJsonSerializer.Serialize("m15", m_nLegitimacyType);
		refJsonSerializer.Serialize("m16", m_strKeywords);		
	}

	void CQuerySettings::DeSerialize(CJSONSerializer & refJsonSerializer)
	{
		CSerializeEntry::DeSerialize(refJsonSerializer);

		refJsonSerializer.DeSerialize("m11", m_nBeginTime);
		refJsonSerializer.DeSerialize("m12", m_nEndTime);
		refJsonSerializer.DeSerialize("m13", m_nInterval);
		refJsonSerializer.DeSerialize("m14", m_strDSL);
		refJsonSerializer.DeSerialize("m15", m_nLegitimacyType);
		refJsonSerializer.DeSerialize("m16", m_strKeywords);
	}

	/*------------------------CEventStatbySeverity----------------------*/
	CEventStatbySeverity::CEventStatbySeverity(
		 const int nInfo
		, const int nNotice
		, const int nWarning
		, const int nCritical
		, const int nDebug 
		, const int nError
		, const int nAlert 
		, const int nEmergency)
		: m_nDebug(nDebug)
		, m_nInfo(nInfo)
		, m_nNotice(nNotice)
		, m_nWarning(nWarning)
		, m_nError(nError)
		, m_nCritical(nCritical)
		, m_nAlert(nAlert)
		, m_nEmergency(nEmergency)
	{
	}

	CEventStatbySeverity::~CEventStatbySeverity()
	{
	}
	
	CEventStatbySeverity & CEventStatbySeverity::operator+=(const CEventStatbySeverity & reEventStat)
	{
		if (this == &reEventStat)
		{
			return *this;
		}

		m_strTitle += reEventStat.m_strTitle;
		m_nDebug += reEventStat.m_nDebug;
		m_nInfo += reEventStat.m_nInfo;
		m_nNotice += reEventStat.m_nNotice;
		m_nWarning += reEventStat.m_nWarning;
		m_nError += reEventStat.m_nError;
		m_nCritical += reEventStat.m_nCritical;
		m_nAlert += reEventStat.m_nAlert;
		m_nEmergency += reEventStat.m_nEmergency;

		return *this;
	}

	//--------------------------------------------------------------------------------
	/// <summary>
	/// 得到最大的事件数
	/// </summary>
	/// <returns></returns>
	/// <created>Andy,2020/4/11</created>
	/// <changed>Andy,2020/4/11</changed>
	//--------------------------------------------------------------------------------
	I64 CEventStatbySeverity::GetMaxEvents()
	{
		I64 nResult = GetDebug();

		if (nResult < GetInfo())
		{
			nResult = GetInfo();
		}

		if (nResult < GetNotice())
		{
			nResult = GetNotice();
		}

		if (nResult < GetWarning())
		{
			nResult = GetWarning();
		}

		if (nResult < GetError())
		{
			nResult = GetError();
		}

		if (nResult < GetCritical())
		{
			nResult = GetCritical();
		}

		if (nResult < GetAlert())
		{
			nResult = GetAlert();
		}

		if (nResult < GetEmergency())
		{
			nResult = GetEmergency();
		}

		return nResult;
	}


	void CEventStatbySeverity::Serialize(CJSONSerializer & refJsonSerializer) const
	{
		CSerializeEntry::Serialize(refJsonSerializer);

		refJsonSerializer.Serialize("m11", m_nDebug);
		refJsonSerializer.Serialize("m12", m_nInfo);
		refJsonSerializer.Serialize("m13", m_nNotice);
		refJsonSerializer.Serialize("m14", m_nWarning);
		refJsonSerializer.Serialize("m15", m_nError);
		refJsonSerializer.Serialize("m16", m_nCritical);
		refJsonSerializer.Serialize("m17", m_nAlert);
		refJsonSerializer.Serialize("m18", m_nEmergency);
		refJsonSerializer.Serialize("m19", m_strTitle);
	}


	void CEventStatbySeverity::DeSerialize(CJSONSerializer & refJsonSerializer)
	{
		CSerializeEntry::DeSerialize(refJsonSerializer);

		refJsonSerializer.DeSerialize("m11", m_nDebug);
		refJsonSerializer.DeSerialize("m12", m_nInfo);
		refJsonSerializer.DeSerialize("m13", m_nNotice);
		refJsonSerializer.DeSerialize("m14", m_nWarning);
		refJsonSerializer.DeSerialize("m15", m_nError);
		refJsonSerializer.DeSerialize("m16", m_nCritical);
		refJsonSerializer.DeSerialize("m17", m_nAlert);
		refJsonSerializer.DeSerialize("m18", m_nEmergency);
		refJsonSerializer.DeSerialize("m19", m_strTitle);
	}

	/*------------------------CSummaryInfo----------------------*/

	//--------------------------------------------------------------------------------
	/// <summary>
	/// 创建一个统计节点
	/// </summary>
	/// <param name="pTitle"></param>
	/// <param name="nInfo"></param>
	/// <param name="nNotice"></param>
	/// <param name="nWarning"></param>
	/// <param name="nCritical"></param>
	/// <returns></returns>
	/// <created>Andy,2020/4/8</created>
	/// <changed>Andy,2020/4/8</changed>
	//--------------------------------------------------------------------------------
	CEventStatbySeverity* CSummaryInfo::CreateEventStat(
		const std::string& strTitle
		, const int nInfo
		, const int nNotice
		, const int nWarning
		, const int nCritical
		, const int nDebug
		, const int nError
		, const int nAlert
		, const int nEmergency)
	{
		CEventStatbySeverity* pResult = new CEventStatbySeverity(
			nInfo
			, nNotice
			, nWarning
			, nCritical
			, nDebug
			, nError
			, nAlert
			, nEmergency);

		if (pResult)
		{
			pResult->SetTitle(strTitle);
			m_objTotal += *pResult;
			m_arrEventStatbySeverity.push_back(pResult);
		}

		return pResult;
	}


	void CSummaryInfo::Serialize(CJSONSerializer & refJsonSerializer) const
	{
		CSerializeEntry::Serialize(refJsonSerializer);

		refJsonSerializer.Serialize("m11", m_objTotal);
		refJsonSerializer.Serialize("m12", m_arrEventStatbySeverity);
		refJsonSerializer.Serialize("m13", m_arrEventStatbyHost);
		refJsonSerializer.Serialize("m14", m_arrEventStatbyName);
		refJsonSerializer.Serialize("m15", m_arrLast10Syslog);
	}


	void CSummaryInfo::DeSerialize(CJSONSerializer & refJsonSerializer)
	{
		CSerializeEntry::DeSerialize(refJsonSerializer);

		refJsonSerializer.DeSerialize("m11", m_objTotal);
		refJsonSerializer.DeSerialize("m12", m_arrEventStatbySeverity);
		refJsonSerializer.DeSerialize("m13", m_arrEventStatbyHost);
		refJsonSerializer.DeSerialize("m14", m_arrEventStatbyName);
		refJsonSerializer.DeSerialize("m15", m_arrLast10Syslog);
	}


	/*----------------------------------------------------------*/
	void CESErrorInfo::Serialize(CJSONSerializer & refJsonSerializer) const
	{
		CSerializeEntry::Serialize(refJsonSerializer);

		refJsonSerializer.Serialize("m11", m_nCode);
		refJsonSerializer.Serialize("m12", m_strMsg);

	}


	void CESErrorInfo::DeSerialize(CJSONSerializer & refJsonSerializer)
	{
		CSerializeEntry::DeSerialize(refJsonSerializer);

		refJsonSerializer.DeSerialize("m11", m_nCode);
		refJsonSerializer.DeSerialize("m12", m_strMsg);
	}


	/*-------------------------CLogDiscerningReponseMode---------------------------------*/
	void CLogDiscerningReponseMode::Serialize(CJSONSerializer & refJsonSerializer) const
	{
		CSerializeEntry::Serialize(refJsonSerializer);

		refJsonSerializer.Serialize("m11", m_bEnable);
		refJsonSerializer.Serialize("m12", m_nType);
		refJsonSerializer.Serialize("m13", m_strPara1);
		refJsonSerializer.Serialize("m14", m_nPara2);
	}


	void CLogDiscerningReponseMode::DeSerialize(CJSONSerializer & refJsonSerializer)
	{
		CSerializeEntry::DeSerialize(refJsonSerializer);

		refJsonSerializer.DeSerialize("m11", m_bEnable);
		refJsonSerializer.DeSerialize("m12", m_nType);
		refJsonSerializer.DeSerialize("m13", m_strPara1);
		refJsonSerializer.DeSerialize("m14", m_nPara2);
	}

	/*-------------------------- CLogDiscerningRule--------------------------------*/
	void  CLogDiscerningRule::Serialize(CJSONSerializer & refJsonSerializer) const
	{
		CSerializeEntry::Serialize(refJsonSerializer);

		refJsonSerializer.Serialize("m11", m_nID);
		refJsonSerializer.Serialize("m12", m_strName);
		refJsonSerializer.Serialize("m13", m_strPattern);
		refJsonSerializer.Serialize("m14", m_strMemo);
		refJsonSerializer.Serialize("m15", m_arrReponseMode);
	}


	void  CLogDiscerningRule::DeSerialize(CJSONSerializer & refJsonSerializer)
	{
		CSerializeEntry::DeSerialize(refJsonSerializer);

		refJsonSerializer.DeSerialize("m11", m_nID);
		refJsonSerializer.DeSerialize("m12", m_strName);
		refJsonSerializer.DeSerialize("m13", m_strPattern);
		refJsonSerializer.DeSerialize("m14", m_strMemo);
		refJsonSerializer.DeSerialize("m15", m_arrReponseMode);
	}

	//--------------------------------------------------------------------------------
	/// <summary>
	/// 初始化
	/// </summary>
	/// <created>Andy,2020/6/4</created>
	/// <changed>Andy,2020/6/4</changed>
	//--------------------------------------------------------------------------------
	void CLogDiscerningRule::Init()
	{
		CLogDiscerningReponseMode* pNewMode = new CLogDiscerningReponseMode(
		true, CLogDiscerningReponseMode::RM_HOST_IDENTIFICATION);

		m_arrReponseMode.push_back(pNewMode);

		pNewMode = new CLogDiscerningReponseMode(
			false, CLogDiscerningReponseMode::RM_LEGITIMACY_IDENTIFICATION);
		m_arrReponseMode.push_back(pNewMode);

		pNewMode = new CLogDiscerningReponseMode(
			false, CLogDiscerningReponseMode::RM_NOTIFY);
		m_arrReponseMode.push_back(pNewMode);
	}

	//--------------------------------------------------------------------------------
	/// <summary>
	/// 
	/// </summary>
	/// <created>Andy,2020/6/6</created>
	/// <changed>Andy,2020/6/6</changed>
	//--------------------------------------------------------------------------------
	void CLogDiscerningRule::SplitPattern()
	{
		SplitString(m_strPattern, m_arrPatterns);
	}

	/*CLogEvent*/
	CLogEvent::CLogEvent(unsigned int nSeverity, const char* pName)
		: m_nType(0)
		, m_nSeverity(nSeverity)
		, m_nCaptureTime(0)		
	{		
		if (nullptr != pName)
		{
			m_strName = (pName);
		}
	}


	CLogEvent::~CLogEvent()
	{
	}

	void CLogEvent::Serialize(CJSONSerializer & refJsonSerializer) const
	{
		CSerializeEntry::Serialize(refJsonSerializer);

		refJsonSerializer.Serialize("type", m_nType);
		refJsonSerializer.Serialize("severity", m_nSeverity);
		refJsonSerializer.Serialize("capture_time", m_nCaptureTime);
		refJsonSerializer.Serialize("name", m_strName);
		refJsonSerializer.Serialize("memo", m_strMemo);
	}

	void CLogEvent::DeSerialize(CJSONSerializer & refJsonSerializer)
	{
		CSerializeEntry::DeSerialize(refJsonSerializer);

		refJsonSerializer.DeSerialize("type", m_nType);
		refJsonSerializer.DeSerialize("severity", m_nSeverity);
		refJsonSerializer.DeSerialize("capture_time", m_nCaptureTime);
		refJsonSerializer.DeSerialize("name", m_strName);
		refJsonSerializer.DeSerialize("memo", m_strMemo);
	}


	void CLogModel::Serialize(CJSONSerializer & refJsonSerializer) const
	{
		CSerializeEntry::Serialize(refJsonSerializer);

		refJsonSerializer.Serialize("m11", m_strHost);
		refJsonSerializer.Serialize("m12", m_strModel);
		refJsonSerializer.Serialize("m13", m_strLog);
	}

	void CLogModel::DeSerialize(CJSONSerializer & refJsonSerializer)
	{
		CSerializeEntry::DeSerialize(refJsonSerializer);

		refJsonSerializer.DeSerialize("m11", m_strHost);
		refJsonSerializer.DeSerialize("m12", m_strModel);
		refJsonSerializer.DeSerialize("m13", m_strLog);
	}


	/*----------------------------CHostInfo------------------------------*/

	CHostInfo::CHostInfo(
		unsigned int ID /*= 0*/
		, const char* pIP/* = ""*/
		, const char* pName/* = ""*/)
		: m_nID(ID)
		, m_strIP(pIP)
		, m_strName(pName)
	{		
	}


	CHostInfo::~CHostInfo()
	{
	}


	void CHostInfo::Serialize(CJSONSerializer & refJsonSerializer) const
	{
		CSerializeEntry::Serialize(refJsonSerializer);

		refJsonSerializer.Serialize("m11", m_nID);
		refJsonSerializer.Serialize("m12", m_strIP);
		refJsonSerializer.Serialize("m13", m_strName);
	}

	void CHostInfo::DeSerialize(CJSONSerializer & refJsonSerializer)
	{
		CSerializeEntry::DeSerialize(refJsonSerializer);

		refJsonSerializer.DeSerialize("m11", m_nID);
		refJsonSerializer.DeSerialize("m12", m_strIP);
		refJsonSerializer.DeSerialize("m13", m_strName);
	}


	/*---------------------------CSensorInfo-------------------------------*/

	CSensorInfo::CSensorInfo(
		unsigned int ID /*= 0*/
		, const char* pIP/* = ""*/
		, const char* pName/* = ""*/)
		: m_nID(ID)
		, m_strIP(pIP)
		, m_strName(pName)
	{
	}


	CSensorInfo::~CSensorInfo()
	{
	}


	void CSensorInfo::Serialize(CJSONSerializer & refJsonSerializer) const
	{
		CSerializeEntry::Serialize(refJsonSerializer);

		refJsonSerializer.Serialize("m11", m_nID);
		refJsonSerializer.Serialize("m12", m_strIP);
		refJsonSerializer.Serialize("m13", m_strName);
	}

	void CSensorInfo::DeSerialize(CJSONSerializer & refJsonSerializer)
	{
		CSerializeEntry::DeSerialize(refJsonSerializer);

		refJsonSerializer.DeSerialize("m11", m_nID);
		refJsonSerializer.DeSerialize("m12", m_strIP);
		refJsonSerializer.DeSerialize("m13", m_strName);
	}

	/*---------------------------CSensorSummaryInfo-----------------------------*/

	CSensorSummaryInfo::CSensorSummaryInfo()
		: m_nClientID(0)
		, m_nBytesReceived(0)
		, m_nInfo(0)
		, m_nNotice(0)
		, m_nWarning(0)
		, m_nCritical(0)
	{
	}

	I64 CSensorSummaryInfo::GetMax() const
	{
		I64 nResult = m_nInfo;

		if (nResult < m_nNotice)
		{
			nResult = m_nNotice;
		}

		if (nResult < m_nWarning)
		{
			nResult = m_nWarning;
		}

		if (nResult < m_nCritical)
		{
			nResult = m_nCritical;
		}

		return nResult;
	}

	void CSensorSummaryInfo::Serialize(CJSONSerializer & refJsonSerializer) const
	{
		CSerializeEntry::Serialize(refJsonSerializer);

		refJsonSerializer.Serialize("m11", m_nClientID);
		refJsonSerializer.Serialize("m12", m_nBytesReceived);
		refJsonSerializer.Serialize("m13", m_nInfo);
		refJsonSerializer.Serialize("m14", m_nNotice);
		refJsonSerializer.Serialize("m15", m_nWarning);
		refJsonSerializer.Serialize("m16", m_nCritical);
	}

	void CSensorSummaryInfo::DeSerialize(CJSONSerializer & refJsonSerializer)
	{
		CSerializeEntry::DeSerialize(refJsonSerializer);

		refJsonSerializer.DeSerialize("m11", m_nClientID);
		refJsonSerializer.DeSerialize("m12", m_nBytesReceived);
		refJsonSerializer.DeSerialize("m13", m_nInfo);
		refJsonSerializer.DeSerialize("m14", m_nNotice);
		refJsonSerializer.DeSerialize("m15", m_nWarning);
		refJsonSerializer.DeSerialize("m16", m_nCritical);
	}

	/*-----------------------CID2DescInfo----------------------*/
	void CID2DescInfo::Serialize(CJSONSerializer& refJsonSerializer) const
	{
		CSerializeEntry::Serialize(refJsonSerializer);

		refJsonSerializer.Serialize("m11", m_nID);
		refJsonSerializer.Serialize("m12", m_strName);
		refJsonSerializer.Serialize("m13", m_strDesc);
	}

	void CID2DescInfo::DeSerialize(CJSONSerializer& refJsonSerializer)
	{
		CSerializeEntry::DeSerialize(refJsonSerializer);

		refJsonSerializer.DeSerialize("m11", m_nID);
		refJsonSerializer.DeSerialize("m12", m_strName);
		refJsonSerializer.DeSerialize("m13", m_strDesc);
	}

	

	/*---------------------CSampleType----------------------------*/
	void CSampleType::Serialize(CJSONSerializer& refJsonSerializer) const
	{
		CSerializeEntry::Serialize(refJsonSerializer);

		refJsonSerializer.Serialize("m11", m_nID);
		refJsonSerializer.Serialize("m12", m_bEnable);
		refJsonSerializer.Serialize("m13", m_strName);
		refJsonSerializer.Serialize("m14", m_nEndpoint);
	}

	void CSampleType::DeSerialize(CJSONSerializer& refJsonSerializer)
	{
		CSerializeEntry::DeSerialize(refJsonSerializer);

		refJsonSerializer.DeSerialize("m11", m_nID);
		refJsonSerializer.DeSerialize("m12", m_bEnable);
		refJsonSerializer.DeSerialize("m13", m_strName);
		refJsonSerializer.DeSerialize("m14", m_nEndpoint);
	}

	/*---------------------CStrategyGroup----------------------------*/

	//--------------------------------------------------------------------------------
	/// <summary>
	/// 添加分析样本信息
	/// </summary>
	/// <param name="nID">编号</param>
	/// <param name="nEnable">是否启用</param>
	/// <param name="lpName">名称</param>
	/// <param name="nEndpoint">端点</param>
	/// <returns></returns>
	/// <created>Andy,2020/8/27</created>
	/// <changed>Andy,2020/8/27</changed>
	//--------------------------------------------------------------------------------
	CSampleType* CStrategyGroup::AppendSampleType(
		const U32 nID
		, const bool nEnable
		, const char* lpName
		, const U32 nEndpoint)
	{
		CSampleType* pResult = new CSampleType;

		if (nullptr != pResult)
		{
			pResult->SetID(nID);
			pResult->SetEnable(nEnable);
			pResult->SetName(lpName);
			pResult->SetEndpoint(nEndpoint);

			m_arrSampleTypes.push_back(pResult);
		}

		return pResult;
	}



	void CStrategyGroup::Serialize(CJSONSerializer& refJsonSerializer) const
	{
		CSerializeEntry::Serialize(refJsonSerializer);

		refJsonSerializer.Serialize("m11", m_nID);
		refJsonSerializer.Serialize("m12", m_strName);
		refJsonSerializer.Serialize("m13", m_nProtocol);
		refJsonSerializer.Serialize("m14", m_arrSampleTypes);
	}

	void CStrategyGroup::DeSerialize(CJSONSerializer& refJsonSerializer)
	{
		CSerializeEntry::DeSerialize(refJsonSerializer);

		refJsonSerializer.DeSerialize("m11", m_nID);
		refJsonSerializer.DeSerialize("m12", m_strName);
		refJsonSerializer.DeSerialize("m13", m_nProtocol);
		refJsonSerializer.DeSerialize("m14", m_arrSampleTypes);
	}


	/*-----------------------CSensorDetectionConfig----------------------*/

	//--------------------------------------------------------------------------------
	/// <summary>
	/// 增加严重程度
	/// </summary>
	/// <param name="nID">编号</param>
	/// <param name="lpDesc">描述</param>
	/// <returns>true:成功,false:失败</returns>
	/// <created>Andy,2020/8/27</created>
	/// <changed>Andy,2020/8/27</changed>
	//--------------------------------------------------------------------------------
	bool CSensorDetectionConfig::AppendSeverity(const I32 nID, const char* lpName)
	{
		CID2DescInfo* pID2DescInfo = new CID2DescInfo(nID, lpName);

		if (nullptr != pID2DescInfo)
		{
			m_arrSeverity.push_back(pID2DescInfo);
		}

		return  (nullptr != pID2DescInfo);
	}

	//--------------------------------------------------------------------------------
	/// <summary>
	///  查找严重程度等级
	/// </summary>
	/// <param name="nID">标示</param>
	/// <returns>成功返回指向对象的指针</returns>
	/// <created>Andy,2020/8/27</created>
	/// <changed>Andy,2020/8/27</changed>
	//--------------------------------------------------------------------------------
	CID2DescInfo* CSensorDetectionConfig::LookupSeverity(const I32 nID)
	{
		CID2DescInfo* pResult = nullptr;
		auto itr = std::find_if(
			m_arrSeverity.begin(),
			m_arrSeverity.end(),
			[nID](CID2DescInfo* pID2DescInfo) { return pID2DescInfo->GetID() == nID; }
		);

		if (m_arrSeverity.end() != itr)
		{
			pResult = (*itr);
		}

		return pResult;
	}

	//--------------------------------------------------------------------------------
/// <summary>
///  查找严重程度等级
/// </summary>
/// <param name="nID">标示</param>
/// <returns>成功返回指向对象的指针</returns>
/// <created>Andy,2020/8/27</created>
/// <changed>Andy,2020/8/27</changed>
//--------------------------------------------------------------------------------
	CID2DescInfo* CSensorDetectionConfig::LookupResponseScheme(const I32 nID)
	{
		CID2DescInfo* pResult = nullptr;
		auto itr = std::find_if(
			m_arrResponseScheme.begin(),
			m_arrResponseScheme.end(),
			[nID](CID2DescInfo* pID2DescInfo) { return pID2DescInfo->GetID() == nID; }
		);

		if (m_arrResponseScheme.end() != itr)
		{
			pResult = (*itr);
		}

		return pResult;
	}

	//--------------------------------------------------------------------------------
	/// <summary>
	/// 增加响应方案
	/// </summary>
	/// <param name="nID">编号</param>
	/// <param name="lpDesc">描述</param>
	/// <returns>true:成功,false:失败</returns>
	/// <created>Andy,2020/8/27</created>
	/// <changed>Andy,2020/8/27</changed>
	//--------------------------------------------------------------------------------
	bool CSensorDetectionConfig::AppendResponseScheme(const I32 nID, const char * lpName)
	{
		CID2DescInfo* pID2DescInfo = new CID2DescInfo(nID, lpName);

		if (nullptr != pID2DescInfo)
		{
			m_arrResponseScheme.push_back(pID2DescInfo);
		}

		return  (nullptr != pID2DescInfo);
	}

	//--------------------------------------------------------------------------------
	/// <summary>
	/// 添加策略组信息
	/// </summary>
	/// <param name="nID">编号</param>
	/// <param name="lpName">名称</param>
	/// <param name="nProtocol">协议</param>
	/// <returns></returns>
	/// <created>Andy,2020/8/27</created>
	/// <changed>Andy,2020/8/27</changed>
	//--------------------------------------------------------------------------------
	CStrategyGroup * CSensorDetectionConfig::AppendStrategyGroup(
		const U32 nID
		, const char * lpName
		, const U32 nProtocol)
	{
		CStrategyGroup* pResult = new CStrategyGroup;

		if (nullptr != pResult)
		{
			pResult->SetID(nID);
			pResult->SetName(lpName);
			pResult->SetProtocol(nProtocol);

			m_arrStrategyGroup.push_back(pResult);
		}

		return pResult;
	}

	//--------------------------------------------------------------------------------
	/// <summary>
	/// 添加策略组信息
	/// </summary>
	/// <param name="nID"></param>
	/// <returns></returns>
	/// <created>Andy,2020/8/27</created>
	/// <changed>Andy,2020/8/27</changed>
	//--------------------------------------------------------------------------------
	CStrategyGroup* CSensorDetectionConfig::LookupStrategyGroup(const U32 nID)
	{
		CStrategyGroup* pResult = nullptr;
		auto itr = std::find_if(
			m_arrStrategyGroup.begin(),
			m_arrStrategyGroup.end(),
			[nID](CStrategyGroup* pStrategyGroup) { return pStrategyGroup->GetID() == nID; }
		);

		if (m_arrStrategyGroup.end() != itr)
		{
			pResult = (*itr);
		}

		return pResult;
	}

	//--------------------------------------------------------------------------------
	/// <summary>
	/// 增加匹配模式格式
	/// </summary>
	/// <param name="nID">编号</param>
	/// <param name="lpDesc">描述</param>
	/// <returns>true:成功,false:失败</returns>
	/// <created>Andy,2020/8/27</created>
	/// <changed>Andy,2020/8/27</changed>
	//--------------------------------------------------------------------------------
	bool CSensorDetectionConfig::AppendPatternFormat(const I32 nID, const char* lpName)
	{
		CID2DescInfo* pID2DescInfo = new CID2DescInfo(nID, lpName);

		if (nullptr != pID2DescInfo)
		{
			m_arrPatternFormat.push_back(pID2DescInfo);
		}

		return  (nullptr != pID2DescInfo);
	}

	//--------------------------------------------------------------------------------
	/// <summary>
	/// 查找模式格式信息
	/// </summary>
	/// <param name="nID"></param>
	/// <returns></returns>
	/// <created>Andy,2020/8/28</created>
	/// <changed>Andy,2020/8/28</changed>
	//--------------------------------------------------------------------------------
	CID2DescInfo* CSensorDetectionConfig::LookupPatternFormat(const I32 nID)
	{
		CID2DescInfo* pResult = nullptr;
		auto itr = std::find_if(
			m_arrPatternFormat.begin(),
			m_arrPatternFormat.end(),
			[nID](CID2DescInfo* pStrategyGroup) { return pStrategyGroup->GetID() == nID; }
		);

		if (m_arrPatternFormat.end() != itr)
		{
			pResult = (*itr);
		}

		return pResult;
	}
	//--------------------------------------------------------------------------------
	/// <summary>
	/// 增加选项类型
	/// </summary>
	/// <param name="nID">编号</param>
	/// <param name="lpDesc">描述</param>
	/// <returns>true:成功,false:失败</returns>
	/// <created>Andy,2020/8/27</created>
	/// <changed>Andy,2020/8/27</changed>
	//--------------------------------------------------------------------------------
	bool CSensorDetectionConfig::AppendOptionType(const I32 nID, const char* lpName, const char* lpDesc)
	{
		CID2DescInfo* pID2DescInfo = new CID2DescInfo(nID, lpName,lpDesc);

		if (nullptr != pID2DescInfo)
		{
			m_arrOptionType.push_back(pID2DescInfo);
		}

		return  (nullptr != pID2DescInfo);
	}

	//--------------------------------------------------------------------------------
	/// <summary>
	/// 增加活动类型
	/// </summary>
	/// <param name="nID">编号</param>
	/// <param name="lpDesc">描述</param>
	/// <returns>true:成功,false:失败</returns>
	/// <created>Andy,2020/8/27</created>
	/// <changed>Andy,2020/8/27</changed>
	//--------------------------------------------------------------------------------
	bool CSensorDetectionConfig::AppendActionType(const I32 nID, const char* lpName)
	{
		CID2DescInfo* pID2DescInfo = new CID2DescInfo(nID, lpName);

		if (nullptr != pID2DescInfo)
		{
			m_arrActionType.push_back(pID2DescInfo);
		}

		return  (nullptr != pID2DescInfo);
	}

	//--------------------------------------------------------------------------------
	/// <summary>
	/// 增加阻断类型
	/// </summary>
	/// <param name="nID">编号</param>
	/// <param name="lpDesc">描述</param>
	/// <returns>true:成功,false:失败</returns>
	/// <created>Andy,2020/8/27</created>
	/// <changed>Andy,2020/8/27</changed>
	//--------------------------------------------------------------------------------
	bool CSensorDetectionConfig::AppendBlockMode(const I32 nID, const char* lpName)
	{
		CID2DescInfo* pID2DescInfo = new CID2DescInfo(nID, lpName);

		if (nullptr != pID2DescInfo)
		{
			m_arrBlockModes.push_back(pID2DescInfo);
		}

		return  (nullptr != pID2DescInfo);
	}

	//--------------------------------------------------------------------------------
	/// <summary>
	/// 增加选项操作类型信息
	/// </summary>
	/// <param name="nID">编号</param>
	/// <param name="lpDesc">描述</param>
	/// <returns>true:成功,false:失败</returns>>
	/// <created>Andy,2020/8/27</created>
	/// <changed>Andy,2020/8/27</changed>
	//--------------------------------------------------------------------------------
	bool CSensorDetectionConfig::AppendOptoinOperator(const I32 nID, const char* lpName)
	{
		CID2DescInfo* pID2DescInfo = new CID2DescInfo(nID, lpName);

		if (nullptr != pID2DescInfo)
		{
			m_arrOptoinOperator.push_back(pID2DescInfo);
		}

		return  (nullptr != pID2DescInfo);
	}

	//--------------------------------------------------------------------------------
	/// <summary>
	/// 增加组ID于协议隐射
	/// </summary>
	/// <param name="nGroupID"></param>
	/// <param name="nProtocol"></param>
	/// <created>Andy,2020/8/27</created>
	/// <changed>Andy,2020/8/27</changed>
	//--------------------------------------------------------------------------------
	void CSensorDetectionConfig::AppendGroupID2Protocol(const I64 nProtocol,const I32 nGroupID)
	{
		CInt2Int* pNode = new CInt2Int(nProtocol,nGroupID);

		m_arrGroupID2Protocol.push_back(pNode);
	}


	/*-----------------------------------------------------------------
|  函数名称  : CDetectionAnalyzer::GetGroupIDOfProtocol
|  描    述  : 得到某个协议组的ID
|  参    数  : unsigned int nProtocol――协议编号
|  返 回 值  : 协议组的ID
|  注    释  : 不要改变协议的组ID，否则将引起策略分组混乱。
|  修改记录  : 2008-3-29 15:22:12   -huangdy-   创建
-----------------------------------------------------------------*/
	U32 CSensorDetectionConfig::GetGroupIDbyProtocol(const U32 nProtocol)
	{
		U32 nResult = 0;
		auto itr = m_arrGroupID2Protocol.begin();

		for(; m_arrGroupID2Protocol.end() != itr;itr++)		
		{
			if ((*itr)->GetKey() == nProtocol)
			{
				nResult = (*itr)->GetValue();
				break;
			}
		}

		return nResult;
	}

	void CSensorDetectionConfig::Serialize(CJSONSerializer& refJsonSerializer) const
	{
		CSerializeEntry::Serialize(refJsonSerializer);

		refJsonSerializer.Serialize("m11", m_nClientID);
		refJsonSerializer.Serialize("m12", m_arrSeverity);
		refJsonSerializer.Serialize("m13", m_arrResponseScheme);
		refJsonSerializer.Serialize("m14", m_arrStrategyGroup);
		refJsonSerializer.Serialize("m15", m_arrPatternFormat);
		refJsonSerializer.Serialize("m16", m_arrOptionType);
		refJsonSerializer.Serialize("m17", m_arrActionType);
		refJsonSerializer.Serialize("m18", m_arrBlockModes);
		refJsonSerializer.Serialize("m19", m_arrOptoinOperator);
		refJsonSerializer.Serialize("m20", m_arrGroupID2Protocol);
	}

	void CSensorDetectionConfig::DeSerialize(CJSONSerializer& refJsonSerializer)
	{
		CSerializeEntry::DeSerialize(refJsonSerializer);

		refJsonSerializer.DeSerialize("m11", m_nClientID);
		refJsonSerializer.DeSerialize("m12", m_arrSeverity);
		refJsonSerializer.DeSerialize("m13", m_arrResponseScheme);
		refJsonSerializer.DeSerialize("m14", m_arrStrategyGroup);
		refJsonSerializer.DeSerialize("m15", m_arrPatternFormat);
		refJsonSerializer.DeSerialize("m16", m_arrOptionType);
		refJsonSerializer.DeSerialize("m17", m_arrActionType);
		refJsonSerializer.DeSerialize("m18", m_arrBlockModes);
		refJsonSerializer.DeSerialize("m19", m_arrOptoinOperator);
		refJsonSerializer.DeSerialize("m20", m_arrGroupID2Protocol);
	}





	/*--------------CNetDeviceEntry---------------*/
	CNetDeviceEntry::CNetDeviceEntry()
		: m_nType(DT_COMPUTER)
		, m_nStatus(DS_ONLINE)
		, m_bIsGateway(false)
	{
	}

	CNetDeviceEntry::CNetDeviceEntry(
		const char * lpName
		, const  char * lpCode
		, const char * lpMACs
		, const char * lpIPs)
		: m_strName(lpName)
		, m_strCode(lpCode)
		, m_strMACs(lpMACs)
		, m_strIPs(lpIPs)	
		, m_nType(DT_COMPUTER)
		, m_nStatus(DS_ONLINE)
		, m_bIsGateway(false)
	{
	}

	CNetDeviceEntry::~CNetDeviceEntry()
	{
	}

	bool CNetDeviceEntry::LookupAccessAddr(const U32 nIP)
	{
		bool bResult = false;

		if (!m_strAccessAddr.empty())
		{
			STR_IP_RANGE_ARRAY  arrIPRange;

			ExtractIPRange(GetAccessAddr(), arrIPRange);

			auto itr = arrIPRange.begin();

			for (; arrIPRange.end() != itr; itr++)
			{
				bResult = (*itr).In(nIP);

				if (bResult)
				{
					break;
				}
			}
		}

		return bResult;
	}

	void CNetDeviceEntry::AppendAccessAddr(const char * lpIP)
	{
		if (m_strAccessAddr.empty())
		{
			m_strAccessAddr = lpIP;
		}
		else
		{
			m_strAccessAddr += "\r\n";
			m_strAccessAddr += lpIP;
		}
	}


	void CNetDeviceEntry::Serialize(CJSONSerializer& refJsonSerializer) const
	{
		CSerializeEntry::Serialize(refJsonSerializer);

		refJsonSerializer.Serialize("m11", m_strName);
		refJsonSerializer.Serialize("m12", m_strCode);
		refJsonSerializer.Serialize("m13", m_strMACs);
		refJsonSerializer.Serialize("m14", m_strIPs);
		refJsonSerializer.Serialize("m15", m_strNet);
		refJsonSerializer.Serialize("m16", m_nType);
		refJsonSerializer.Serialize("m17", m_nStatus);
		refJsonSerializer.Serialize("m18", m_strBrand);
		refJsonSerializer.Serialize("m19", m_strUses);
		refJsonSerializer.Serialize("m20", m_strPos);
		refJsonSerializer.Serialize("m21", m_strRackNum);
		refJsonSerializer.Serialize("m22", m_strOS);
		refJsonSerializer.Serialize("m23", m_strMemo);
		refJsonSerializer.Serialize("m24", m_bIsGateway);
		refJsonSerializer.Serialize("m25", m_strAccessAddr);
	}

	void CNetDeviceEntry::DeSerialize(CJSONSerializer& refJsonSerializer)
	{
		CSerializeEntry::DeSerialize(refJsonSerializer);

		refJsonSerializer.DeSerialize("m11", m_strName);
		refJsonSerializer.DeSerialize("m12", m_strCode);
		refJsonSerializer.DeSerialize("m13", m_strMACs);
		refJsonSerializer.DeSerialize("m14", m_strIPs);
		refJsonSerializer.DeSerialize("m15", m_strNet);
		refJsonSerializer.DeSerialize("m16", m_nType);
		refJsonSerializer.DeSerialize("m17", m_nStatus);
		refJsonSerializer.DeSerialize("m18", m_strBrand);
		refJsonSerializer.DeSerialize("m19", m_strUses);
		refJsonSerializer.DeSerialize("m20", m_strPos);
		refJsonSerializer.DeSerialize("m21", m_strRackNum);
		refJsonSerializer.DeSerialize("m22", m_strOS);
		refJsonSerializer.DeSerialize("m23", m_strMemo);
		refJsonSerializer.DeSerialize("m24", m_bIsGateway);
		refJsonSerializer.DeSerialize("m25", m_strAccessAddr);
	}


	/*--------------CNetDeviceMgr---------------*/

	CNetDeviceMgr::CNetDeviceMgr()
	{

	}
	CNetDeviceMgr::~CNetDeviceMgr()
	{

	}

	CNetDeviceMgr::CNetDeviceMgr(const CNetDeviceMgr& refSrc)
	{
		m_arrNetDevices = refSrc.m_arrNetDevices;
	}

	CNetDeviceMgr& CNetDeviceMgr::operator=(const CNetDeviceMgr& refSrc)
	{
		if (this == &refSrc)
		{
			return *this;
		}

		m_arrNetDevices = refSrc.m_arrNetDevices;

		return *this;
	}

	//--------------------------------------------------------------------------------
/// <summary>
/// 创建一个新的网络设备
/// </summary>
/// <param name="lpName">名称</param>
/// <param name="lpCode">编码</param>
/// <param name="lpMACs">MAC地址</param>
/// <param name="lpIPs">IP地址</param>
/// <returns></returns>
/// <created>Andy,2019/10/23</created>
/// <changed>Andy,2019/10/23</changed>
//--------------------------------------------------------------------------------
	CNetDevicePtr CNetDeviceMgr::CreateNetDevice(
		const char* lpName
		, const char* lpCode
		, const char* lpMACs
		, const char* lpIPs)
	{
		CNetDevicePtr pResult = std::make_shared<CNetDeviceEntry>(lpName, lpCode, lpMACs, lpIPs);

		if (nullptr != pResult)
		{
			m_arrNetDevices.push_back(pResult);
		}

		return pResult;
	}

	//--------------------------------------------------------------------------------
	/// <summary>
	/// 删除指定的网络设备
	/// </summary>
	/// <param name="pNetDeviceEntryPtr">指向被删除设备对象的指针</param>
	/// <created>Andy,2019/10/23</created>
	/// <changed>Andy,2019/10/23</changed>
	//--------------------------------------------------------------------------------
	void CNetDeviceMgr::RemoveNetDevice(CNetDevicePtr pNetDeviceEntryPtr)
	{
		auto itr = m_arrNetDevices.begin();

		for (; m_arrNetDevices.end() != itr; itr++)
		{
			if ((*itr) == pNetDeviceEntryPtr)
			{
				m_arrNetDevices.erase(itr);

				break;
			}
		}
	}

	//--------------------------------------------------------------------------------
/// <summary>
/// 释放所有的网络设备信息
/// </summary>
/// <created>Andy,2019/10/24</created>
/// <changed>Andy,2019/10/24</changed>
//--------------------------------------------------------------------------------
	void CNetDeviceMgr::ClearNetDevice()
	{
		m_arrNetDevices.clear();
	}

	//--------------------------------------------------------------------------------
	/// <summary>
	/// 根据序号得到指定的网络设备
	/// </summary>
	/// <param name="nIndex">序号</param>
	/// <returns>成功返回指向设备对象的指针，否则null</returns>
	/// <created>Andy,2019/10/28</created>
	/// <changed>Andy,2019/10/28</changed>
	//--------------------------------------------------------------------------------
	CNetDevicePtr CNetDeviceMgr::GetNetDevice(const U32 nIndex)
	{
		CNetDevicePtr pResult = nullptr;

		if (nIndex < m_arrNetDevices.size())
		{
			pResult = m_arrNetDevices[nIndex];
		}

		return pResult;
	}

	//--------------------------------------------------------------------------------
	/// <summary>
	/// 查找ip对应的设备
	/// </summary>
	/// <param name="nIP"></param>
	/// <returns></returns>
	/// <created>Andy,2019/10/30</created>
	/// <changed>Andy,2019/10/30</changed>
	//--------------------------------------------------------------------------------
	CNetDevicePtr CNetDeviceMgr::LookupNetDevice(const U32 nIP)
	{
		CNetDevicePtr pResult = nullptr;
		auto itr = m_arrNetDevices.begin();

		for (; m_arrNetDevices.end() != itr; itr++)
		{
			STR_IP_RANGE_ARRAY arrIPRange;

			ExtractIPRange((*itr)->GetIPs(), arrIPRange);

			auto itrIP = arrIPRange.begin();

			for (; arrIPRange.end() != itrIP; itrIP++)
			{
				if ((*itrIP).In(nIP))
				{
					pResult = (*itr);
					break;
				}
			}

			if (nullptr != pResult)
			{
				break;
			}
		}

		return pResult;
	}

	//--------------------------------------------------------------------------------
	/// <summary>
	/// 
	/// </summary>
	/// <param name="strFile"></param>
	/// <created>Andy,2020/8/31</created>
	/// <changed>Andy,2020/8/31</changed>
	//--------------------------------------------------------------------------------
	bool CNetDeviceMgr::ExportNetDevice(const std::string& strFile)
	{
		CJsonHelper objJsonHelper;

		const bool bResult = objJsonHelper.Save<CNetDeviceArray>(
			m_arrNetDevices
			, strFile
			, NET_DEVICE_DATA_UUID
			, NET_DEVICE_DATA_VERSION
			, NET_DEVICE_DATA_DESC);

		return bResult;
	}

	//--------------------------------------------------------------------------------
	/// <summary>
	/// 
	/// </summary>
	/// <param name="strFile"></param>
	/// <created>Andy,2020/8/31</created>
	/// <changed>Andy,2020/8/31</changed>
	//--------------------------------------------------------------------------------
	bool CNetDeviceMgr::ImportNetDevice(const std::string& strFile)
	{
		CJsonHelper objJsonHelper;

		const bool bResult = objJsonHelper.Load<CNetDeviceArray>(
			strFile
			, NET_DEVICE_DATA_UUID
			, m_arrNetDevices);

		return bResult;
	}

	void CNetDeviceMgr::Serialize(CJSONSerializer& refJsonSerializer) const
	{
		CSerializeEntry::Serialize(refJsonSerializer);

		refJsonSerializer.Serialize("m11", m_arrNetDevices);
	}

	void CNetDeviceMgr::DeSerialize(CJSONSerializer& refJsonSerializer)
	{
		CSerializeEntry::DeSerialize(refJsonSerializer);

		refJsonSerializer.DeSerialize("m11", m_arrNetDevices);
	}

	void CResponseScheme::Serialize(CJSONSerializer& refJsonSerializer) const
	{
		CSerializeEntry::Serialize(refJsonSerializer);

		refJsonSerializer.Serialize("m11", m_nID);
		refJsonSerializer.Serialize("m12", m_strName);
		refJsonSerializer.Serialize("m13", m_nResponseType);
		refJsonSerializer.Serialize("m14", m_nBlockType);
		refJsonSerializer.Serialize("m15", m_bIsDefault);
	}

	void CResponseScheme::DeSerialize(CJSONSerializer& refJsonSerializer)
	{
		CSerializeEntry::DeSerialize(refJsonSerializer);

		refJsonSerializer.DeSerialize("m11", m_nID);
		refJsonSerializer.DeSerialize("m12", m_strName);
		refJsonSerializer.DeSerialize("m13", m_nResponseType);
		refJsonSerializer.DeSerialize("m14", m_nBlockType);
		refJsonSerializer.DeSerialize("m15", m_bIsDefault);
	}

	/*-----------------------CSensorGeneralConfig--------------------------*/
#if(_MSC_VER >= 1700  || __GNUC__ > 3)

	//--------------------------------------------------------------------------------
	/// <summary>
	/// 创建一个新的方响应案
	/// </summary>
	/// <param name="lpName">名称</param>
	/// <param name="nResponseType">类型</param>
	/// <param name="nBlockType">阻断类型</param>
	/// <returns></returns>
	/// <created>Andy,2020/9/2</created>
	/// <changed>Andy,2020/9/2</changed>
	//--------------------------------------------------------------------------------
	CResponseSchemePtr CSensorGeneralConfig::CreateResponseScheme(
		const char* lpName
		, unsigned int nResponseType
		, const unsigned int nBlockType)
	{
		CResponseSchemePtr pResponseScheme = std::make_shared<CResponseScheme>();

		if (nullptr != pResponseScheme)
		{
			pResponseScheme->SetID(m_nNextResponseSchemeID++);
			pResponseScheme->SetName(lpName);
			pResponseScheme->SetResponseType(nResponseType);
			pResponseScheme->SetBlockType(nBlockType);
			pResponseScheme->SetIsDefault(false);

			m_arrResponseScheme.push_back(pResponseScheme);
		}

		return pResponseScheme;
	}

	//--------------------------------------------------------------------------------
	/// <summary>
	/// 
	/// </summary>
	/// <param name="nID"></param>
	/// <returns></returns>
	/// <created>Andy,2020/9/2</created>
	/// <changed>Andy,2020/9/2</changed>
	//--------------------------------------------------------------------------------
	CResponseSchemePtr CSensorGeneralConfig::LookupResponseScheme(const unsigned int nID)
	{
		auto itr = std::find_if(
			m_arrResponseScheme.begin()
			, m_arrResponseScheme.end()
			, [nID](CResponseSchemePtr pScheme){return (pScheme->GetID() == nID);}
		);

		CResponseSchemePtr pResult = nullptr;

		if (m_arrResponseScheme.end() != itr)
		{
			pResult = (*itr);
		}

		return pResult;
	}

	//--------------------------------------------------------------------------------
	/// <summary>
	/// 删除一个新的响应方案
	/// </summary>
	/// <param name="nID"></param>
	/// <created>Andy,2020/9/2</created>
	/// <changed>Andy,2020/9/2</changed>
	//--------------------------------------------------------------------------------
	void CSensorGeneralConfig::RemoveResponseScheme(const unsigned int nID)
	{
		m_arrResponseScheme.erase(
			std::remove_if(
				m_arrResponseScheme.begin()
				, m_arrResponseScheme.end()
				, [nID](CResponseSchemePtr pScheme){return (pScheme->GetID() == nID);})
			, m_arrResponseScheme.end());
	}

	void CSensorGeneralConfig::Serialize(CJSONSerializer& refJsonSerializer) const
	{
		CSerializeEntry::Serialize(refJsonSerializer);

		refJsonSerializer.Serialize("m11", m_arrNodeGroupSettings);
		refJsonSerializer.Serialize("m12", m_nIgnoreInternetIPGroup);
		refJsonSerializer.Serialize("m13", m_nIgnorePrivateIPGroup);
		refJsonSerializer.Serialize("m14", m_strSMTPServer);
		refJsonSerializer.Serialize("m15", m_strSMTPAccount);
		refJsonSerializer.Serialize("m16", m_strSMTPPassword);
		refJsonSerializer.Serialize("m17", m_strSMTPReceivers);
		refJsonSerializer.Serialize("m18", m_strSMTPBody);

		refJsonSerializer.Serialize("m19", m_strSyslogIP);
		refJsonSerializer.Serialize("m20", m_nSyslogPort);
		refJsonSerializer.Serialize("m21", m_strSyslogMessage);
		refJsonSerializer.Serialize("m22", m_nSyslogFacility);
		refJsonSerializer.Serialize("m23", m_arrResponseScheme);

		refJsonSerializer.Serialize("m24", m_nOfflineTimeThd);
		refJsonSerializer.Serialize("m25", m_strLocal);
		refJsonSerializer.Serialize("m26", m_nLongitude);
		refJsonSerializer.Serialize("m27", m_nLatitude);

		refJsonSerializer.Serialize("m28", m_strPwd);
		refJsonSerializer.Serialize("m29", m_strName);
		
	}

	void CSensorGeneralConfig::DeSerialize(CJSONSerializer& refJsonSerializer)
	{
		CSerializeEntry::DeSerialize(refJsonSerializer);

		refJsonSerializer.DeSerialize("m11", m_arrNodeGroupSettings);
		refJsonSerializer.DeSerialize("m12", m_nIgnoreInternetIPGroup);
		refJsonSerializer.DeSerialize("m13", m_nIgnorePrivateIPGroup);
		refJsonSerializer.DeSerialize("m14", m_strSMTPServer);
		refJsonSerializer.DeSerialize("m15", m_strSMTPAccount);
		refJsonSerializer.DeSerialize("m16", m_strSMTPPassword);
		refJsonSerializer.DeSerialize("m17", m_strSMTPReceivers);
		refJsonSerializer.DeSerialize("m18", m_strSMTPBody);

		refJsonSerializer.DeSerialize("m19", m_strSyslogIP);
		refJsonSerializer.DeSerialize("m20", m_nSyslogPort);
		refJsonSerializer.DeSerialize("m21", m_strSyslogMessage);
		refJsonSerializer.DeSerialize("m22", m_nSyslogFacility);
		refJsonSerializer.DeSerialize("m23", m_arrResponseScheme);

		refJsonSerializer.DeSerialize("m24", m_nOfflineTimeThd);
		refJsonSerializer.DeSerialize("m25", m_strLocal);
		refJsonSerializer.DeSerialize("m26", m_nLongitude);
		refJsonSerializer.DeSerialize("m27", m_nLatitude);

		refJsonSerializer.DeSerialize("m28", m_strPwd);
		refJsonSerializer.DeSerialize("m29", m_strName);

		for (auto pScheme : m_arrResponseScheme)
		{
			if (pScheme->GetID() > m_nNextResponseSchemeID)
			{
				m_nNextResponseSchemeID = pScheme->GetID();
			}			
		}
	}


/*-------------------CStatCounter------------------------*/
	//--------------------------------------------------------------------------------
	/// <summary>
	/// 添加一个子计数器
	/// </summary>
	/// <param name="strId"></param>
	/// <param name="strDisplayName"></param>
	/// <param name="nFirstValueTotale"></param>
	/// <param name="nSecondValueTotal"></param>
	/// <returns></returns>
	/// <created>Andy,2020/9/3</created>
	/// <changed>Andy,2020/9/3</changed>
	//--------------------------------------------------------------------------------
	CStatCounterPtr CStatCounter::CreateChild(
		const std::string& strId
		, const std::string& strDisplayName
		, const I64 nFirstValueTotale
		, const I64 nSecondValueTotal
		, const unsigned int nData)
	{
		CStatCounterPtr pResult = std::make_shared<CStatCounter>(
			strId
			, strDisplayName
			, nFirstValueTotale
			, nSecondValueTotal
			, nData);

		if (nullptr != pResult)
		{
			m_arrChild.push_back(pResult);
		}

		return pResult;
	}

	void CStatCounter::Sum()
	{
		if (m_arrChild.size())
		{
			m_nFirstValueTotal = 0;
			m_nSecondValueTotal = 0;

			for (auto pCounter : m_arrChild)
			{
				pCounter->Sum();

				m_nFirstValueTotal += pCounter->GetFirstValueTotal();
				m_nSecondValueTotal += pCounter->GetSecondValueTotal();
			}
		}
	}

	void CStatCounter::Serialize(CJSONSerializer& refJsonSerializer) const
	{
		CSerializeEntry::Serialize(refJsonSerializer);

		refJsonSerializer.Serialize("m11", m_strId);
		refJsonSerializer.Serialize("m12", m_strDisplayName);
		refJsonSerializer.Serialize("m13", m_nFirstValueTotal);
		refJsonSerializer.Serialize("m14", m_nSecondValueTotal);
		refJsonSerializer.Serialize("m15", m_nData);
		refJsonSerializer.Serialize("m16", m_arrChild);		
		
	}

	void CStatCounter::DeSerialize(CJSONSerializer& refJsonSerializer)
	{
		CSerializeEntry::DeSerialize(refJsonSerializer);

		refJsonSerializer.DeSerialize("m11", m_strId);
		refJsonSerializer.DeSerialize("m12", m_strDisplayName);
		refJsonSerializer.DeSerialize("m13", m_nFirstValueTotal);
		refJsonSerializer.DeSerialize("m14", m_nSecondValueTotal);
		refJsonSerializer.DeSerialize("m15", m_nData);
		refJsonSerializer.DeSerialize("m16", m_arrChild);
	}

	/*--------------CStatTableSnapshot---------------*/

// 添加一个子计数器组
	CStatCounterPtr CStatTableSnapshot::CreateChildGroup(const std::string& strDisplayName)
	{
		CStatCounterPtr pResult = std::make_shared<CStatCounter>(
			""
			, strDisplayName
			, 0
			, 0
			,0);

		if (nullptr != pResult)
		{
			m_arrChild.push_back(pResult);
		}

		return pResult;
	}

	void CStatTableSnapshot::Serialize(CJSONSerializer& refJsonSerializer) const
	{
		CSerializeEntry::Serialize(refJsonSerializer);

		refJsonSerializer.Serialize("m11", m_strName);
		refJsonSerializer.Serialize("m12", m_arrChild);
	}

	void CStatTableSnapshot::DeSerialize(CJSONSerializer& refJsonSerializer)
	{
		CSerializeEntry::DeSerialize(refJsonSerializer);

		refJsonSerializer.DeSerialize("m11", m_strName);
		refJsonSerializer.DeSerialize("m12", m_arrChild);
	}

	void CStatTableSnapshot::Sum()
	{
		for (auto pCounter : m_arrChild)
		{
			pCounter->Sum();
		}
	}

	/*---------------------CEventLog----------------------*/
	CEventLog::CEventLog(const CEventLog& refSrc)
		:m_nSeverity(refSrc.m_nSeverity)
		, m_nTime(refSrc.m_nTime)
		, m_nProtocol(refSrc.m_nProtocol)
		, m_strMessage(refSrc.m_strMessage)
		, m_nIP1(refSrc.m_nIP1)
		, m_nPort1(refSrc.m_nPort1)
		, m_nIP2(refSrc.m_nIP2)
		, m_nPort2(refSrc.m_nPort2)
		, m_strMac1(refSrc.m_strMac1)
		, m_strMac2(refSrc.m_strMac2)
		, m_nStrategyID(refSrc.m_nStrategyID)
		, m_nGroupID(refSrc.m_nGroupID)
	{

	}

	CEventLog& CEventLog::operator=(const CEventLog& refSrc)
	{
		if (this == &refSrc)
		{
			return *this;
		}

		m_nSeverity = refSrc.m_nSeverity;
		m_nTime = refSrc.m_nTime;
		m_nProtocol = refSrc.m_nProtocol;
		m_nIP1 = refSrc.m_nIP1;
		m_nIP2 = refSrc.m_nIP2;
		m_nPort2 = refSrc.m_nPort2;
		m_strMac1 = refSrc.m_strMac1;
		m_strMac2 = refSrc.m_strMac2;
		m_nStrategyID = refSrc.m_nStrategyID;
		m_nGroupID = refSrc.m_nGroupID;


		return *this;
	}

	void CEventLog::Serialize(CJSONSerializer& refJsonSerializer) const
	{
		CSerializeEntry::Serialize(refJsonSerializer);

		refJsonSerializer.Serialize("m11", m_nSeverity);
		refJsonSerializer.Serialize("m12", m_nTime);
		refJsonSerializer.Serialize("m13", m_nProtocol);
		refJsonSerializer.Serialize("m14", m_strMessage);
		refJsonSerializer.Serialize("m15", m_nIP1);
		refJsonSerializer.Serialize("m16", m_nPort1);
		refJsonSerializer.Serialize("m17", m_nIP2);
		refJsonSerializer.Serialize("m18", m_nPort2);
		refJsonSerializer.Serialize("m19", m_strMac1);
		refJsonSerializer.Serialize("m20", m_strMac2);
		refJsonSerializer.Serialize("m21", m_nStrategyID);
		refJsonSerializer.Serialize("m22", m_nGroupID);
	}

	void CEventLog::DeSerialize(CJSONSerializer& refJsonSerializer)
	{
		CSerializeEntry::DeSerialize(refJsonSerializer);

		refJsonSerializer.DeSerialize("m11", m_nSeverity);
		refJsonSerializer.DeSerialize("m12", m_nTime);
		refJsonSerializer.DeSerialize("m13", m_nProtocol);
		refJsonSerializer.DeSerialize("m14", m_strMessage);
		refJsonSerializer.DeSerialize("m15", m_nIP1);
		refJsonSerializer.DeSerialize("m16", m_nPort1);
		refJsonSerializer.DeSerialize("m17", m_nIP2);
		refJsonSerializer.DeSerialize("m18", m_nPort2);
		refJsonSerializer.DeSerialize("m19", m_strMac1);
		refJsonSerializer.DeSerialize("m20", m_strMac2);
		refJsonSerializer.DeSerialize("m21", m_nStrategyID);
		refJsonSerializer.DeSerialize("m22", m_nGroupID);
	}

	void CEventLogFilter::Serialize(CJSONSerializer& refJsonSerializer) const
	{
		CSerializeEntry::Serialize(refJsonSerializer);

		refJsonSerializer.Serialize("m11", m_nSeverity);
		refJsonSerializer.Serialize("m12", m_nGroupID);
		refJsonSerializer.Serialize("m13", m_nStrategyID);

	}

	void CEventLogFilter::DeSerialize(CJSONSerializer& refJsonSerializer)
	{
		CSerializeEntry::DeSerialize(refJsonSerializer);

		refJsonSerializer.DeSerialize("m11", m_nSeverity);
		refJsonSerializer.DeSerialize("m12", m_nGroupID);
		refJsonSerializer.DeSerialize("m13", m_nStrategyID);
	}

	/*------------------CIPNode-------------------------*/
	void CLocalIPNode::Serialize(CJSONSerializer& refJsonSerializer) const
	{
		CSerializeEntry::Serialize(refJsonSerializer);

		refJsonSerializer.Serialize("m11", m_nIP);
		refJsonSerializer.Serialize("m12", m_bAbnormal);
		refJsonSerializer.Serialize("m13", m_strOS);
		refJsonSerializer.Serialize("m14", m_nMac);
		refJsonSerializer.Serialize("m15", m_strName);
		refJsonSerializer.Serialize("m16", m_strCode);
		refJsonSerializer.Serialize("m17", m_strNet);
		refJsonSerializer.Serialize("m18", m_nType);
		refJsonSerializer.Serialize("m19", m_nStatus);
		refJsonSerializer.Serialize("m20", m_strBrand);
		refJsonSerializer.Serialize("m21", m_strUses);
		refJsonSerializer.Serialize("m22", m_strPos);
		refJsonSerializer.Serialize("m23", m_strRackNum);
		refJsonSerializer.Serialize("m24", m_strMemo);
		refJsonSerializer.Serialize("m25", m_bGateway);
	}

	void CLocalIPNode::DeSerialize(CJSONSerializer& refJsonSerializer)
	{
		CSerializeEntry::DeSerialize(refJsonSerializer);

		refJsonSerializer.DeSerialize("m11", m_nIP);
		refJsonSerializer.DeSerialize("m12", m_bAbnormal);
		refJsonSerializer.DeSerialize("m13", m_strOS);
		refJsonSerializer.DeSerialize("m14", m_nMac);
		refJsonSerializer.DeSerialize("m15", m_strName);
		refJsonSerializer.DeSerialize("m16", m_strCode);
		refJsonSerializer.DeSerialize("m17", m_strNet);
		refJsonSerializer.DeSerialize("m18", m_nType);
		refJsonSerializer.DeSerialize("m19", m_nStatus);
		refJsonSerializer.DeSerialize("m20", m_strBrand);
		refJsonSerializer.DeSerialize("m21", m_strUses);
		refJsonSerializer.DeSerialize("m22", m_strPos);
		refJsonSerializer.DeSerialize("m23", m_strRackNum);
		refJsonSerializer.DeSerialize("m24", m_strMemo);
		refJsonSerializer.DeSerialize("m25", m_bGateway);
	}

	/*------------------CLocalIPNodeGroup-------------------------*/
	void CLocalIPNodeGroup::Serialize(CJSONSerializer& refJsonSerializer) const
	{
		CSerializeEntry::Serialize(refJsonSerializer);

		refJsonSerializer.Serialize("m11", m_strName);
		refJsonSerializer.Serialize("m12", m_bGateway);
		refJsonSerializer.Serialize("m13", m_arrChildIPNode);
		refJsonSerializer.Serialize("m14", m_arrChildGroup);

	}

	void CLocalIPNodeGroup::DeSerialize(CJSONSerializer& refJsonSerializer)
	{
		CSerializeEntry::DeSerialize(refJsonSerializer);

		refJsonSerializer.DeSerialize("m11", m_strName);
		refJsonSerializer.DeSerialize("m12", m_bGateway);
		refJsonSerializer.DeSerialize("m13", m_arrChildIPNode);
		refJsonSerializer.DeSerialize("m14", m_arrChildGroup);
	}

	//--------------------------------------------------------------------------------
	/// <summary>
	/// 创建一个新的ip节点组
	/// </summary>
	/// <param name="nIP">ip地址</param>
	/// <param name="bAbnormal">是否异常</param>
	/// <param name="strOS">操作系统</param>
	/// <param name="nMac">物理地址</param>
	/// <returns>成功返回指向新建对象的指针,否则null</returns>
	/// <created>Andy,2020/9/7</created>
	/// <changed>Andy,2020/9/7</changed>
	//--------------------------------------------------------------------------------
	CLocalIPNodePtr CLocalIPNodeGroup::CreaterChildIPNode(
		const unsigned int nIP
		, const bool bAbnormal
		, const std::string& strOS
		, const uint64_t nMac)
	{
		CLocalIPNodePtr pResult = std::make_shared<CLocalIPNode>();

		if (nullptr != pResult)
		{
			pResult->SetIP(nIP);
			pResult->SetAbnormal(bAbnormal);
			pResult->SetOS(strOS);
			pResult->SetMac(nMac);

			m_arrChildIPNode.push_back(pResult);
		}

		return pResult;
	}

	//--------------------------------------------------------------------------------
	/// <summary>
	/// 创建一个子组
	/// </summary>
	/// <returns></returns>
	/// <created>Andy,2020/9/7</created>
	/// <changed>Andy,2020/9/7</changed>
	//--------------------------------------------------------------------------------
	CLocalIPNodeGroupPtr CLocalIPNodeGroup::CreaterChildGroup()
	{
		CLocalIPNodeGroupPtr pResult = std::make_shared<CLocalIPNodeGroup>();

		if (nullptr != pResult)
		{
			m_arrChildGroup.push_back(pResult);
		}

		return pResult;
	}
	/*------------------CRegionEventStat-------------------------*/
	void CRegionEventStat::Serialize(CJSONSerializer& refJsonSerializer) const
	{
		CSerializeEntry::Serialize(refJsonSerializer);

		refJsonSerializer.Serialize("m11", m_strName);
		refJsonSerializer.Serialize("m12", m_nLongitude);
		refJsonSerializer.Serialize("m13", m_nLatitude);
		refJsonSerializer.Serialize("m14", m_nEvents);

	}

	void CRegionEventStat::DeSerialize(CJSONSerializer& refJsonSerializer)
	{
		CSerializeEntry::DeSerialize(refJsonSerializer);

		refJsonSerializer.DeSerialize("m11", m_strName);
		refJsonSerializer.DeSerialize("m12", m_nLongitude);
		refJsonSerializer.DeSerialize("m13", m_nLatitude);
		refJsonSerializer.DeSerialize("m14", m_nEvents);
	}
#endif
}


