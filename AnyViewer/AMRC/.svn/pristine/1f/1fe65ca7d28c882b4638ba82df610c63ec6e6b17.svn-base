#include "stdafx.h"
#include "ConnectionConfig.h"
#include <crtdbg.h>

#define TEST_FAIL(C,R) if (!C) { R = false; }

CConnectionConfig::CConnectionConfig()
{
}

CConnectionConfig::~CConnectionConfig()
{
}

CConnectionConfig::CConnectionConfig(const CConnectionConfig &connectionConfig)
{
	*this = connectionConfig;
}

CConnectionConfig& CConnectionConfig::operator=(const CConnectionConfig& refSrc)
{
	if (&refSrc != this)
	{

	}

	return *this;
}


void CConnectionConfig::SetCustomCompressionLevel(int nLevel)
{
	// nLevel in interval [0..9]
	// if compression is disable, then nLevel is -1.
	
	if (nLevel < -1)
	{
		nLevel = 0;
	}

	if (nLevel > 9)
	{
		nLevel = 9;
	}

	m_nCustomCompressionLevel = nLevel;
}

void CConnectionConfig::SetJpegCompressionLevel(int nLevel)
{
	// nLevel in interval [0..9]
	// if jpeg compression is disable, then nLevel is -1.
	if (nLevel < -1)
	{
		nLevel = 0;
	}

	if (nLevel > 9)
	{
		nLevel = 9;
	}

	m_nJpegCompressionLevel = nLevel;
}



bool CConnectionConfig::isCustomCompressionEnabled()
{
	return GetCustomCompressionLevel() != -1;
}

bool CConnectionConfig::isJpegCompressionEnabled()
{
	return GetJpegCompressionLevel() != -1;
}

void CConnectionConfig::disableCustomCompression()
{
	SetCustomCompressionLevel(-1);
}

void CConnectionConfig::disableJpegCompression()
{
	SetJpegCompressionLevel(-1);
}
void CConnectionConfig::SetScale(int n, int d)
{
	if ((n < 1) || (d < 1))
	{
		n = d = 1;
	}

	if ((n * 100.0) / d > 400)
	{
		n = 400;
		d = 100;
	}

	int g = gcd(n, d);

	n /= g;
	d /= g;


	m_nScaleNumerator = n;
	m_nScaleDenominator = d;

}

void CConnectionConfig::setLocalCursorShape(int nCursorShape)
{
	switch (nCursorShape)
	{
	case NO_CURSOR:
	case DOT_CURSOR:
	case NORMAL_CURSOR:
	case SMALL_CURSOR:
		break;

	default:
		nCursorShape = DOT_CURSOR;
		_ASSERT(false);
	} 

	m_nLocalCursor = nCursorShape;

}


// ********************************************************************************
/// <summary>
/// Greatest common denominator, by Euclid
/// </summary>
/// <param name="a"></param>
/// <param name="b"></param>
/// <returns></returns>
/// <created>Andy,2020/11/9</created>
/// <changed>Andy,2020/11/9</changed>
// ********************************************************************************
int CConnectionConfig::gcd(const int a, const int b) const
{
	if (a < b)
	{
		return gcd(b, a);
	}

	if (b == 0)
	{
		return a;
	}

	return gcd(b, a % b);
}
