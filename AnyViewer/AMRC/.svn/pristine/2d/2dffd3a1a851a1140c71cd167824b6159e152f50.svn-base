/////////////////////////////////////////////////////////////////////
/// @file AVCodeHelper.h
/// @brief 编码辅助类定义
/// 
/// @author andy
/// @version 1.0
/// @date 2021.4.6
/////////////////////////////////////////////////////////////////////

#pragma once
#include "BufferImpl.h"
#include "PrjSettings.h"

extern "C"
{
#include <libavutil\opt.h>
#include <libavutil\mathematics.h>
#include <libavutil\time.h>
#include <libavformat\avformat.h>
#include <libswscale\swscale.h>
#include <libswresample\swresample.h>
#include <libavutil\imgutils.h>
#include <libavcodec\avcodec.h>
#include <libavdevice\avdevice.h>
};

class CFrameBuffer;

using EncodeCallback = std::function<bool(AVPacket*)>;
using DecodeCallback = std::function<bool(const unsigned char*, const unsigned int, const unsigned int)>;

class CAVCodeHelper
{
public:
	CAVCodeHelper(EncodeCallback fnEncodeCallback);
	CAVCodeHelper(DecodeCallback fnDecodeCallback);
	~CAVCodeHelper();

	/// <summary>工作模式</summary>
	enum WORKING_MODE
	{
		WM_ENCODE = 1,    ///< 枚举常量，编码模式
		WM_DECODE = 2,    ///< 枚举常量，解码模式
	};
public:
	// 初始化
	bool Construct(const WORKING_MODE nMode,const unsigned int nWidth,const unsigned int nHeight, const AVPixelFormat nPixelFormat = AV_PIX_FMT_RGB32);

	// 释放
	void Destroy();

	// 编码
	bool Encode(const CFrameBuffer* pFrameBuffer);

	// 解码
	bool Decode(const unsigned char* pBuffer,const unsigned int nLen);

private:

	//  查询错误消息
	const TCHAR* QueryErrorMsg(const int nError);

private:
	/// < 工作模式
	DECLARE_MEMBER_AND_METHOD_V11(WORKING_MODE, m_nMode, Mode, WM_ENCODE);

	/// < 帧的宽度
	DECLARE_MEMBER_AND_METHOD_V11(unsigned int,m_nWidth, Width, 0); 
	
	/// < 帧的高度
	DECLARE_MEMBER_AND_METHOD_V11(unsigned int,m_nHeight, Height, 0);
	DECLARE_MEMBER_AND_GET_METHOD_V11(AVCodec* ,m_pAVCodec, AVCodecPtr, nullptr);
	DECLARE_MEMBER_AND_GET_METHOD_V11(AVCodecContext*, m_pAVCodecContext, AVCodecContextPtr,nullptr);
	DECLARE_MEMBER_AND_GET_METHOD_V11(AVFrame* ,m_pAVFrame, AVFramePtr,nullptr);
	DECLARE_MEMBER_AND_GET_METHOD_V11(AVPacket*, m_pAVPacket, AVPacketPtr,nullptr);
	AVCodecParserContext*    m_pCodecParserContext{ nullptr };

	CBufferImplT<BYTE>       m_objOutBuffer;

	// 编码回调函数
	EncodeCallback           m_fnEncodeCallback{ nullptr };

	// 解码回调函数
	DecodeCallback           m_fnDecodeCallback{ nullptr };

	struct SwsContext*       m_pImgConvertContext{ nullptr };

	std::mutex               m_objMutex;

	// 成功构造
	DECLARE_MEMBER_AND_METHOD_V11(bool, m_bConstructed, Constructed, false);

	DECLARE_MEMBER_AND_METHOD_V11(unsigned int, m_nImageQuality, ImageQuality, CPrjSettings::IQT_IMAGE_QUALITY_PRIORITY);
};


using CAVCodeHelperPtr = std::shared_ptr<CAVCodeHelper>;