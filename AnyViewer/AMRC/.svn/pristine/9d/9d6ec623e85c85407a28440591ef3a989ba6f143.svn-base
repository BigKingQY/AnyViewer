///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// @file  
/// @brief 事务抽象类定义
/// 
///
/// @author 黄丽云
/// @version 1.0
/// @date    2019-3-22
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#pragma once
#include <TypeDefine.h>
#include <MiscellaneousFunctions.h>
#include <boost/utility.hpp>
#include <fstream>
#include <boost/filesystem.hpp>
#include <boost/filesystem/fstream.hpp>


#ifndef WIN32
class CTimer;
#endif

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// <summary>
/// 事务基类
/// </summary>
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
class CTransAbstract : boost::noncopyable
{
public:
	CTransAbstract(const U32 nType)
		: m_nID(++s_nNextID)
		, m_nType(nType)
#ifndef WIN32
		, m_pTimer(nullptr)
#endif
		, m_bProcessing(false)
		, m_nFlag(0)
	{}

	virtual ~CTransAbstract();

public:

private:
	static U64    s_nNextID;

private:
	DECLARE_MEMBER_AND_METHOD(U64, m_nID, ID)       ///< 事物ID
	DECLARE_MEMBER_AND_METHOD(U32, m_nType, Type)   ///< 事物类型
#ifndef WIN32
	DECLARE_MEMBER_AND_METHOD(std::shared_ptr<CTimer>, m_pTimer, Timer)   ///< 事物类型
#endif
	DECLARE_MEMBER_AND_METHOD(bool, m_bProcessing, Processing)   ///< 正在被处理
	DECLARE_MEMBER_AND_METHOD(U32, m_nFlag, Flag)            ///< 状态标志信息
};
