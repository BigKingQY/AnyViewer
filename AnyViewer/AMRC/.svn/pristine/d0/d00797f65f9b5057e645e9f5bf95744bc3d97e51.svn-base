/////////////////////////////////////////////////////////////////////
/// @file CHTTPPacket.h
/// @brief http数据包定义
/// 
/// @author andy
/// @version 1.0
/// @date 2020.4.1
/////////////////////////////////////////////////////////////////////

#pragma once
#include "Sunday.h"
#include "ServiceImpl.h"
#include "JsonSerializer.h"
#include <map>
#include <rapidjson/document.h>
#include <rapidjson/prettywriter.h>
#include <rapidjson/stringbuffer.h>
#include <rapidjson/filewritestream.h>

class CHTTPPacket : public CNetPacketBase
{
	typedef std::map<std::string, std::string> STR_MAP_STR;

public:
	CHTTPPacket();
	CHTTPPacket(const char* lpMothed, const char* lpURL, const char* lpProtocolVer, const char* lpBody);
	~CHTTPPacket();

public:
	virtual int GetPacketId() override { return 0; }
	virtual void ResetContent() override;
	virtual NET_EXTRACT_DATA_PACKET_RESULT ExtractData(CDataStreamBuffer& refDataBuffer) override;

	// 得到参数值
	std::string GetParaValue(const char* lpKey) const;

public:

	// 添加选项
	CHTTPPacket& AppendOption(const char* lpName, const char* lpValue);

	// 组装http请求
	void Assemble(const bool bRequest = true);

	template <class PObject = CSerializeEntry * >
	bool InitialBodyT(const PObject pJsonObj);


public:

	// 解析应答信息
	void AnalyzeReponse();

	// 解析请求数据包
	void AnalyzeRequest();

	// 分析提交的参数
	void AnalyzePara(const std::string& strPara);
private:
	
	void InitShiftTable();

private:
	DECLARE_MEMBER_AND_METHOD(std::string, m_strMothed, Mothed)     ///< 请求方法
	DECLARE_MEMBER_AND_METHOD(std::string, m_strURL, URL)     ///< 请求的url
	DECLARE_MEMBER_AND_METHOD_V11(std::string, m_strProtocolVer, ProtocolVer,"HTTP/1.1") ///< 协议版本
	DECLARE_MEMBER_AND_METHOD(std::string, m_strBody, Body) ///< 协议版本
	DECLARE_MEMBER_AND_METHOD(std::string, m_strRawData, RawData)      ///<  
	DECLARE_MEMBER_AND_METHOD_V11(std::string, m_strStatusMsg, StatusMsg,"OK")      ///<  
	STR_MAP_STR              m_mapOptions;
	STR_MAP_STR              m_mapPara;           ///< 提交参数
private:
	DECLARE_MEMBER_AND_METHOD_V11(int, m_nContentLen, ContentLen, 0)         ///< 内容长度
	DECLARE_MEMBER_AND_METHOD_V11(int, m_nBodyBeginPos, BodyBeginPos, 0)     ///< 正文开始位置
	DECLARE_MEMBER_AND_METHOD_V11(int, m_nStatusCode, StatusCode, 0)     ///< 应答状态码
	CSundaySearchPtr  m_objContentLenSundaySearch = nullptr;  ///< 用于查找tag:"content-length"
	CSundaySearchPtr  m_objSeparationSundaySearch = nullptr;  ///< 用于查找tag:"\r\n\r\n"

	DECLARE_MEMBER_AND_METHOD_V11(bool, m_bHeaderAnalyzed, HeaderAnalyzed,false)      //  
};



template<class PObject>
inline bool CHTTPPacket::InitialBodyT(const PObject pJsonObj)
{
	CHECK_POINTER_EX(pJsonObj, false);

	rapidjson::Document objJsonDoc(rapidjson::kObjectType);    //生成一个dom元素Document
	CJSONSerializer objJsonSerializerHelper(objJsonDoc.GetAllocator());

	pJsonObj->Serialize(objJsonSerializerHelper);
	*((rapidjson::Value*)&objJsonDoc) = objJsonSerializerHelper.GetJsonValue();

	rapidjson::StringBuffer objBuffer;
	rapidjson::Writer<rapidjson::StringBuffer> objWriter(objBuffer);
	bool bResult = objJsonDoc.Accept(objWriter);

	m_strBody = objBuffer.GetString();

	//std::cout << m_strBody << std::endl;
	return bResult;
}

