/******************************************************************************
*
* IDEEmailModule
* Version
* Copyright (C) 2007 AxSoft Co., Ltd.
* All Rights Reserved
* $Header: /cvsdata/vc/SaxIDE/Common/IDEFieldDefine.h,v 1.2 2013/06/23 09:10:02 administrator Exp $
*
*******************************************************************************
*
* Description:
******************************************************************************/
#pragma once
#include "Typedef.h"

/// <summary>字段枚举类型</summary>
enum SSIDE_FIELD_DATA_TYPE
{
	SSIDE_FT_UNKNOWN = 0,
	SSIDE_FT_ERROR = 1,
	SSIDE_FT_I1 = 2,
	SSIDE_FT_I2 = 3,
	SSIDE_FT_I4 = 4,
	SSIDE_FT_I8 = 5,
	SSIDE_FT_R4 = 6,
	SSIDE_FT_R8 = 7,
	SSIDE_FT_BOOL = 8,
	SSIDE_FT_BSTR = 9,
	SSIDE_FT_DATE = 10,
	SSIDE_FT_UI2 = 11,
	SSIDE_FT_UI4 = 12,
	SSIDE_FT_UI8 = 13
}
;

/// <summary>字段对齐方式枚举类型</summary>
enum SSIDE_FIELD_ALIGN_MODE
{
	SSIDE_FAM_LEFT = 1,                       ///<枚举常量，居左
	SSIDE_FAM_CENTER = 2,                               ///<枚举常量，居中
	SSIDE_FAM_RIGHT = 3                               ///<枚举常量，居右
}
;

struct SSIDE_FIELD_DEFINE                        //字段信息结构
{
	unsigned int               m_nId; 			 //序号
	std::string                m_strName;         //内部名字   
	std::string		           m_strAbbrName; 	 //缩写名字
	std::string                m_strDispName;     //显示名字
	SSIDE_FIELD_DATA_TYPE      m_btType;          //存储数据类型(如:整型、字符串等)
	unsigned int                       m_nSize;           //尺寸 
	int                        m_cbOffset;        //偏移
	unsigned int                       m_nShowSize;       //显示尺寸
	BYTE                       m_btFlag;          //标志 
	SSIDE_FIELD_ALIGN_MODE     m_nAlign; 	     //横向排列方式 
	unsigned int               m_nAbstractType;   //抽象的数据类型(如:ip、port、mac等)
};


#define BEGIN_FIELD_DEFINE_MAP(theClass) \
		typedef theClass _Class; \
		static unsigned int GetFieldsDefine(SSIDE_FIELD_DEFINE** pFieldDefine) \
		{ \
			static SSIDE_FIELD_DEFINE _rgFields[] = \
			{

#define FIELD_ENTRY(name,abbrname,dispname,ordinal,dbtype,member,showsize,flag,Align) \
				FIELD_ENTRY_BASE(name,abbrname,dispname,ordinal,dbtype,sizeof(((_Class*)0)->member),member,showsize,flag,Align,SSIDE_AFT_UNKNOWN)

#define FIELD_ENTRY_EX(name,abbrname,dispname,ordinal,dbtype,member,showsize,flag,Align,AbstractType) \
					FIELD_ENTRY_BASE(name,abbrname,dispname,ordinal,dbtype,sizeof(((_Class*)0)->member),member,showsize,flag,Align,AbstractType)

#define FIELD_HIDDEN_ENTRY(name,ordinal,dbtype,member,AbstractType) \
						FIELD_ENTRY_BASE(name,name,name,ordinal,dbtype,sizeof(((_Class*)0)->member),member,0,SSIDE_HIDE,SSIDE_FAM_RIGHT,AbstractType)

#define FIELD_ENTRY_BASE(name,abbrname,dispname,ordinal, dbtype,colSize,member,showsize,flag,Align,AbstractType) \
						{ \
							ordinal,\
							name, \
							abbrname, \
							dispname, \
							dbtype, \
							colSize, \
							offsetof(_Class, member), \
							showsize, \
							flag, \
							Align, \
							AbstractType \
							},
#define FIELD_CALCULATE_ENTRY(name,abbrname,dispname,ordinal, dbtype,showsize,flag,Align) \
								FIELD_CALCULATE_ENTRY_BASE(name,abbrname,dispname,ordinal, dbtype,showsize,flag,Align,SSIDE_AFT_UNKNOWN)

#define FIELD_CALCULATE_ENTRY_BASE(name,abbrname,dispname,ordinal, dbtype,showsize,flag,Align,AbstractType) \
								{ \
									ordinal,\
									name, \
									abbrname, \
									dispname, \
									dbtype, \
									0, \
									-1, \
									showsize, \
									flag, \
									Align, \
									AbstractType \
									},

#define END_FIELD_DEFINE_MAP() \
									{ \
										0, \
										(""), \
										(""), \
										(""), \
										SSIDE_FT_UNKNOWN, \
										0, \
										0, \
										0 }}; \
										*pFieldDefine = _rgFields; \
										return sizeof(_rgFields) / sizeof(SSIDE_FIELD_DEFINE) - 1;\
										}

