/////////////////////////////////////////////////////////////////////
/// @file ESClient.h
/// @brief Elasticsearch客户端定义，主要是操作服务器Elasticsearch
/// 
/// @author andy
/// @version 1.0
/// @date 2020.4.1
/// https://www.elastic.co/guide/en/elasticsearch/reference/current/indices.html
/// https://es.xiaoleilu.com/
/// https://www.cnblogs.com/Rawls/p/10316689.html
/// https://max.book118.com/html/2019/0411/7024014103002020.shtm
/// https://www.elastic.co/guide/cn/elasticsearch/guide/current/index.html
/// https://www.elastic.co/guide/cn/kibana/current/introduction.html
/// 基于系统日志分析进行异常检测:https://blog.csdn.net/qq_33873431/article/details/102950527
/////////////////////////////////////////////////////////////////////

#pragma once
#include "CHTTPPacket.h"
#include "TreeManagerBase.h"
#include "vector"

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// <summary>
/// 索引设置类
/// </summary>
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
class CIndexSettings : public CSerializeEntry
{
public:
	CIndexSettings(int nShards = 0, int nReplica = 0)
		: m_nShards(nShards)
		, m_nReplicas(nReplica)
	{}
	~CIndexSettings() {}

	ENABLE_SERIALIZE(CIndexSettings)
public:
	virtual void Serialize(CJSONSerializer& refJsonSerializer) const override;

	virtual void DeSerialize(CJSONSerializer& refJsonSerializer) override;

	
private:
	DECLARE_MEMBER_AND_METHOD_V11(int, m_nShards, Shards, 0)     ///< 分片数量
	DECLARE_MEMBER_AND_METHOD_V11(int, m_nReplicas, Replicas, 0)     ///< 备份数量
};








/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// <summary>
/// 统计结点信息
/// </summary>
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
class CStatNode : public CSerializeEntry
{
public:
	CStatNode()	{}
	~CStatNode() {}

	ENABLE_SERIALIZE(CStatNode)
public:
	virtual void Serialize(CJSONSerializer& refJsonSerializer) const override;

	virtual void DeSerialize(CJSONSerializer& refJsonSerializer) override;

private:
	DECLARE_MEMBER_AND_METHOD_V11(int, m_nKey, Key,0)
	DECLARE_MEMBER_AND_METHOD_V11(int, m_nCount, Count,0)
};

typedef CDynamicJsonVector<CStatNode>                 CStatNodeArray;


/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// <summary>
/// 
/// </summary>
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
class CStatNodeList : public CSerializeEntry
{
public:
	CStatNodeList()
		: m_arrStatNodes(true)
	{
		m_arrStatNodes.SetEnableClassName(false);
	}
	~CStatNodeList() {}

	ENABLE_SERIALIZE(CStatNodeList)

public:
	CStatNodeArray& GetStatNodes() { return    m_arrStatNodes; }

public:
	virtual void Serialize(CJSONSerializer& refJsonSerializer) const override;

	virtual void DeSerialize(CJSONSerializer& refJsonSerializer) override;

private:
	CStatNodeArray              m_arrStatNodes;
};

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// <summary>
/// 
/// </summary>
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
class CGroupNode : public CSerializeEntry
{
public:
	CGroupNode() {}
	~CGroupNode() {}

	ENABLE_SERIALIZE(CGroupNode)

public:
	CStatNodeList& GetStatNodeList() { return    m_objStatNodeList; }

public:
	virtual void Serialize(CJSONSerializer& refJsonSerializer) const override;

	virtual void DeSerialize(CJSONSerializer& refJsonSerializer) override;

private:
	DECLARE_MEMBER_AND_METHOD_V11(std::string, m_strStatNodeListName, StatNodeListName,"stat")
	DECLARE_MEMBER_AND_METHOD(std::string, m_strKey, StrKey)
	DECLARE_MEMBER_AND_METHOD_V11(I64, m_nKey, IntKey, 0)
	DECLARE_MEMBER_AND_METHOD_V11(int, m_nDocCount, DocCount, 0)
	CStatNodeList            m_objStatNodeList;
	
};

class CESClient : public CNetClientImpl< CNetEndpoint< CHTTPPacket> >
{
public:
	CESClient(UINT nIP = 0, UINT nPort = 0);
	virtual ~CESClient();

public:
	std::string& GetBodyRef() {
		return m_strBody;
	}
public:
	virtual bool Initial() override;

	virtual bool Send(CNetPacket* pPacket) override;

	virtual bool OnReceivedPacketEventHandle(PTR_NET_ENDPOINT_INTERFACE pEndpoint, CNetPacket* pPacket) override;
		
public:
	// 创建一个索引
	bool CreateIndexs(std::string strName,const int nShards = 1,const int nReplicas = 1);

	// 删除一个索引
	bool DeleteIndexs(std::string strName);

	// 插入一个文件对象
	template <class PObject = CSerializeEntry * >
	bool InsertDocT(const char* lpIndex,const I64 nIndex,const PObject pJsonObj);

	// 执行一个命令
	bool Execute(const char* lpMothed, const char* lpURL, const std::string& refBody);

	// 执行一个命令
	template <class PObject = CSerializeEntry * >
	bool Execute(const char* lpMothed,const char* lpURL,const PObject pJsonObj);

	template <class T>
	inline bool ExtractJsonObjT(T& refJsonObj);

private:
	std::mutex               m_objMutext;
	std::condition_variable_any m_objReponse;
	DECLARE_MEMBER_AND_METHOD_V11(int, m_nStatusCode, StatusCode, 0)     ///< 应答状态码
	DECLARE_MEMBER_AND_METHOD(std::string, m_strBody, Body) ///< 协议版本
};

using CESClientPtr = std::shared_ptr<CESClient>;



//--------------------------------------------------------------------------------
/// <summary>
/// 插入一个文件到索引
/// </summary>
/// <param name="lpPath">类型路径</param>
/// <param name="nIndex">序号</param>
/// <param name="pJsonObj">需要插入的json对象</param>
/// <returns>true:成功,false:失败</returns>
/// <created>Andy,2020/4/4</created>
/// <changed>Andy,2020/4/4</changed>
//--------------------------------------------------------------------------------
template<class PObject>
inline bool CESClient::InsertDocT(const char * lpIndex, const I64 nIndex, const PObject pJsonObj)
{
	CHECK_POINTER_EX(lpIndex,false);
	CHECK_POINTER_EX(pJsonObj,false);

	std::ostringstream  ossURL;
	ossURL << "/"<< lpIndex <<"/_doc/";

	CHTTPPacket objPacket("POST", ossURL.str().c_str(), "HTTP/1.1", "");

	objPacket.InitialBodyT<PObject>(pJsonObj);

	const bool bResult = Send(&objPacket);

	return bResult;
}

template<class PObject>
inline bool CESClient::Execute(const char * lpMothed, const char * lpURL, const PObject pJsonObj)
{
	CHECK_POINTER_EX(lpMothed, false);
	CHECK_POINTER_EX(lpMothed, false);
	CHECK_POINTER_EX(pJsonObj, false);

	CHTTPPacket objPacket(lpMothed, lpURL, "HTTP/1.1", "");

	objPacket.InitialBodyT<PObject>(pJsonObj);
#ifdef Debug
	LOG_DEBUG("%s", objPacket.GetBody());
#endif

	const bool bResult = Send(&objPacket);

	return bResult;
}


// --------------------------------------------------------------------------------
/// <summary>
/// 从数据包的载荷数据中提取json对象
/// </summary>
/// <param name="refJsonObj">json对象</param>
/// <returns></returns>
/// <created>黄丽云,2019/2/27</created>
/// <changed>黄丽云,2019/2/27</changed>
// --------------------------------------------------------------------------------
template <class T>
inline bool CESClient::ExtractJsonObjT(T& refJsonObj)
{
	bool bResult = false;
	rapidjson::Document objJsonDoc;

	objJsonDoc.Parse(m_strBody.c_str());

	if (!objJsonDoc.IsNull())
	{
		CJSONSerializer objJsonSerializerHelper(objJsonDoc.GetAllocator());

		objJsonSerializerHelper.SetJsonValue(*((rapidjson::Value*)&objJsonDoc));
		refJsonObj.DeSerialize(objJsonSerializerHelper);

		bResult = true;
	}

	return bResult;
}