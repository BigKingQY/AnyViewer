/******************************************************************************
* 
* Miscellaneous Files
* Version
* Copyright (C) 2007 AxSoft Co., Ltd.
* All Rights Reserved
* $Header: /cvsdata/vc/Common/HttpClient.h,v 1.2 2015/04/10 07:47:20 administrator Exp $
* 
*******************************************************************************
* 
* Description: class definitions for CHttpSession and CHttpException
******************************************************************************/
#pragma once

#include "openssl/ssl.h"
#include <openssl/bio.h>
#include <map>
#include <mutex>

typedef std::map<std::string,std::string> STR_MAP_STR; 

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// <summary>
/// HTTP请求头类定义
/// </summary>
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
class CHTTPRequestInfo
{
public:
	CHTTPRequestInfo();
	CHTTPRequestInfo(LPCSTR lpMothed,LPCSTR lpURL,LPCSTR lpProtocolVer, LPCSTR lpBody);
	~CHTTPRequestInfo();

public:

	// 添加选项
	CHTTPRequestInfo& AppendOption(LPCSTR lpName, LPCSTR lpValue);
	
	// 组装http请求
	void Assemble();

	// 清除设置信息
	void Clear();

private:	
	DECLARE_MEMBER_AND_METHOD(std::string, m_strMothed, Mothed)     ///< 请求方法
	DECLARE_MEMBER_AND_METHOD(std::string, m_strURL, URL)     ///< 请求的url
	DECLARE_MEMBER_AND_METHOD(std::string, m_strProtocolVer, ProtocolVer) ///< 协议版本
	DECLARE_MEMBER_AND_METHOD(std::string, m_strBody, Body) ///< 协议版本
	DECLARE_MEMBER_AND_METHOD(std::string, m_strRawData, RawData)      //  
	STR_MAP_STR              m_mapOptions;
};


class CHTTPResponseInfo
{
public:
	CHTTPResponseInfo(LPCSTR lpOverTag = "\r\n\r\n");
	~CHTTPResponseInfo();
public:

	// 分析数据
	void Analyze();

	// 得到指定选项的值
	void GetOptionValue(const std::string& strOption, std::string& strValue);

	void Clear();

	// 得到应答正文
	void GetBody(std::string& strBody);
private:
	DECLARE_MEMBER_AND_METHOD(std::string,m_strRawData,RawData)      //  
	DECLARE_MEMBER_AND_METHOD_V11(unsigned int,m_nStatusCode,StatusCode,0) 
	DECLARE_MEMBER_AND_METHOD(std::string, m_strOverTag, OverTag)    //结束标志  
	STR_MAP_STR              m_mapOptions;
};

class CHTTPClient
{
public:
	CHTTPClient();
	~CHTTPClient();
public:
	bool Init(unsigned int nIP,unsigned int nPort,bool bEnableSSL);
	bool Connect();
	bool Disconnect();
	bool SendData(std::string strMsg);
	bool RecvData(std::string& strResponseText, CHTTPResponseInfo& objResponseInfo);
	int PostHTTPRequest(CHTTPRequestInfo& objRequestInfo,CHTTPResponseInfo& objResponseInfo);
protected:

private:
	int                   m_pSocket;                 //用于连接放火墙 
	unsigned int                     m_nIP;
	unsigned int                     m_nPort;
	DECLARE_MEMBER_AND_METHOD_V11(bool,m_bEnableSSL, EnableSSL,false);
	DECLARE_MEMBER_AND_METHOD_V11(bool, m_bRuning, Runing,false);
	SSL*                     m_pSSL;
	SSL_CTX*                 m_pSSLCtx;
	BIO                      *m_pBIO; 
	std::mutex               m_csLock;   ///< 
};