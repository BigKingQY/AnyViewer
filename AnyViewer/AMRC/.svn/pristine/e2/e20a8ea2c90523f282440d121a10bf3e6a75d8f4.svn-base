/******************************************************************************
* 
* SaxMail
* Version
* Copyright (C) 2007 AxSoft Co., Ltd.
* All Rights Reserved
* $Header: /cvsdata/vc/SaxMail/Mailer.h,v 1.3 2015/06/11 07:31:59 administrator Exp $
* 
*******************************************************************************
* 
* Description:
******************************************************************************/
#pragma once

#include <memory>
#include <vector>
#include <map>
#include <exception>

enum SAX_MAIL_ERROR_TYPE
{
	SMET_SUCCESSFULLY = 1,          //·¢ËÍ³É¹¦
	SMET_FAIL_SENT = -1,         //·¢ËÍÊ§°Ü
	SMET_FAIL_CONNECT = -2,         //ÎÞ·¨Á¬½Óµ½Ö¸¶¨µÄ·þÎñÆ÷
	SMET_FAIL_LOGIN = -3,         //µÇÂ¼Ê§°Ü
	SMET_FAIL_SEND_HEADER = -4,   //µÇÂ¼Ê§°Ü
	SMET_FAIL_SEND_CONTENT = -5,   //µÇÂ¼Ê§°Ü
	SMET_FAIL_SEND_END = -6,   //µÇÂ¼Ê§°Ü
	SMET_FAIL_QUIT = -7   //µÇÂ¼Ê§°Ü
};

class CNetTCPDataTransfer;

class CMailException : public std::exception
{
public:
	CMailException(const char* lpMsg)
		: m_strMessage(lpMsg)
	{
	}

	const char *what() const throw ()
	{
		return m_strMessage.c_str();
	}

private:
	std::string m_strMessage;
};

class CMimeContent
{
public:
    CMimeContent(const std::string strContent = "");
	virtual ~CMimeContent() {}
public:
    virtual std::string  GetType() const = 0;
    virtual std::string  GetDisposition() const;
    virtual std::string  GetTransEncoding() const = 0;
    virtual std::string& GetContent() = 0;
protected:
    std::string          m_strContent;
};

typedef std::vector<CMimeContent*> MIME_CONTENTS_VECTOR;

// class PlainTextContent
/////////////////////////////////////

class CTextPlainContent : public CMimeContent
{
public:
    CTextPlainContent(const std::string strContent, 
                     const std::string strCharSet = ("gb2312"));
public:
    virtual std::string  GetType() const;
    virtual std::string  GetTransEncoding() const;
    virtual std::string& GetContent();

private:
    std::string m_strCharSet;
};

// class CTextHtmlContent
/////////////////////////////////////

class CTextHtmlContent : public CMimeContent
{
public:
    CTextHtmlContent(const std::string strContent, 
                    const std::string strCharSet = ("gb2312"));
public:
    virtual std::string  GetType() const;
    virtual std::string  GetTransEncoding() const;
    virtual std::string& GetContent();

private:
    std::string          m_strCharSet;
};

// class CAttachContent
/////////////////////////////////////

class CAttachContent : public CMimeContent
{
public:
    CAttachContent(const std::string strFileName);
public:
    virtual std::string  GetType() const;
    virtual std::string  GetDisposition() const;
    virtual std::string  GetTransEncoding() const;
    virtual std::string& GetContent();

private:
    std::string           m_strFileName;
    std::string           m_strName;
};

// class CMailInfo
/////////////////////////////////////

typedef std::multimap<std::string, std::string> RECEIVERS_MAP;

class CMailInfo
{
public:
	CMailInfo();
	virtual ~CMailInfo();
public:
    void SetSenderName(const std::string strName)        { m_strSenderName = strName; }
    void SetSenderAddress(const std::string strAddress)  { m_strSenderAddress = strAddress;}
	std::string GetSenderName() const                    { return m_strSenderName; }
	std::string GetSenderAddress() const                 { return m_strSenderAddress; }   
    const RECEIVERS_MAP& GetReceivers() const         { return m_mmReceivers; }

    void SetPriority(std::string priority)               { m_strPriorty = priority; }
	std::string GetPriority() const                      { return m_strPriorty; }

    void SetSubject(const std::string subject)           { m_strSubject = subject; }
    std::string GetSubject() const                       { return m_strSubject;} 
public:
	void AddReceiver(const std::string strName, const std::string strAddress);
	void SetReceiver(const std::string strName, const std::string strAddress);
    void AddTextPlainContent(const char* pContent);
	void AddTextHtmlContent(char* pContent);
	void AddAttachContent(char* pContent);
    void ClearMimeContents();
    const MIME_CONTENTS_VECTOR& GetMimeContents() const;
private:
    std::string                 m_strSenderName;
    std::string                 m_strSenderAddress;
    RECEIVERS_MAP            m_mmReceivers;
    std::string                 m_strPriorty;
    std::string                 m_strSubject;
    MIME_CONTENTS_VECTOR     m_vtrContents;
};

using CMailInfoPtr = std::shared_ptr<CMailInfo>;

// class CMailWrapper
/////////////////////////////////////

class CMailWrapper
{
public:
    CMailWrapper(CMailInfoPtr pMailInfo);
public:
    std::string GetSenderAddress();
    std::string GetHeader();
    std::string GetEnd();

    void TraverseReceiver();
    bool HasMoreReceiver();
    std::string NextReceiverAddress();

    void TraverseContent();
    bool HasMoreContent();
    std::string& NextContent();

	std::string PrepareFrom();
	std::string PrepareTo();
	std::string PrepareDate();
	std::string PrepareName(const std::string strRawName);

private:
    CMailInfoPtr                            m_pMailInfo;
    RECEIVERS_MAP::const_iterator         m_objReceiverItr;
    std::string                              m_strContent;
    MIME_CONTENTS_VECTOR::const_iterator  m_objContentItr;
};

// class CMailSender
/////////////////////////////////////

class CMailSender
{
public:
    CMailSender();
    ~CMailSender();



public:
	void SetServerName(std::string strServerName);
	void SetUserName(std::string strUserName)      { m_strUserName = strUserName;}
	void SetPassword(std::string strPassword)      { m_strPassWord = strPassword;}
public:
	bool Init();
	void Close();
public:
	virtual SAX_MAIL_ERROR_TYPE SendMailEx(CMailInfoPtr pMailInfoBase);
	virtual SAX_MAIL_ERROR_TYPE Login();
	virtual SAX_MAIL_ERROR_TYPE SendMail(CMailInfoPtr pMailInfoBase);
	virtual SAX_MAIL_ERROR_TYPE Quit();
	virtual std::string GetErrMessage();
private:
    enum {SERVICE_PORT = 25};

    enum SMTP_COMMAND
    {
        SC_HELO, 
        SC_AUTH, 
        SC_USER_NAME, 
        SC_PASSWORD, 
        SC_MAIL, 
        SC_RCPT, 
        SC_DATA, 
        SC_HEADER, 
        SC_CONTENT, 
        SC_END, 
        SC_QUIT, 
    };

    bool Connect();
    void Hello();

    bool SendHeader(CMailWrapper& objMailWrapper);
    bool SendContent(CMailWrapper& objMailWrapper);
    bool SendEnd(CMailWrapper& objMailWrapper);

    bool SendRequest(SMTP_COMMAND nCommand, const char* pContent);
    bool RcvResponse(const char* pExpectedResponse);

    friend class CErrorMessage;
private:
	std::string          m_strServerName;
	std::string          m_strUserName;
	std::string          m_strPassWord;	
	std::string          m_strErrMessage;
	unsigned int         m_nSMTPSeverIP;
	std::shared_ptr<CNetTCPDataTransfer>  m_pTCPDataTransfer = nullptr;
};

using CMailSenderPtr = std::shared_ptr<CMailSender>;

// class CErrorMessage(Helper class)
/////////////////////////////////////

class CErrorMessage
{
public:
	CErrorMessage();
public:
    static CErrorMessage& GetInstance();

    std::string& Request(CMailSender::SMTP_COMMAND nRequestCommand);
    std::string& Response(const std::string strExpectedResponse);
private:
    std::map<CMailSender::SMTP_COMMAND, std::string>    m_mapRequestErrMsg;
    std::map<std::string, std::string>                     m_mapResponsErrMsg;    
};

// class CMailException(Helper class)
/////////////////////////////////////


