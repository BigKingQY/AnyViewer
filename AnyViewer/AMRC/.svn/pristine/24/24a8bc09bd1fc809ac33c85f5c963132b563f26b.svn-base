/////////////////////////////////////////////////////////////////////
/// @file consoleClient.h
/// @brief 用于与控制台通信的客户端类定义
/// 
///
/// @author andy
/// @version 1
/// @date 2016-12-24
/////////////////////////////////////////////////////////////////////
#pragma once
#include "NetServiceImpl.h"
#include "DataPacket.h"
#include "ECC.h"
#include "RCProtocol.h"
#include "ConsoleProxy.h"

#include <boost/timer.hpp>


#define ECC_KEY_LEN   24

class CRCSvrProxy  : public CConsoleProxy
{
public:
	CRCSvrProxy(UINT nIP,USHORT nPort);
	~CRCSvrProxy(void);
public:

protected:
	virtual bool OnPreSendPacketEventHandle(PTR_NET_ENDPOINT_INTERFACE pEndpoint, CNetPacket* pPacket);
	virtual bool OnProReceivedPacketEventHandle(PTR_NET_ENDPOINT_INTERFACE pNetEndpointInterface, CNetPacket* pNetPacket);
	virtual bool OnReceivedPacketEventHandle(PTR_NET_ENDPOINT_INTERFACE pEndpoint, CNetPacket* pPacket);
	virtual bool OnEventHandle(PTR_NET_ENDPOINT_INTERFACE pEndpoint, SEVERITY_LEVEL nSeverity, SERVICE_EVENT nEvent, LPCTSTR lpTips);
	virtual bool OnReconnectEventHandle(PTR_NET_ENDPOINT_INTERFACE);
	//virtual bool OnCloseEventHandle(PTR_NET_ENDPOINT_INTERFACE);

protected:   // 应答数据包


private:
	void InitECCKey();

	void OnAESEncipherKey(CDataPacket* pDataPacket );

	void SetAESEncipherKey(const UCHAR* pKey);

	RCP::EXCEPTION_STATUS SyncSend(CDataPacket & refSend, PTR_WAIT_TASK ptrWaitTask, std::shared_ptr<CDataPacket>& refAckPacket);
private:


public:
	struct aes_ctx          m_objAESEncipherKey;             ///<aes加密对象,用于加密发送数据  
private:
	// 下面的程序是用于ECC加解密的key
	// 下面的3个Key用于加密
	char                        m_szPublicKeyX[ECC_KEY_LEN];        ///< ECC共有KEY的X部分
	char                        m_szPublicKeyY[ECC_KEY_LEN];        ///< ECC共有KEY的Y部分
	char                        m_szLittleKey[ECC_KEY_LEN];           ///< ECC小KEY

	// 下面的3个Key用于解密
	char                        m_szRKeyX[ECC_KEY_LEN];
	char                        m_szRKeyY[ECC_KEY_LEN];
	char                        m_szPrivateKey[ECC_KEY_LEN];
	//DECLARE_MEMBER_AND_METHOD(CString, m_strAccount, Account)      ///< 账号 
	DECLARE_MEMBER_AND_METHOD(I64, m_nID, ID);
	DECLARE_MEMBER_AND_METHOD(unsigned int, m_nType, Type);  ///<@see COST_CLIENT_TYPE
	boost::timer               m_objSendingLastTime;
};

using CRCSvrProxyPtr = std::shared_ptr<CRCSvrProxy>;
