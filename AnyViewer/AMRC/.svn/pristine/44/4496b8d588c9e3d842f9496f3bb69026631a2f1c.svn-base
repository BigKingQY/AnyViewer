///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// @file  
/// 字符串查找器类实现
/// 
///
/// @author 黄丽云
/// @version 1.0
/// @date        2019-8-5
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#include "StrFinder.h"


CStrFinder::CStrFinder()
{
}


CStrFinder::~CStrFinder()
{
}

//--------------------------------------------------------------------------------
/// <summary>
/// 初始化查找器
/// </summary>
/// <param name="strPatterString"></param>
/// <returns></returns>
/// <created>Andy,2019/8/5</created>
/// <changed>Andy,2019/8/5</changed>
//--------------------------------------------------------------------------------
bool CStrFinder::Init(const std::string& strPatterString)
{
	m_objPatter = nullptr;

	if (strPatterString.size() > 0)
	{
		bool bAppend = false;
		std::string strPatterList;
		const size_t STR_LEN = strPatterString.size();
		std::string strPatter;

		for (size_t i = 0; i < STR_LEN; i++)
		{
			const char chCurrent = strPatterString[i];

			switch (chCurrent)
			{
			case ' ':
			case ';':
			case ',':
			{
				bAppend = true;
			}
			break;

			default:
				strPatter += chCurrent;
				bAppend = ((i + 1) == STR_LEN);
				break;
			}

			if (bAppend)
			{
				if (strPatter.size() > 0)
				{
					if (strPatterList.size() == 0)
					{
						strPatterList = strPatter;
					}
					else
					{
						strPatterList += ".*";
						strPatterList += strPatter;
					}

					strPatter.clear();
				}

				bAppend = false;
			}
		}

		m_objPatter = std::make_shared<boost::regex>(strPatterList);
	}


	return (nullptr != m_objPatter);
}

//--------------------------------------------------------------------------------
/// <summary>
/// 在指定的字符串中查找初始化的模式
/// </summary>
/// <param name="strSrc"></param>
/// <returns></returns>
/// <created>Andy,2019/8/5</created>
/// <changed>Andy,2019/8/5</changed>
//--------------------------------------------------------------------------------
bool CStrFinder::Lookup(const std::string & strSrc)
{
	bool bResult = false;

	if (nullptr != m_objPatter)
	{
		boost::match_results<std::string::const_iterator> what;
		bResult = boost::regex_search(strSrc, what, *(m_objPatter));
	}

	return bResult;
}
