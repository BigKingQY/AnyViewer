//////////////////////////////////////////////////////////////////////////////////////////////
/// @file  LVNCDataPacket.cpp
/// @brief 本地VNC通信采用的专用数据包类实现
/// 
/// @author 黄丽云
/// @version 1.0
/// @date        2021-1-21
//////////////////////////////////////////////////////////////////////////////////////////////
#include "stdafx.h"

#include "LVNCDataPacket.h"
#include "VNCProtocol.h"

CLVNCDataPacket::CLVNCDataPacket()
{
}

CLVNCDataPacket::~CLVNCDataPacket()
{
}

// ********************************************************************************
/// <summary>
/// 提取区域信息
/// </summary>
/// <param name="refRegion">接收提取的区域信息</param>
/// <created>Andy,2021/1/22</created>
/// <changed>Andy,2021/1/22</changed>
// ********************************************************************************
void CLVNCDataPacket::ExtractRegion(CRegion & refRegion) const
{
	const VNCP::FRAME_BUFFER_UPDATE_INFO* pRegionInfo = (VNCP::FRAME_BUFFER_UPDATE_INFO*)MESSAGE_DATA_PTR(m_objDataBuffer.GetBufferHeadPtr());
	const VNCP::DESKTOP_COORDS_INFO* pCoordsInfo = (VNCP::DESKTOP_COORDS_INFO*)pRegionInfo->pRectData;

	for (int i = 0; i < pRegionInfo->nRects; i++)
	{
		Rect objRect;

		objRect.left = pCoordsInfo->nLeft;
		objRect.top = pCoordsInfo->nTop;
		objRect.right = pCoordsInfo->nRight;
		objRect.bottom = pCoordsInfo->nBottom;

		refRegion.AddRect(&objRect);
		pCoordsInfo++;
	}
}

// ********************************************************************************
/// <summary>
/// 填充区域信息
/// </summary>
/// <param name="refRegion"></param>
/// <created>Andy,2021/1/22</created>
/// <changed>Andy,2021/1/22</changed>
// ********************************************************************************
void CLVNCDataPacket::FillRegion(const CRegion & refRegion)
{
	VNCP::FRAME_BUFFER_UPDATE_INFO* pRegionInfo = (VNCP::FRAME_BUFFER_UPDATE_INFO*)MESSAGE_DATA_PTR(m_objDataBuffer.GetBufferHeadPtr());
	VNCP::DESKTOP_COORDS_INFO* pCoordsInfo = (VNCP::DESKTOP_COORDS_INFO*)pRegionInfo->pRectData;
	CRectArray arrRects;

	refRegion.GetRectVector(&arrRects);
	pRegionInfo->nRects = U16(arrRects.size());

	// 检查有足够的控件
	assert(m_objDataBuffer.GetSize() >= (MESSAGE_HEADER_LEN + arrRects.size() * sizeof(VNCP::DESKTOP_COORDS_INFO)));

	for (auto objRect : arrRects)
	{
		pCoordsInfo->nLeft = objRect.left;
		pCoordsInfo->nTop = objRect.top;
		pCoordsInfo->nRight = objRect.right;
		pCoordsInfo->nBottom = objRect.bottom;

		pCoordsInfo++;
	}
}

// ********************************************************************************
/// <summary>
/// 写数据到缓冲区中
/// </summary>
/// <param name="pData"></param>
/// <param name="nLen"></param>
/// <created>Andy,2021/1/22</created>
/// <changed>Andy,2021/1/22</changed>
// ********************************************************************************
void CLVNCDataPacket::Write(const U8 * pData, const int nLen)
{
	m_objDataBuffer.Write(pData, nLen);
}

// ********************************************************************************
/// <summary>
/// 从缓冲区中读取数据
/// </summary>
/// <param name="pData"></param>
/// <param name="nLen"></param>
/// <returns></returns>
/// <created>Andy,2021/1/22</created>
/// <changed>Andy,2021/1/22</changed>
// ********************************************************************************
int CLVNCDataPacket::Read(U8 * pData, const int nLen)
{
	return m_objDataBuffer.Read(pData, nLen);
}

// ********************************************************************************
/// <summary>
/// 移动写位置
/// </summary>
/// <param name="nOffset">写位置偏移</param>
/// <created>Andy,2021/1/22</created>
/// <changed>Andy,2021/1/22</changed>
// ********************************************************************************
void CLVNCDataPacket::SetWritingOffset(const int nOffset)
{
	m_objDataBuffer.SetCurWritingPos(nOffset);
}


// ********************************************************************************
/// <summary>
/// 设置缓冲区中的读偏移
/// </summary>
/// <param name="nOffset"></param>
/// <created>Andy,2020/12/2</created>
/// <changed>Andy,2020/12/2</changed>
// ********************************************************************************
void CLVNCDataPacket::SetReadingOffset(const unsigned int nOffset)
{
	m_objDataBuffer.SetCurReadingPos(nOffset);
}

// ********************************************************************************
/// <summary>
/// 计算载荷数据的长度
/// </summary>
/// <created>Andy,2020/12/1</created>
/// <changed>Andy,2020/12/1</changed>
// ********************************************************************************
void CLVNCDataPacket::CalcPayloadLen()
{
	MESSAGE_HEADER* pMsgHeader = (MESSAGE_HEADER*)m_objDataBuffer.GetDataHeadPtr();
	const unsigned int nPayloadLen = (m_objDataBuffer.GetDataLen() - sizeof(MESSAGE_HEADER));

	assert(nPayloadLen <= PACKET_LEN_MAX - sizeof(MESSAGE_HEADER));
	pMsgHeader->nPayloadLen = HTONL(nPayloadLen);
}